<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows 补丁的提取和比较</title>
    <link href="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/"/>
    <url>/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://wumb0.in/extracting-and-diffing-ms-patches-in-2020.html">Extracting and Diffing Windows Patches in 2020</a></p><style>    .highlight {        background-color: rgba(255,255,0, 0.5);    }</style><p>我已经有一段时间没有在这里发布任何东西了！毕竟，个人博客除了多年来被忽视之外还有什么用；）</p><p>不管怎样，我在教授 <a href="https://www.sans.org/cyber-security-courses/advanced-exploit-development-penetration-testers/">SANS SEC760</a> 时一直在运行这个演示，我想我应该把它写下来，以便研究人员稍后在需要时可以回来查看它。将所有这些内容记录在一个地方也很有用，因为有关它的信息似乎分散在整个 Internet 上，就像许多 Windows 主题一样。</p><p>那么为什么要关心提取和分析 Windows 补丁呢？补丁不是说修复的bug现在就没用了吗？</p><p>要开始思考如何回答这些问题，请考虑一下，即使是一个运行良好且具有适当补丁管理的组织也需要多长时间才能向设备推出补丁。如果您，安全研究人员，可以在补丁发布后的几周内将错误武器化，那么您就可以出售它或在活动中使用它。查找 bug 很困难，但是经过 n 天的研究可以告诉您几乎确切的 bug 位置！这是个好消息。查看补丁的实施方式以及错误的修复位置对于发现 0day 也很有用。多年来，微软不得不在多个地方修复相同（或非常相似）的错误。一个典型的例子是旧的 <a href="https://docs.microsoft.com/en-us/security-updates/securitybulletins/2007/ms07-017">MS07-017</a> 动画光标错误，它实际上是两年前 (<a href="https://docs.microsoft.com/en-us/security-updates/securitybulletins/2005/ms05-002">MS05-002</a>) 中相同错误的重复，只是一个函数交叉引用。此外，微软可能根本不会修复该漏洞，或者修复可能不完整，就像今年发现的打印后台处理程序错误一样，该错误被 Ionescu 和 Shafir 称为 <a href="https://windows-internals.com/printdemon-cve-2020-1048/">PrintDemon</a>。原始 CVE 为 <a href="https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2020-1048">CVE-2020-1048</a>，归功于 <a href="https://safebreach.com/safebreach-labs">SafeBreach 实验室</a> 的 Peleg Hadar 和 Tomer Bar。修复后，Ionescu 被认定为 CVE-2020-1337，该漏洞仍然允许通过检查时间使用时间 (TOC&#x2F;TOU) 错误创建恶意端口，详细信息请参见<a href="https://twitter.com/aionescu/status/1293283013715951622">此处</a>。所有这些只是想说：是的，值得一看补丁。查看补丁还可以帮助您找到尚未被研究人员彻底分解的新功能，<a href="https://twitter.com/aionescu/status/1271098369788674051">这些新功能是漏洞研究的主要目标</a>。</p><h1 id="如何获取补丁以及Windows补丁包格式"><a href="#如何获取补丁以及Windows补丁包格式" class="headerlink" title="如何获取补丁以及Windows补丁包格式"></a><strong>如何获取补丁以及Windows补丁包格式</strong></h1><p>为了能够分解补丁，您首先需要了解补丁的格式以及如何获取它们。您实际上可能对用于打包补丁的文件格式有些熟悉：<code>.MSU</code>（Microsoft 独立更新）和 <code>.CAB</code>（Cabinet）。所有补丁均作为 Windows Update 的一部分分发到您的设备上，但您仍然可以从 <a href="https://www.catalog.update.microsoft.com/Home.aspx">Microsoft Update Catolog</a> 下载独立补丁。在这篇文章中，我将拆解 Windows 10 1903 x64 的补丁。很久以前，<span class="highlight">微软将每个月的第二个星期二定为“补丁星期二” </span>，这样补丁管理员就可以随时知道何时需要修复。在大多数情况下，他们坚持在补丁星期二发布更新，偶尔会针对<a href="https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2015/ms15-078">非常严重</a>的错误发布紧急补丁。Microsoft 过去提供必须按顺序安装的连续更新包。如今，更新以累积方式提供，这意味着基础版本 (.1) 所需的所有更新都包含在软件包中。这可以进行一些相当大的更新！许多更新都以<code>增量</code>形式分发，这让事情变得更复杂一些。我们将在本文后面深入讨论这一点。</p><h2 id="有效浏览-Microsoft-更新目录"><a href="#有效浏览-Microsoft-更新目录" class="headerlink" title="有效浏览 Microsoft 更新目录"></a><strong>有效浏览 Microsoft 更新目录</strong></h2><p>幸运的是，Microsoft 更新目录具有非常好的搜索功能。搜索所需更新的最有效方法是按以下格式搜索：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">YYYY-MM <span class="hljs-keyword">release</span>-number (<span class="hljs-keyword">x</span><span class="hljs-number">86</span>|<span class="hljs-keyword">x</span><span class="hljs-number">64</span>|ARM<span class="hljs-number">64</span>) cumulative<br></code></pre></td></tr></table></figure><p>例如，如果我正在寻找 Windows 10 1903 x64 的 2020 年 7 月补丁集，我将搜索 2020-07 1903 x64 累积，并且最热门的点击之一应该是我正在寻找的结果。</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/msupdate-search.png" alt="Relevant results are easy to get with the right search!"></p><p>如您所见，返回了几个不同版本号（1903、1909 和 2004）以及 Windows 10 和 Windows Server 的结果。敏锐的观察者应该注意到，Windows Server 和 Windows 10 更新的大小完全相同。事实上，如果您单击下载，两个链接都会定向到同一个地方。此外，1903和1909的更新也是相同的。后一种情况的原因在操作系统<a href="https://support.microsoft.com/en-us/help/4565483">构建页面</a>上进行了解释：</p><pre><code class="hljs">Windows 10 版本 1903 和 1909 共享一个通用的核心操作系统和一组相同的系统文件。因此，Windows 10 版本 1909 中的新功能包含在最近的 Windows 10 版本 1903 每月质量更新（2019 年 10 月 8 日发布）中，但目前处于休眠状态。这些新功能将保持休眠状态，直到使用启用包打开它们，启用包是一个小型、快速安装的“主开关”，只需激活 Windows 10 版本 1909 功能即可。</code></pre><h2 id="动态和服务堆栈更新"><a href="#动态和服务堆栈更新" class="headerlink" title="动态和服务堆栈更新"></a><strong>动态和服务堆栈更新</strong></h2><p>Microsoft 还通过 Microsoft 更新目录分发一些其他类型的更新。如果您在上面的搜索中省略“<code>cumulative(累积)</code>”一词，那么您会得到更多结果，包括比累积更新小得多的 <code>Dynamic(动态)</code> 和 <code>Servicing Stack(服务堆栈)</code> 更新。</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/msupdate-variations.png" alt="Different Kinds of Updates"></p><p><a href="https://docs.microsoft.com/en-us/windows/deployment/update/servicing-stack-updates">根据 Microsoft 文档</a>，服务堆栈更新是对 Windows 更新过程本身的更新。服务堆栈更新像累积更新一样打包，并且仅包含与 Windows Update 相关的组件。</p><p><a href="https://techcommunity.microsoft.com/t5/windows-it-pro-blog/the-benefits-of-windows-10-dynamic-update/ba-p/467847">Microsoft 文档</a> 再次为动态更新节省了时间，这显然还可以更新 Windows 更新组件，以及安装介质、Windows 恢复环境 (WinRE) 和一些驱动程序等安装组件。<span class="highlight"> 动态更新的打包方式与累积更新和服务堆栈更新略有不同；它们可以作为单个 CAB 文件下载，并具有各种语言包和其他安装组件</span>。</p><h1 id="提取补丁"><a href="#提取补丁" class="headerlink" title="提取补丁"></a><strong>提取补丁</strong></h1><p>补丁被紧密地打包到一个 MSU 文件中，该文件可以包含数以万计的文件，其中只有一些文件对我们作为安全研究人员来说很重要。我想首先完成手动提取，然后提供对现有脚本 (<code>PatchExtract.ps1</code>) 的更新，以自动提取和排序给定的补丁。</p><h2 id="手动提取"><a href="#手动提取" class="headerlink" title="手动提取"></a><strong>手动提取</strong></h2><p>首先，您需要从更新目录下载累积更新 MSU 文件。在本示例中，我使用 Windows 10 1903 x64 2020 年 8 月累积更新包。我通常在开始之前创建几个文件夹：我用补丁年份和月份命名顶级文件夹，然后创建两个子文件夹，分别称为 <code>patch</code> 和 <code>ext</code>。嵌套 CAB 文件内的实际补丁文件将放入 patch 文件夹中，解压的 MSU 的内容将放入 ext 文件夹中。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir <span class="hljs-number">2020</span><span class="hljs-literal">-08</span><br><span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;.\windows10.0-kb4565351-x64_e4f46f54ab78b4dd2dcef193ed573737661e5a10.msu&quot;</span> .\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\<br><span class="hljs-built_in">cd</span> .\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\<br>mkdir ext<br>mkdir patch<br></code></pre></td></tr></table></figure><p>接下来，我将使用 <code>Expand.exe</code> 命令提取 <code>MSU</code>。 Expand 的参数可以使用 <code>/?</code> 选项获取详细说明。出于我们的目的，我们将提取每个文件，因此我们将使用 <code>-F:*</code>。如果您只需要某些类型的文件（CAB、DLL、EXE 等），那么您可以使用 <code>-F</code> 标志来实现。接下来的两个参数是要提取的 MSU，然后是扩展文件的目标文件夹。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">expand.exe <span class="hljs-operator">-F</span>:* <span class="hljs-string">&quot;.\windows10.0-kb4565351-x64_e4f46f54ab78b4dd2dcef193ed573737661e5a10.msu&quot;</span> .\ext\<br></code></pre></td></tr></table></figure><p>最后，我将再次使用 <code>expand</code> 命令从PSFX cab文件中提取补丁文件，这次扩展到 <code>patch</code> 目录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">expand.exe <span class="hljs-operator">-F</span>:* <span class="hljs-string">&quot;.\ext\Windows10.0-KB4565351-x64_PSFX.cab&quot;</span> .\patch\ | <span class="hljs-built_in">Out-Null</span><br></code></pre></td></tr></table></figure><p>此时我建议走开，开始洗一堆衣服，买一个三明治，然后抚摸猫，因为这部分需要一段时间（10-20 分钟）。<code>Out-Null</code> 是可选的，我只使用它，因为我不关心它打印要提取的每个文件。这种特殊的提取大约需要 15 分钟（通过 <code>Measure-Command</code>），并在 <code>patch</code> 文件夹下总共产生了 <code>78898</code> 个文件和文件夹！</p><p>如果你在家也跟着做： 提取完成后，给自己鼓掌，然后收回它，因为不幸的是，这是最容易的部分！</p><p>接下来，您必须理解提取的文件并找到您正在寻找的修补文件。</p><h2 id="理解提取的文件"><a href="#理解提取的文件" class="headerlink" title="理解提取的文件"></a><strong>理解提取的文件</strong></h2><p>要找到您要查找的内容，了解补丁的结构以及您将遇到的文件类型会有所帮助。</p><p>要开始了解这些细节，请看一下从 MSU 开始的补丁的层次结构视图（输出缩写以节省空间）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs stylus">windows10.<span class="hljs-number">0</span>-kb4565351-x64_e4f46f54ab78b4dd2dcef193ed573737661e5a10<span class="hljs-selector-class">.msu</span><br>├── WSUSSCAN<span class="hljs-selector-class">.cab</span><br>├── Windows10.<span class="hljs-number">0</span>-KB4565351-x64-pkgProperties_PSFX<span class="hljs-selector-class">.txt</span><br>├── Windows10.<span class="hljs-number">0</span>-KB4565351-x64_PSFX<span class="hljs-selector-class">.xml</span><br>└── Windows10.<span class="hljs-number">0</span>-KB4565351-x64_PSFX<span class="hljs-selector-class">.cab</span><br>    ├── amd64_microsoft<span class="hljs-selector-class">.windows</span><span class="hljs-selector-class">.gdiplus_6595b64144ccf1df_1</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>_none_e013babca5ee7b0b<br>    │   └── gdiplus<span class="hljs-selector-class">.dll</span><br>    ├── amd64_microsoft-windows-os-kernel_31bf3856ad364e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>_none_79ea293316ee3bad<br>    │   ├── f<br>    │   │   └── ntoskrnl<span class="hljs-selector-class">.exe</span><br>    │   └── r<br>    │       └── ntoskrnl<span class="hljs-selector-class">.exe</span><br>    ├── msil_microsoft<span class="hljs-selector-class">.hyperv</span><span class="hljs-selector-class">.powershell</span><span class="hljs-selector-class">.cmdlets_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">959</span>_none_a7668eee2055cacf<br>    │   ├── f<br>    │   │   └── microsoft<span class="hljs-selector-class">.hyperv</span><span class="hljs-selector-class">.powershell</span><span class="hljs-selector-class">.cmdlets</span><span class="hljs-selector-class">.dll</span><br>    │   └── r<br>    │       └── microsoft<span class="hljs-selector-class">.hyperv</span><span class="hljs-selector-class">.powershell</span><span class="hljs-selector-class">.cmdlets</span><span class="hljs-selector-class">.dll</span><br>    ├── wow64_microsoft-windows-<span class="hljs-selector-tag">p</span>.<span class="hljs-selector-class">.ting-spooler-client_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">693</span>_none_f3229700ded2ae02<br>    │   ├── f<br>    │   │   └── winspool<span class="hljs-selector-class">.drv</span><br>    │   └── r<br>    │       └── winspool<span class="hljs-selector-class">.drv</span><br>    ├── x86_microsoft-windows-win32calc<span class="hljs-selector-class">.resources_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">387</span>_ar-sa_38566bf3d86fbe5c<br>    │   ├── f<br>    │   │   └── win32calc<span class="hljs-selector-class">.exe</span><span class="hljs-selector-class">.mui</span><br>    │   └── r<br>    │       └── win32calc<span class="hljs-selector-class">.exe</span><span class="hljs-selector-class">.mui</span><br>    ├── amd64_windows-shield-provider_31bf3856ad364e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">900</span>_none_fbf40d7d5ed8b490<br>    │   ├── f<br>    │   │   ├── featuretoastbulldogimg<span class="hljs-selector-class">.png</span><br>    │   │   ├── securityhealthagent<span class="hljs-selector-class">.dll</span><br>    │   │   ├── securityhealthhost<span class="hljs-selector-class">.exe</span><br>    │   │   ├── securityhealthproxystub<span class="hljs-selector-class">.dll</span><br>    │   │   ├── securityhealthservice<span class="hljs-selector-class">.exe</span><br>    │   │   ├── windowsdefendersecuritycenter<span class="hljs-selector-class">.admx</span><br>    │   │   └── windowssecurityicon<span class="hljs-selector-class">.png</span><br>    │   ├── n<br>    │   │   └── featuretoastdlpimg<span class="hljs-selector-class">.png</span><br>    │   └── r<br>    │       ├── featuretoastbulldogimg<span class="hljs-selector-class">.png</span><br>    │       ├── securityhealthagent<span class="hljs-selector-class">.dll</span><br>    │       ├── securityhealthhost<span class="hljs-selector-class">.exe</span><br>    │       ├── securityhealthproxystub<span class="hljs-selector-class">.dll</span><br>    │       ├── securityhealthservice<span class="hljs-selector-class">.exe</span><br>    │       ├── windowsdefendersecuritycenter<span class="hljs-selector-class">.admx</span><br>    │       └── windowssecurityicon<span class="hljs-selector-class">.png</span><br>    ├── microsoft-windows-kernel-feature-package~<span class="hljs-number">31</span>bf3856ad364e35~amd64~~<span class="hljs-number">10.0</span>.<span class="hljs-number">18362.1016</span><span class="hljs-selector-class">.cat</span><br>    ├── microsoft-windows-kernel-feature-package~<span class="hljs-number">31</span>bf3856ad364e35~amd64~~<span class="hljs-number">10.0</span>.<span class="hljs-number">18362.1016</span><span class="hljs-selector-class">.mum</span><br>    ├── amd64_microsoft-windows-os-kernel_31bf3856ad364e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>_none_79ea293316ee3bad<span class="hljs-selector-class">.manifest</span><br>    ├── amd64_microsoft<span class="hljs-selector-class">.windows</span><span class="hljs-selector-class">.gdiplus_6595b64144ccf1df_1</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>_none_e013babca5ee7b0b<span class="hljs-selector-class">.manifest</span><br>    ├── msil_microsoft<span class="hljs-selector-class">.hyperv</span><span class="hljs-selector-class">.powershell</span><span class="hljs-selector-class">.cmdlets_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">959</span>_none_a7668eee2055cacf<span class="hljs-selector-class">.manifest</span><br>    ├── wow64_microsoft-windows-<span class="hljs-selector-tag">p</span>.<span class="hljs-selector-class">.ting-spooler-client_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">693</span>_none_f3229700ded2ae02<span class="hljs-selector-class">.manifest</span><br>    ├── amd64_windows-shield-provider_31bf3856ad364e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">900</span>_none_fbf40d7d5ed8b490<span class="hljs-selector-class">.manifest</span><br>    └── x86_microsoft-windows-win32calc<span class="hljs-selector-class">.resources_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">387</span>_ar-sa_38566bf3d86fbe5c.manifest<br></code></pre></td></tr></table></figure><p>正如您在上面看到的，有许多不同的文件格式和文件夹类型：</p><ul><li><p>文件夹类型</p><ul><li><p>平台 - 更新中的所有文件夹都将以其中之一为前缀</p><ul><li><code>amd64</code> - 64-bit x86</li><li><code>x86</code> - 32-bit x86</li><li><code>wow64</code> - Windows (32-bit) On Windows 64-bit</li><li><code>msil</code> - Microsoft Intermediate Language (.NET)</li></ul></li><li><p>差异文件夹</p><ul><li><code>n</code> - Null differentials(无差异)</li><li><code>r</code> - Reverse differentials(向后差异)</li><li><code>f</code> - Forward differentials(向前差异)</li></ul></li></ul></li><li><p>文件类型</p><ul><li><code>manifest</code> -（几乎）1-1 与平台文件夹配对, 这些是 <a href="https://docs.microsoft.com/en-us/windows/win32/sbscs/manifest-files-reference">Windows Side-by-Side (WinSxS) 清单</a></li><li><code>cat</code> - security catalog</li><li><code>mum</code> - 1-1 paired with a .cat file and conatins metadata about the part of the update package that the security catalog applies to(1-1 与 .cat 文件配对，包含有关安全目录适用的更新包部分的元数据)</li></ul></li></ul><p>平台文件夹和清单实际上与 WinSxS 有关，因为系统可能在 <code>C:\Windows\WinSxS</code> 文件夹中存储二进制文件的多个版本以及差异文件。请注意，这些文件夹中不仅仅有 EXE 和 DLL。还有 PNG 和 MUI 文件。任何类型的文件都可以通过 Windows Update 和 WinSxS 进行更新。一些文件夹名称已被截断；看起来最大文件夹名称长度是100个字符，中间多余的字符被替换为<code>..</code></p><p>出于本文的目的，我将保留 .mum 和 .cat 文件，因为它们本质上只是元数据和签名验证信息。</p><h3 id="WinSxS-Manifests"><a href="#WinSxS-Manifests" class="headerlink" title="WinSxS Manifests"></a><strong>WinSxS Manifests</strong></h3><p>补丁中的 <code>.manifest</code> 文件<span class="highlight">描述了如何应用补丁、补丁中包含的文件、文件哈希形式的补丁的预期结果、结果文件的权限、要设置的注册表项以及更多的</span>。它们定义了除了替换正在更新的文件之外对系统产生的影响。</p><p>以下是 <code>Windows-Gaming-XboxLive-Storage-Service-Component</code>（无论是什么）的示例清单。</p><p>▼ amd64_windows-gaming-xbox..e-service-component_31bf3856ad364e35_10.0.18362.836_none_a949879e457dbcd4.manifest</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span> <span class="hljs-attr">manifestVersion</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">copyright</span>=<span class="hljs-string">&quot;Copyright (c) Microsoft Corporation. All Rights Reserved.&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">assemblyIdentity</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Windows-Gaming-XboxLive-Storage-Service-Component&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;10.0.18362.836&quot;</span> <span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">buildType</span>=<span class="hljs-string">&quot;release&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span> <span class="hljs-attr">discoverable</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">resourceType</span>=<span class="hljs-string">&quot;resources&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependentAssembly</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">assemblyIdentity</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Windows-Gaming-XboxLive-Storage-Service-Component.Resources&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;10.0.18362.836&quot;</span> <span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">buildType</span>=<span class="hljs-string">&quot;release&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependentAssembly</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">file</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;XblGameSave.dll&quot;</span> <span class="hljs-attr">destinationPath</span>=<span class="hljs-string">&quot;$(runtime.system32)\&quot;</span> <span class="hljs-attr">sourceName</span>=<span class="hljs-string">&quot;XblGameSave.dll&quot;</span> <span class="hljs-attr">importPath</span>=<span class="hljs-string">&quot;$(build.nttree)\&quot;</span> <span class="hljs-attr">sourcePath</span>=<span class="hljs-string">&quot;.\&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_FILE_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">asmv2:hash</span> <span class="hljs-attr">xmlns:asmv2</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v2&quot;</span> <span class="hljs-attr">xmlns:dsig</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:Transforms</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dsig:Transform</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:HashTransforms.Identity&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dsig:Transforms</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:DigestMethod</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#sha256&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:DigestValue</span>&gt;</span>VjbzeELS2YXIwIhHo5f2hQm+pWTzHY8wo7dFxzfkbtA=<span class="hljs-tag">&lt;/<span class="hljs-name">dsig:DigestValue</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">asmv2:hash</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">file</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;XblGameSaveTask.exe&quot;</span> <span class="hljs-attr">destinationPath</span>=<span class="hljs-string">&quot;$(runtime.system32)\&quot;</span> <span class="hljs-attr">sourceName</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">importPath</span>=<span class="hljs-string">&quot;$(build.nttree)\&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_FILE_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">asmv2:hash</span> <span class="hljs-attr">xmlns:asmv2</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v2&quot;</span> <span class="hljs-attr">xmlns:dsig</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:Transforms</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dsig:Transform</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:HashTransforms.Identity&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dsig:Transforms</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:DigestMethod</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#sha256&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:DigestValue</span>&gt;</span>Ez9Rg7QMg26whoQcakH4i15oeH1NOZgbybxRdPMoi8Q=<span class="hljs-tag">&lt;/<span class="hljs-name">dsig:DigestValue</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">asmv2:hash</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">memberships</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">categoryMembership</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft.Windows.Categories.Services&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;10.0.18362.836&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> <span class="hljs-attr">typeName</span>=<span class="hljs-string">&quot;Service&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">categoryInstance</span> <span class="hljs-attr">subcategory</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">serviceData</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span> <span class="hljs-attr">displayName</span>=<span class="hljs-string">&quot;@%systemroot%\system32\XblGameSave.dll,-100&quot;</span> <span class="hljs-attr">errorControl</span>=<span class="hljs-string">&quot;normal&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;demand&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;win32ShareProcess&quot;</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;@%systemroot%\system32\XblGameSave.dll,-101&quot;</span> <span class="hljs-attr">dependOnService</span>=<span class="hljs-string">&quot;UserManager,XblAuthManager&quot;</span> <span class="hljs-attr">imagePath</span>=<span class="hljs-string">&quot;%SystemRoot%\system32\svchost.exe -k netsvcs -p&quot;</span> <span class="hljs-attr">objectName</span>=<span class="hljs-string">&quot;LocalSystem&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">failureActions</span> <span class="hljs-attr">resetPeriod</span>=<span class="hljs-string">&quot;86400&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;10000&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;restartService&quot;</span> /&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;10000&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;restartService&quot;</span> /&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;10000&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;restartService&quot;</span> /&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">failureActions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">serviceTrigger</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-attr">subtype</span>=<span class="hljs-string">&quot;RPC_INTERFACE_EVENT&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;NetworkEndpointEvent&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">triggerData</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;F6C98708-C7B8-4919-887C-2CE66E78B9A0&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">serviceTrigger</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">serviceData</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">categoryInstance</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">categoryMembership</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">categoryMembership</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft.Windows.Categories&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0.0&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;365143bb27e7ac8b&quot;</span> <span class="hljs-attr">typeName</span>=<span class="hljs-string">&quot;BootRecovery&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">categoryMembership</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">categoryMembership</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft.Windows.Categories&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0.0&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;365143bb27e7ac8b&quot;</span> <span class="hljs-attr">typeName</span>=<span class="hljs-string">&quot;SvcHost&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">categoryInstance</span> <span class="hljs-attr">subcategory</span>=<span class="hljs-string">&quot;netsvcs&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">serviceGroup</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;last&quot;</span> <span class="hljs-attr">serviceName</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">categoryInstance</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">categoryMembership</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">memberships</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">taskScheduler</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Task</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/windows/2004/02/mit/task&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">RegistrationInfo</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span>Microsoft<span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Description</span>&gt;</span>XblGameSave Standby Task<span class="hljs-tag">&lt;/<span class="hljs-name">Description</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">URI</span>&gt;</span>\Microsoft\XblGameSave\XblGameSaveTask<span class="hljs-tag">&lt;/<span class="hljs-name">URI</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">RegistrationInfo</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Principals</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Principal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;LocalSystem&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">UserId</span>&gt;</span>S-1-5-18<span class="hljs-tag">&lt;/<span class="hljs-name">UserId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Principal</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Principals</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Triggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">IdleTrigger</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;XblGameSave Check on CS Entry&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">Enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">IdleTrigger</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Triggers</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MultipleInstancesPolicy</span>&gt;</span>IgnoreNew<span class="hljs-tag">&lt;/<span class="hljs-name">MultipleInstancesPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DisallowStartIfOnBatteries</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">DisallowStartIfOnBatteries</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">StopIfGoingOnBatteries</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">StopIfGoingOnBatteries</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">AllowHardTerminate</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">AllowHardTerminate</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">StartWhenAvailable</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">StartWhenAvailable</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RunOnlyIfNetworkAvailable</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">RunOnlyIfNetworkAvailable</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">AllowStartOnDemand</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">AllowStartOnDemand</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Hidden</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">Hidden</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RunOnlyIfIdle</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">RunOnlyIfIdle</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">WakeToRun</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">WakeToRun</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ExecutionTimeLimit</span>&gt;</span>PT2H<span class="hljs-tag">&lt;/<span class="hljs-name">ExecutionTimeLimit</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Priority</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">Priority</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Settings</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Actions</span> <span class="hljs-attr">Context</span>=<span class="hljs-string">&quot;LocalSystem&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Exec</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Command</span>&gt;</span>%windir%\System32\XblGameSaveTask.exe<span class="hljs-tag">&lt;/<span class="hljs-name">Command</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Arguments</span>&gt;</span>standby<span class="hljs-tag">&lt;/<span class="hljs-name">Arguments</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Exec</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Actions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Task</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">taskScheduler</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">registryKeys</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Ubpm&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CriticalTask_XblGameSaveTask&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;NT TASK\Microsoft\XblGameSave\XblGameSaveTask&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CriticalTask_XblGameSaveTaskLogon&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;NT TASK\Microsoft\XblGameSave\XblGameSaveTaskLogon&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_CLASSES_ROOT\AppId\&#123;C5D3C0E1-DC41-4F83-8BA8-CC0D46BCCDE3&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Xbox Live Game Saves&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LocalService&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AccessPermission&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_BINARY&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;010014806400000070000000140000003000000002001c000100000011001400040000000101000000000010001000000200340002000000000018001f000000010200000000000f0200000001000000000014001f00000001010000000000010000000001010000000000050a00000001020000000000052000000021020000&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LaunchPermission&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_BINARY&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;010014806400000070000000140000003000000002001c000100000011001400040000000101000000000010001000000200340002000000000018001f000000010200000000000f0200000001000000000014001f00000001010000000000010000000001010000000000050a00000001020000000000052000000021020000&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\XblGameSave\Parameters&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ServiceDll&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_EXPAND_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%SystemRoot%\System32\XblGameSave.dll&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ServiceDllUnloadOnStop&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_DWORD&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0x00000001&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ServiceIdleTimeout&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_DWORD&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0x00000258&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_CLASSES_ROOT\CLSID\&#123;F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4&#125;\&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppId&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;C5D3C0E1-DC41-4F83-8BA8-CC0D46BCCDE3&#125;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsRuntime\AllowedCOMCLSIDs\&#123;F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4&#125;\&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_CLASSES_ROOT\CLSID\&#123;5B3E6773-3A99-4A3D-8096-7765DD11785C&#125;\&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppId&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;C5D3C0E1-DC41-4F83-8BA8-CC0D46BCCDE3&#125;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsRuntime\AllowedCOMCLSIDs\&#123;5B3E6773-3A99-4A3D-8096-7765DD11785C&#125;\&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">registryKeys</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localization</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span> <span class="hljs-attr">culture</span>=<span class="hljs-string">&quot;en-US&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">stringTable</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;displayName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;XblGameSave service&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">stringTable</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">localization</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">trustInfo</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">accessControl</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptorDefinitions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptorDefinition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> <span class="hljs-attr">sddl</span>=<span class="hljs-string">&quot;O:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464G:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464D:P(A;CI;GA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;CI;GR;;;SY)(A;CI;GR;;;BA)(A;CI;GR;;;BU)(A;CI;GR;;;S-1-15-2-1)(A;CI;GR;;;S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681)&quot;</span> <span class="hljs-attr">operationHint</span>=<span class="hljs-string">&quot;replace&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptorDefinition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_FILE_DEFAULT_SDDL&quot;</span> <span class="hljs-attr">sddl</span>=<span class="hljs-string">&quot;O:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464G:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464D:P(A;;FA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;;GRGX;;;BA)(A;;GRGX;;;SY)(A;;GRGX;;;BU)(A;;GRGX;;;S-1-15-2-1)(A;;GRGX;;;S-1-15-2-2)S:(AU;FASA;0x000D0116;;;WD)&quot;</span> <span class="hljs-attr">operationHint</span>=<span class="hljs-string">&quot;replace&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">securityDescriptorDefinitions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">accessControl</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">security</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">trustInfo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意所有不同的字段。有一些字段可以修改注册表项、更改文件权限、要修补的文件及其生成的哈希值、要修改或更改状态的服务、要添加或更改的计划任务等等！</p><p>如果您查看此清单描述的相应平台文件夹，您将找到它所引用的文件，可以是完整文件，也可以是（在本例中）差异文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; <span class="hljs-built_in">ls</span> <span class="hljs-literal">-Recurse</span> amd64_windows<span class="hljs-literal">-gaming-xbox</span>..e<span class="hljs-literal">-service-component_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">836</span>_none_a949879e457dbcd4<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Directory: C:\Users\wumb0\Desktop\patches\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\patch\amd64_windows<span class="hljs-literal">-gaming-xbox</span>..e<span class="hljs-literal">-service-component_31bf3856ad36</span><br>    <span class="hljs-number">4</span>e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">836</span>_none_a949879e457dbcd4<br><br><br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br>d<span class="hljs-literal">-----</span>         <span class="hljs-number">8</span>/<span class="hljs-number">23</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">6</span>:<span class="hljs-number">50</span> PM                f<br>d<span class="hljs-literal">-----</span>         <span class="hljs-number">8</span>/<span class="hljs-number">23</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">6</span>:<span class="hljs-number">50</span> PM                <span class="hljs-built_in">r</span><br><br><br>    Directory: C:\Users\wumb0\Desktop\patches\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\patch\amd64_windows<span class="hljs-literal">-gaming-xbox</span>..e<span class="hljs-literal">-service-component_31bf3856ad36</span><br>    <span class="hljs-number">4</span>e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">836</span>_none_a949879e457dbcd4\f<br><br><br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>          <span class="hljs-number">8</span>/<span class="hljs-number">6</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">5</span>:<span class="hljs-number">10</span> AM          <span class="hljs-number">35111</span> xblgamesave.dll<br><span class="hljs-literal">-a----</span>          <span class="hljs-number">8</span>/<span class="hljs-number">6</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">5</span>:<span class="hljs-number">10</span> AM            <span class="hljs-number">237</span> xblgamesavetask.exe<br><br><br>    Directory: C:\Users\wumb0\Desktop\patches\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\patch\amd64_windows<span class="hljs-literal">-gaming-xbox</span>..e<span class="hljs-literal">-service-component_31bf3856ad36</span><br>    <span class="hljs-number">4</span>e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">836</span>_none_a949879e457dbcd4\r<br><br><br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>          <span class="hljs-number">8</span>/<span class="hljs-number">6</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">5</span>:<span class="hljs-number">10</span> AM          <span class="hljs-number">35200</span> xblgamesave.dll<br><span class="hljs-literal">-a----</span>          <span class="hljs-number">8</span>/<span class="hljs-number">6</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">5</span>:<span class="hljs-number">10</span> AM            <span class="hljs-number">237</span> xblgamesavetask.exe<br></code></pre></td></tr></table></figure><p>注：<code>ls -Recurse</code> 递归显示目录内容</p><h2 id="自动补丁提取"><a href="#自动补丁提取" class="headerlink" title="自动补丁提取"></a><strong>自动补丁提取</strong></h2><p>现在您已经了解了补丁的结构以及如何从中提取文件，现在是时候在混合中引入一些自动化了。Greg Linares (@laughing_mantis) 是 <a href="https://twitter.com/laughing_mantis/status/842100719385698305">Patch Extract</a> 的作者，一个自动提取和组织 Microsoft 补丁的工具。他还创建了一个名为 <a href="https://twitter.com/Laughing_Mantis/status/789346238122426368">Patch Clean</a> 的工具，但我不确定它是否仍然适用于现代补丁，所以使用后果自负！我稍微修改了 PatchExtract 以修复一些 powershell 问题并安静脚本的输出。请注意，它现在在用户输入字符串上使用 <code>IEX</code>，所以要小心:)。</p><p>PatchExtract.ps1:</p><script src="https://gist.github.com/wumb0/306f97dc8376c6f53b9f9865f60b4fb5.js"></script><p>要使用，请指定 <code>PATCH</code> 的路径和结果文件的输出 <code>PATH</code>。 <code>PatchClean</code> 将提取 MSU，找到 <code>PSFX</code> <code>CAB</code>，提取其内容，并将提取的补丁分类到各个文件夹中：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; <span class="hljs-built_in">ls</span> X:\Patches\x64\<span class="hljs-number">1903</span>\<span class="hljs-number">2019</span>\<span class="hljs-number">9</span><br><br><br>    Directory: X:\Patches\x64\<span class="hljs-number">1903</span>\<span class="hljs-number">2019</span>\<span class="hljs-number">9</span><br><br><br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">30</span> PM                JUNK<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">30</span> PM                MSIL<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">32</span> PM                PATCH<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">31</span> PM                WOW64<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">7</span>:<span class="hljs-number">06</span> PM                x64<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">31</span> PM                x86<br><span class="hljs-literal">-a----</span>          <span class="hljs-number">9</span>/<span class="hljs-number">8</span>/<span class="hljs-number">2019</span>  <span class="hljs-number">12</span>:<span class="hljs-number">28</span> PM            <span class="hljs-number">517</span> Windows10.<span class="hljs-number">0</span><span class="hljs-literal">-KB4515384-x64-pkgProperties_PSFX</span>.txt<br></code></pre></td></tr></table></figure><p>MSIL、WOW64、x86 和 x64 文件夹将包含所有不同平台文件夹，并删除其前缀。 PATCH 文件夹将包含补丁 MSU 及其内容，但补丁 PSFX 元数据文本文件除外，该文件保留在顶级文件夹的根目录中。最后，JUNK 文件夹中填充了 .manifest 文件以及我们并不真正关心的 .mum 和 .cat 文件。使用此工具可以加快补丁提取过程！</p><h3 id="处理提取的补丁"><a href="#处理提取的补丁" class="headerlink" title="处理提取的补丁"></a><strong>处理提取的补丁</strong></h3><p>提取补丁时请注意：始终在本地计算机上进行，压缩结果，然后传输到另一台计算机进行存储。未压缩的解压补丁大约为 1.5 GB，压缩的解压补丁大约为 1 GB。这可以快速填满您的磁盘空间！由于每个补丁中有数万个文件，未压缩的目录结构的传输将需要很长时间。如果您需要搜索压缩补丁，您只需使用 unzip -l 列出内容，然后仅提取您需要的文件。</p><h1 id="补丁文件类型"><a href="#补丁文件类型" class="headerlink" title="补丁文件类型"></a><strong>补丁文件类型</strong></h1><h2 id="完整文件"><a href="#完整文件" class="headerlink" title="完整文件"></a><strong>完整文件</strong></h2><p>不含 <code>n</code>、<code>f</code> 或 <code>r</code> 目录的平台文件夹包含要安装的完整文件。修补过程非常简单，只需将该文件夹中的文件复制到相应 <code>.manifest</code> 文件中指定的位置即可。</p><p>您如何获得该文件的另一个副本来进行比较？这可能很困难，但您也许可以查看以前的补丁以获取不同的版本。事实证明，差速器实际上是更方便的情况！</p><h2 id="补丁增量"><a href="#补丁增量" class="headerlink" title="补丁增量"></a><strong>补丁增量</strong></h2><p>当平台文件夹中包含 <code>n</code>、<code>f</code> 或 <code>r</code> 目录时，补丁是一个增量，它要么应用于现有文件 <code>(r/f)</code>，要么应用于空缓冲区以创建新文件 <code>(n)</code>。微软在今年（2020）年初发布了关于差异化的<a href="https://docs.microsoft.com/en-us/windows/deployment/update/psfxwhitepaper">白皮书</a>。</p><h3 id="增量类型"><a href="#增量类型" class="headerlink" title="增量类型"></a><strong>增量类型</strong></h3><p>如前所述，增量分为三种类型：</p><ul><li><p><code>Forward differentials (f)</code> - 将基本二进制文件 (.1) 提升到特定补丁级别</p></li><li><p><code>Reverse differentials (r)</code> - 将应用的补丁恢复为基本二进制文件 (.1)</p></li><li><p><code>Null differentials (n)</code> - 一个全新的文件，刚刚压缩；应用于空缓冲区以获取完整文件</p></li></ul><p>您将始终在补丁内看到 r 和 f 文件夹，因为您需要能够稍后恢复补丁以应用较新的更新。</p><h3 id="Delta-APIs"><a href="#Delta-APIs" class="headerlink" title="Delta APIs"></a><strong>Delta APIs</strong></h3><p>在我开始深入研究 Delta 格式并将其应用于文件之前，值得注意的是 Microsoft 提供了有关 <a href="https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)">Delta Compression API</a> 的开发人员文档（稍微过时，但仍然相关）。实际上有两个完全不同的 API 用于创建和应用补丁增量：<a href="https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)#patchapi">PatchAPI</a> 和 <a href="https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)#msdelta">MSDELTA</a>。在这篇文章中，我将重点关注 MSDELTA API，因为它较新，并且仅在正在发布的新补丁中使用。此外，如果您调用 MSDELTA API 并提供 PatchAPI 修补程序文件，它会识别该文件并通过调用 <code>mspatcha.dll</code> 来应用修补程序。</p><p>MSDELTA API 中的函数包含在 msdelta.dll 内。</p><ul><li><code>CreateDelta(A|W|B)</code> - 从文件 (A|W) 或缓冲区 (B) 创建增量</li><li><code>ApplyDelta(A|W|B)</code> - 将增量从文件应用到文件 (A|W) 或从缓冲区 (B) 应用到缓冲区 (B)</li><li><code>ApplyDeltaProvidedB</code> - 将缓冲区中的增量应用到被调用者分配的提供的缓冲区（无需调用 <code>DeltaFree</code>）</li><li><code>GetDeltaInfo(A|W|B)</code> - 获取有关补丁的元数据并计算增量文件 (A|W) 或缓冲区 (B) 的签名</li><li><code>GetDeltaSignature(A|W|B)</code> - 计算增量文件 (A|W) 或缓冲区 (B) 的签名。</li><li><code>DeltaNormalizeProvidedB</code> - 将增量缓冲区置于标准状态，以便通过 MSDELTA 不支持的算法进行哈希处理</li><li><code>DeltaFree</code> - 释放由 <code>CreateDeltaB</code> 或 <code>ApplyDeltaB</code> 创建的增量缓冲区</li></ul><p>我将使用 <code>ApplyDeltaB</code> 将多个补丁增量文件应用到文件缓冲区，然后使用 <code>DeltaFree</code> 释放生成的缓冲区。更仔细地查看 <code>GetDeltaInfo*</code> 和 <code>DeltaNormalizeProvidedB</code> 都在我的 TODO 列表中，但对于本文的目的来说并不是那么重要。</p><p>MSDELTA API 的其他有趣功能是能够通过文件类型集将增量应用到<a href="https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)#file-type-sets">特定的二进制部分</a>。这些背后还有更多的研究要做！</p><h3 id="Delta-Formats"><a href="#Delta-Formats" class="headerlink" title="Delta Formats"></a><strong>Delta Formats</strong></h3><p>乍一看，您会确信补丁内的增量文件夹中的文件是完整的二进制文件，因为它们的扩展名。第一个线索是它们的大小，因为它们比您预期的完整二进制文件要小得多。另一个是文件格式完全不同！在十六进制编辑器中打开一些提取的文件很快就会显示这一点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">wumb0 <span class="hljs-keyword">in</span> patches$ xxd 2020-08/patch/amd64_microsoft-windows-os-kernel_31bf3856ad364e35_10.0.18362.1016_none_79ea293316ee3bad/f/ntoskrnl.exe | <span class="hljs-built_in">head</span><br>00000000: e45a 9bd5 5041 3330 6e2b 8720 fa6a d601  .Z..PA30n+. .j..<br>00000010: b05e 10d0 c7c4 0cc4 69bc c401 4021 00b4  .^......i...@!..<br>00000020: ab4f 2159 0f6a 2ab4 7848 f5df d9cd 2fb8  .O!Y.j*.xH..../.<br>00000030: b30b 0400 0000 0a00 0000 0000 0000 9836  ...............6<br>00000040: 86a9 cb02 f05b dddd dddd dddd dddd dddd  .....[..........<br>00000050: dd2d 4dd2 333d d143 3dd4 ddd3 0128 c6c4  .-M.3=.C=....(..<br>00000060: cccc cccc cccc cccc c31c 22c2 cccc 3c2c  ..........<span class="hljs-string">&quot;...&lt;,</span><br><span class="hljs-string">00000070: cccc ccc3 7280 3000 d07f 0700 a8ff 1700  ....r.0.........</span><br><span class="hljs-string">00000080: fc7f 00a0 ff03 80fc 5f00 90ff 0c00 ecfc  ........_.......</span><br><span class="hljs-string">00000090: 8701 60e5 ff19 1100 7cff 5f00 f8ff 0080  ..`.....|._.....</span><br><span class="hljs-string"></span><br><span class="hljs-string">wumb0 in patches$ xxd 2020-08/patch/amd64_microsoft-onecore-reverseforwarders_31bf3856ad364e35_10.0.18362.997_none_f7e8eb88fe7a4f39/r/gdi32.dll | head</span><br><span class="hljs-string">00000000: db07 a73a 5041 3330 f494 3566 d8dd d401  ...:PA30..5f....</span><br><span class="hljs-string">00000010: b05e 10d0 c7c4 0c02 6006 0e00 0a01 5d41  .^......`.....]A</span><br><span class="hljs-string">00000020: 1606 6042 f2b4 03a7 1295 36ee fbe7 2e01  ..`B......6.....</span><br><span class="hljs-string">00000030: 0100 0000 0c00 0000 0000 0000 b0b4 5e9e  ..............^.</span><br><span class="hljs-string">00000040: 0802 402d aaaa aaaa aaaa aaaa aaaa aa0a  ..@-............</span><br><span class="hljs-string">00000050: aaaa 2aa2 0117 dba2 aaaa aaaa aaaa aaaa  ..*.............</span><br><span class="hljs-string">00000060: a2a2 111a c900 f87f 03c0 fd17 00e4 ff00  ................</span><br><span class="hljs-string">00000070: f8ff 00d0 3f00 fa1f 00ff 0fd6 00b3 0340  ....?..........@</span><br><span class="hljs-string">00000080: 20ee ea69 7500 00d8 1069 a703 f54e 5d0f   ..iu....i...N].</span><br><span class="hljs-string">00000090: d301 2557 07ec 681d 9a0f caa7 03b5 c81a  ..%W..h.........</span><br><span class="hljs-string"></span><br><span class="hljs-string">wumb0 in patches$ xxd 2020-08/patch/amd64_microsoft-windows-f..ysafety-refreshtask_31bf3856ad364e35_10.0.18362.997_none_b453df19f80f8d5b/f/wpcmon.png | head</span><br><span class="hljs-string">00000000: 400b 0a1a 5041 3330 008b e980 ac49 d601  @...PA30.....I..</span><br><span class="hljs-string">00000010: b07e 4000 00c3 2709 1c00 1402 c30c 6217  .~@...&#x27;.......b.</span><br><span class="hljs-string">00000020: 48c6 6ce7 51b1 9b27 8855 9a3e 010b b103  H.l.Q..&#x27;.U.&gt;....</span><br><span class="hljs-string">00000030: 003c 12               </span><br></code></pre></td></tr></table></figure><p>这些不是 PE 或 PNG 文件，并且出现了一种清晰的模式！<code>PA30</code> 在每个文件中从偏移量 <code>4</code> 开始，无论类型是什么。但是前四个字节是什么？在我最初尝试使用 delta 时，我感到很沮丧，因为使用 <code>msdelta.dll</code> 中的任何 <code>ApplyDelta*</code> 函数都会导致错误。对文件格式（PA30）的研究最终使我获得了该技术的<a href="https://patents.google.com/patent/US20070260653">专利</a>，如果您想看一下，这很有趣，但没有为我的问题提供答案。在真正的 <a href="https://www.urbandictionary.com/define.php?term=FILDI">FILDI</a> 时刻，我只是切断了前四个字节，因为文件magic通常位于文件的开头（对吗？），令我惊讶的是，增量应用了！太棒了，那 4 个字节是多少？该格式是否记录在任何地方？在思考了我之前遇到的文件中看似无用的字节之后，我想到了一个校验和，特别是我能想到的最常见的 4 字节校验和：<code>CRC32！</code>所以我跳进 <code>ipython</code> 来尝试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> zlib<br><br>In [<span class="hljs-number">2</span>]: data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;2020-08/patch/amd64_microsoft-windows-f..ysafety-refreshtask_31bf3856ad364e35_10.0.18362.997_none_</span><br><span class="hljs-string">   ...: b453df19f80f8d5b/f/wpcmon.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-built_in">hex</span>(zlib.crc32(data[<span class="hljs-number">4</span>:]))<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">&#x27;0x1a0a0b40&#x27;</span><br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>.from_bytes(data[:<span class="hljs-number">4</span>], <span class="hljs-string">&#x27;little&#x27;</span>))<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-string">&#x27;0x1a0a0b40&#x27;</span><br></code></pre></td></tr></table></figure><p>我的怀疑得到了证实！完全是一个幸运的猜测，而且我能找到的任何地方都没有记录它。</p><p>在经历了这个发现之后，我认为这将是一个有趣的 CTF 挑战。所以我为一年一度的 <a href="http://sparsa.rip/">RITSEC CTF</a> 设计了一个 CTF 挑战赛。它应该被称为 <code>patch-tuesday</code>，但我不小心上传了带有该标志的原始 <code>.sys</code> 文件。该挑战最终被称为 patch-2sday，涉及调用 MSDELTA API 在剥离前置的 CRC32 后修补文件。感谢<a href="https://twitter.com/layle_ctf">莱尔</a>和元娜是仅有的两个解决了这个问题的人！您可以在 <a href="https://github.com/ritsec/RITSEC-CTF-2019/tree/master/Misc/patch-tuesday">RITSEC Github</a> 上找到该挑战的解决方案的文章；如果您对此感兴趣，该存储库还包含我用来<a href="https://github.com/ritsec/RITSEC-CTF-2019/blob/master/Misc/patch-tuesday/make_delta.py">创建增量的脚本</a>。</p><h3 id="从-Delta-中生成有用的二进制文件"><a href="#从-Delta-中生成有用的二进制文件" class="headerlink" title="从 Delta 中生成有用的二进制文件"></a><strong>从 Delta 中生成有用的二进制文件</strong></h3><p>假设我有一台 Windows 10 1903 x64 计算机，我想查看 2020 年 <a href="https://support.microsoft.com/en-us/help/4565483">7</a> 月至 <a href="https://support.microsoft.com/en-us/help/4565351_">8</a> 月 ntoskrnl.exe 之间的差异。该机器当前安装了 <a href="https://support.microsoft.com/en-us/help/4524147/windows-10-update-kb4524147_">2019 年 10 月</a>的补丁。我将从 <code>C:\windows\system32</code> 中复制 ntoskrnl.exe 二进制文件，并使用 MSDELTA API 将增量应用于二进制文件以获得我想要的版本。</p><h4 id="后退，然后前进"><a href="#后退，然后前进" class="headerlink" title="后退，然后前进"></a><strong>后退，然后前进</strong></h4><p>我拥有的内核二进制文件的版本是 10.0.18362.388。在开始修补之前，我需要此特定版本的反向差分将其回滚到版本 10.0.18362.1。我可以下载并提取 2019 年 10 月更新，但这需要很长时间。回想一下，安装补丁后，Windows Update 会将二进制文件和差异文件放置在 <code>C:\Windows\WinSxS</code> 目录中。您可以运行一些 powershell 来查找系统上已有的增量：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; <span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-Recurse</span> C:\windows\WinSxS\ | ? &#123;<span class="hljs-variable">$_</span>.Name <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;ntoskrnl.exe&quot;</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs powershell"> Directory:<br>    C:\windows\WinSxS\amd64_microsoft<span class="hljs-literal">-windows-os-kernel_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">388</span>_none_c1e023dc45da9936<br><br>Mode                LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a---l</span>        <span class="hljs-number">10</span>/<span class="hljs-number">4</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">06</span> AM        <span class="hljs-number">9928720</span> ntoskrnl.exe<br><br><br>    Directory:<br>    C:\windows\WinSxS\amd64_microsoft<span class="hljs-literal">-windows-os-kernel_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">388</span>_none_c1e023dc45da9936\f<br><br><br>Mode                LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>        <span class="hljs-number">9</span>/<span class="hljs-number">30</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">39</span> PM         <span class="hljs-number">479646</span> ntoskrnl.exe<br><br><br>    Directory:<br>    C:\windows\WinSxS\amd64_microsoft<span class="hljs-literal">-windows-os-kernel_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">388</span>_none_c1e023dc45da9936\r<br><br><br>Mode                LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>        <span class="hljs-number">9</span>/<span class="hljs-number">30</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">39</span> PM         <span class="hljs-number">476929</span> ntoskrnl.exe<br></code></pre></td></tr></table></figure><p>完整版本以及前进和后退差速器都存在。现在我拥有执行增量所需的所有文件并获取我想要比较的两个版本的内核！</p><h4 id="使用-MSDELTA-API-应用补丁增量"><a href="#使用-MSDELTA-API-应用补丁增量" class="headerlink" title="使用 MSDELTA API 应用补丁增量"></a><strong>使用 MSDELTA API 应用补丁增量</strong></h4><p>我决定编写一个 python 程序来与 <code>msdelta.dll</code> 交互并调用 <code>ApplyDelta</code> 系列函数。如果您以前从未使用过 python <code>ctypes</code>，那么该脚本一开始可能看起来有点奇怪，但我保证它是您实用工具带中的一个非常强大的工具。除此之外，ctypes 可以充当 C 的<a href="https://en.wikipedia.org/wiki/Foreign_function_interface">外部函数</a>接口；它允许您调用 DLL 内部的函数、创建结构和联合、原始缓冲区，并实现了许多基本类型，例如 <code>c_uint64</code>、<code>c_char_p</code>,以及 Windows 类型，例如 <code>DWORD</code>、<code>HANDLE</code> 和 <code>LPVOID</code>。</p><p>如果您对 ctypes 的更多用途感兴趣，请查看我关于<a href="https://wumb0.in/a-better-way-to-work-with-raw-data-types-in-python.html">有效使用 ctypes 结构的文章</a>，但请记住它是为 python 2.7 编写的，并且可能需要更改示例以支持 python 3。</p><p>下面是为 python 3 编写的最终补丁增量应用脚本（单击文件名展开）。它使用所有 python 内置函数，您需要在 Windows 系统上运行它，因为它导入 <code>msdelta.dll</code> 并使用 <code>ApplyDeltaB</code> 来应用补丁。它甚至支持旧版 PatchAPI 补丁 (<code>PA19</code>)。</p><p><a href="https://gist.github.com/wumb0/9542469e3915953f7ae02d63998d2553#file-delta_patch-py">delta_patch.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> (windll, wintypes, c_uint64, cast, POINTER, <span class="hljs-type">Union</span>, c_ubyte,<br>                    LittleEndianStructure, byref, c_size_t)<br><span class="hljs-keyword">import</span> zlib<br><br><br><span class="hljs-comment"># types and flags</span><br>DELTA_FLAG_TYPE             = c_uint64<br>DELTA_FLAG_NONE             = <span class="hljs-number">0x00000000</span><br>DELTA_APPLY_FLAG_ALLOW_PA19 = <span class="hljs-number">0x00000001</span><br><br><br><span class="hljs-comment"># structures</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DELTA_INPUT</span>(<span class="hljs-title class_ inherited__">LittleEndianStructure</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">U1</span>(<span class="hljs-title class_ inherited__">Union</span>):<br>        _fields_ = [(<span class="hljs-string">&#x27;lpcStart&#x27;</span>, wintypes.LPVOID),<br>                    (<span class="hljs-string">&#x27;lpStart&#x27;</span>, wintypes.LPVOID)]<br>    _anonymous_ = (<span class="hljs-string">&#x27;u1&#x27;</span>,)<br>    _fields_ = [(<span class="hljs-string">&#x27;u1&#x27;</span>, U1),<br>                (<span class="hljs-string">&#x27;uSize&#x27;</span>, c_size_t),<br>                (<span class="hljs-string">&#x27;Editable&#x27;</span>, wintypes.BOOL)]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DELTA_OUTPUT</span>(<span class="hljs-title class_ inherited__">LittleEndianStructure</span>):<br>    _fields_ = [(<span class="hljs-string">&#x27;lpStart&#x27;</span>, wintypes.LPVOID),<br>                (<span class="hljs-string">&#x27;uSize&#x27;</span>, c_size_t)]<br><br><br><span class="hljs-comment"># functions</span><br>ApplyDeltaB = windll.msdelta.ApplyDeltaB<br>ApplyDeltaB.argtypes = [DELTA_FLAG_TYPE, DELTA_INPUT, DELTA_INPUT,<br>                        POINTER(DELTA_OUTPUT)]<br>ApplyDeltaB.rettype = wintypes.BOOL<br>DeltaFree = windll.msdelta.DeltaFree<br>DeltaFree.argtypes = [wintypes.LPVOID]<br>DeltaFree.rettype = wintypes.BOOL<br>gle = windll.kernel32.GetLastError<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_patchfile_to_buffer</span>(<span class="hljs-params">buf, buflen, patchpath, legacy</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(patchpath, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> patch:<br>        patch_contents = patch.read()<br><br>    <span class="hljs-comment"># most (all?) patches (Windows Update MSU) come with a CRC32 prepended to the file</span><br>    <span class="hljs-comment"># we don&#x27;t really care if it is valid or not, we just need to remove it if it is there</span><br>    <span class="hljs-comment"># we only need to calculate if the file starts with PA30 or PA19 and then has PA30 or PA19 after it</span><br>    magic = [<span class="hljs-string">b&quot;PA30&quot;</span>]<br>    <span class="hljs-keyword">if</span> legacy:<br>        magic.append(<span class="hljs-string">b&quot;PA19&quot;</span>)<br>    <span class="hljs-keyword">if</span> patch_contents[:<span class="hljs-number">4</span>] <span class="hljs-keyword">in</span> magic <span class="hljs-keyword">and</span> patch_contents[<span class="hljs-number">4</span>:][:<span class="hljs-number">4</span>] <span class="hljs-keyword">in</span> magic:<br>        <span class="hljs-comment"># we have to validate and strip the crc instead of just stripping it</span><br>        crc = <span class="hljs-built_in">int</span>.from_bytes(patch_contents[:<span class="hljs-number">4</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>        <span class="hljs-keyword">if</span> zlib.crc32(patch_contents[<span class="hljs-number">4</span>:]) == crc:<br>            <span class="hljs-comment"># crc is valid, strip it, else don&#x27;t</span><br>            patch_contents = patch_contents[<span class="hljs-number">4</span>:]<br>    <span class="hljs-keyword">elif</span> patch_contents[<span class="hljs-number">4</span>:][:<span class="hljs-number">4</span>] <span class="hljs-keyword">in</span> magic:<br>        <span class="hljs-comment"># validate the header strip the CRC, we don&#x27;t care about it</span><br>        patch_contents = patch_contents[<span class="hljs-number">4</span>:]<br>    <span class="hljs-comment"># check if there is just no CRC at all</span><br>    <span class="hljs-keyword">elif</span> patch_contents[:<span class="hljs-number">4</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> magic:<br>        <span class="hljs-comment"># this just isn&#x27;t valid</span><br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Patch file is invalid&quot;</span>)<br> <br>    applyflags = DELTA_APPLY_FLAG_ALLOW_PA19 <span class="hljs-keyword">if</span> legacy <span class="hljs-keyword">else</span> DELTA_FLAG_NONE<br><br>    dd = DELTA_INPUT()<br>    ds = DELTA_INPUT()<br>    dout = DELTA_OUTPUT()<br><br>    ds.lpcStart = buf<br>    ds.uSize = buflen<br>    ds.Editable = <span class="hljs-literal">False</span><br><br>    dd.lpcStart = cast(patch_contents, wintypes.LPVOID)<br>    dd.uSize = <span class="hljs-built_in">len</span>(patch_contents)<br>    dd.Editable = <span class="hljs-literal">False</span><br><br>    status = ApplyDeltaB(applyflags, ds, dd, byref(dout))<br>    <span class="hljs-keyword">if</span> status == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Patch &#123;&#125; failed with error &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(patchpath, gle()))<br><br>    <span class="hljs-keyword">return</span> (dout.lpStart, dout.uSize)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> sys<br>    <span class="hljs-keyword">import</span> base64<br>    <span class="hljs-keyword">import</span> hashlib<br>    <span class="hljs-keyword">import</span> argparse<br><br>    ap = argparse.ArgumentParser()<br>    mode = ap.add_mutually_exclusive_group(required=<span class="hljs-literal">True</span>)<br>    output = ap.add_mutually_exclusive_group(required=<span class="hljs-literal">True</span>)<br>    mode.add_argument(<span class="hljs-string">&quot;-i&quot;</span>, <span class="hljs-string">&quot;--input-file&quot;</span>,<br>                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;File to patch (forward or reverse)&quot;</span>)<br>    mode.add_argument(<span class="hljs-string">&quot;-n&quot;</span>, <span class="hljs-string">&quot;--null&quot;</span>, action=<span class="hljs-string">&quot;store_true&quot;</span>, default=<span class="hljs-literal">False</span>,<br>                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Create the output file from a null diff &quot;</span><br>                           <span class="hljs-string">&quot;(null diff must be the first one specified)&quot;</span>)<br>    output.add_argument(<span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;--output-file&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Destination to write patched file to&quot;</span>)<br>    output.add_argument(<span class="hljs-string">&quot;-d&quot;</span>, <span class="hljs-string">&quot;--dry-run&quot;</span>, action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Don&#x27;t write patch, just see if it would patch&quot;</span><br>                             <span class="hljs-string">&quot;correctly and get the resulting hash&quot;</span>)<br>    ap.add_argument(<span class="hljs-string">&quot;-l&quot;</span>, <span class="hljs-string">&quot;--legacy&quot;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, default=<span class="hljs-literal">False</span>,<br>                    <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Let the API use the PA19 legacy API (if required)&quot;</span>)<br>    ap.add_argument(<span class="hljs-string">&quot;patches&quot;</span>, nargs=<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Patches to apply&quot;</span>)<br>    args = ap.parse_args()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args.dry_run <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> args.output_file:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Either specify -d or -o&quot;</span>, file=sys.stderr)<br>        ap.print_help()<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> args.null:<br>        inbuf = <span class="hljs-string">b&quot;&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.input_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> r:<br>            inbuf = r.read()<br><br>    buf = cast(inbuf, wintypes.LPVOID)<br>    n = <span class="hljs-built_in">len</span>(inbuf)<br>    to_free = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> patch <span class="hljs-keyword">in</span> args.patches:<br>            buf, n = apply_patchfile_to_buffer(buf, n, patch, args.legacy)<br>            to_free.append(buf)<br><br>        outbuf = <span class="hljs-built_in">bytes</span>((c_ubyte*n).from_address(buf))<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args.dry_run:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.output_file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> w:<br>                w.write(outbuf)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">for</span> buf <span class="hljs-keyword">in</span> to_free:<br>            DeltaFree(buf)<br><br>    finalhash = hashlib.sha256(outbuf)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Applied &#123;&#125; patch&#123;&#125; successfully&quot;</span><br>          .<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(args.patches), <span class="hljs-string">&quot;es&quot;</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args.patches) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Final hash: &#123;&#125;&quot;</span><br>          .<span class="hljs-built_in">format</span>(base64.b64encode(finalhash.digest()).decode()))<br></code></pre></td></tr></table></figure><p>这是该程序的用法的打印输出，因此您可以了解它提供的功能以及如何使用它。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; python X:\Patches\tools\delta_patch.py <span class="hljs-literal">-h</span><br>usage: delta_patch.py [-<span class="hljs-type">h</span>] (<span class="hljs-literal">-i</span> INPUT_FILE | <span class="hljs-literal">-n</span>) (<span class="hljs-literal">-o</span> OUTPUT_FILE | <span class="hljs-literal">-d</span>) [-<span class="hljs-type">l</span>] patches [<span class="hljs-type">patches</span> <span class="hljs-type">...</span>]<br><br>positional arguments:<br>  patches               Patches to apply<br><br>optional arguments:<br>  <span class="hljs-literal">-h</span>, <span class="hljs-literal">--help</span>            show this help message and <span class="hljs-keyword">exit</span><br>  <span class="hljs-literal">-i</span> INPUT_FILE, <span class="hljs-literal">--input-file</span> INPUT_FILE<br>                        File to patch (forward or reverse)<br>  <span class="hljs-literal">-n</span>, <span class="hljs-literal">--null</span>            Create the output file from a null <span class="hljs-built_in">diff</span> (null <span class="hljs-built_in">diff</span> must be the first one specified)<br>  <span class="hljs-literal">-o</span> OUTPUT_FILE, <span class="hljs-literal">--output-file</span> OUTPUT_FILE<br>                        Destination to <span class="hljs-built_in">write</span> patched file to<br>  <span class="hljs-literal">-d</span>, <span class="hljs-literal">--dry-run</span>         Don<span class="hljs-string">&#x27;t write patch, just see if it would patchcorrectly and get the resulting hash</span><br><span class="hljs-string">  -l, --legacy          Let the API use the PA19 legacy API (if required)</span><br></code></pre></td></tr></table></figure><p>为了生成我想要的二进制文件，我将应用反向增量，然后应用每个正向增量，创建两个输出文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; python X:\Patches\tools\delta_patch.py <span class="hljs-literal">-i</span> ntoskrnl.exe <span class="hljs-literal">-o</span> ntoskrnl.<span class="hljs-number">2020</span><span class="hljs-literal">-07</span>.exe .\r\ntoskrnl.exe X:\Patches\x64\<span class="hljs-number">1903</span>\<span class="hljs-number">2020</span>\<span class="hljs-number">2020</span><span class="hljs-literal">-07</span>\x64\os<span class="hljs-literal">-kernel_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">959</span>\f\ntoskrnl.exe<br><br>Applied <span class="hljs-number">2</span> patches successfully<br>Final hash: zZC/JZ+y5ZLrqTvhRVNf1/<span class="hljs-number">79</span>C4ZYwXgmZ+DZBMoq8ek=<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; python X:\Patches\tools\delta_patch.py <span class="hljs-literal">-i</span> ntoskrnl.exe <span class="hljs-literal">-o</span> ntoskrnl.<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>.exe .\r\ntoskrnl.exe X:\Patches\x64\<span class="hljs-number">1903</span>\<span class="hljs-number">2020</span>\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\x64\os<span class="hljs-literal">-kernel_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>\f\ntoskrnl.exe<br><br>Applied <span class="hljs-number">2</span> patches successfully<br>Final hash: UZw7bE231NL2R0S4yBNT1nmDW8PQ83u9rjp91AiCrUQ=<br></code></pre></td></tr></table></figure><p>补丁已成功应用，现在我有两个完整的二进制文件，一个来自 2020 年 8 月的补丁集，另一个来自 2020 年 7 月。生成的哈希值应与相应清单文件中的哈希值匹配！</p><h4 id="空差异怎么样？"><a href="#空差异怎么样？" class="headerlink" title="空差异怎么样？"></a><strong>空差异怎么样？</strong></h4><p>在继续比较两个内核版本之前，我想解释如何使用 delta_patch 工具从 null (n) 差异中生成完整文件。有一个内置选项！使用 <code>-n</code> 标志并指定输出文件（但没有输入文件），并且 delta_patch 会将增量应用到空缓冲区。结果是完整的文件！</p><p>例如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; python X:\Patches\tools\delta_patch.py <span class="hljs-literal">-n</span> <span class="hljs-literal">-o</span> vmcomputeagent.exe  <span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\patch\amd64_hyperv<span class="hljs-literal">-compute-guestcomputeservice_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">329</span>_none_e3769ae1a46d95f1\n\vmcomputeagent.exe<br>Applied <span class="hljs-number">1</span> patch successfully<br>Final hash: B5mZQ8i4OU22UQXOaDhLHNtLNhos6exfTHlsPzTmXGo=<br><span class="hljs-built_in">PS</span> &gt; wsl <span class="hljs-literal">-e</span> file vmcomputeagent.exe<br>vmcomputeagent.exe: PE32+ executable (GUI) x86<span class="hljs-literal">-64</span>, <span class="hljs-keyword">for</span> MS Windows<br></code></pre></td></tr></table></figure><p>从文件的输出中可以看到，零差异已扩展为完整的可执行文件。当然，您还可以应用前向差分，但只能在空差分之后应用，否则您将没有文件可以修补！</p><h1 id="补丁比较"><a href="#补丁比较" class="headerlink" title="补丁比较"></a><strong>补丁比较</strong></h1><p>有大量关于二进制比较和<a href="https://malware.news/t/comparative-analysis-between-bindiff-and-diaphora-patched-smokeloader-study-case/40996">比较工具</a>的资源<a href="https://googleprojectzero.blogspot.com/2017/10/using-binary-diffing-to-discover.html">1</a>,<a href="https://beistlab.files.wordpress.com/2012/10/isec_2012_beist_slides.pdf">2</a>,<a href="https://wumb0.in/extracting-and-diffing-ms-patches-in-2020.html">3</a>,<a href="https://www.slideshare.net/cisoplatform7/bruh-do-you-even-diffdiffing-microsoft-patches-to-find-vulnerabilities">4</a>,<a href="https://apprize.best/security/ethical_1/20.html">5</a>, <a href="http://joxeankoret.com/blog/2015/03/13/diaphora-a-program-diffing-plugin-for-ida-pro/">6</a>,<a href="https://deadlisting.com/files/Sims_Patch_Diff_BSides_Baltimore.pdf">7</a>，因此我不会深入研究如何使用它们，但为了完整起见，我将比较我刚刚创建的两个内核！</p><p>我将在 IDA Pro 7.5 中打开两个版本的 ntoskrnl.exe，接受符号下载提示，然后让自动分析完成。然后，我将关闭两个版本中较新的版本 (2020-08) 并调用 <a href="https://www.zynamics.com/bindiff.html">BinDiff</a> 将新版本（次要版本）与旧版本（主要版本）进行比较。</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/patchdiff-matched-functions.png" alt="There are only a few changed functions between the two versions"></p><p>我将查看 <code>MmDuplicateMemory</code>，因为与内存相关的函数的变化总是引起我的注意！下面是 BinDiff 中组合调用图的概述。绿色块没有变化，黄色块有差异，红色块被补丁删除，灰色块被补丁添加。</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/bindiff-overview.png" alt="Graph overview with BinDiff in combined mode"></p><p>有很多变化，但我想突出显示一个块，特别是靠近函数顶部的块（由红色箭头表示）：</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/bindiff-changed-block.png" alt="Can you spot the important change?"></p><p>看起来未修补的版本中未检查函数 <code>KeWaitForSingleObject</code> 的返回值，并且修补程序添加了一项检查以确保该函数返回值 0 (<code>WAIT_OBJECT_0</code>)。在判断这个bug的严重性方面，需要做更多的工作来调查什么可等待对象被传递给<code>KeWaitForSingleObject（cs：[0x1404681D0]）</code>，是否有任何方法可以让等待可靠地失败，以及该失败会导致什么行为。这是留给读者的练习。</p><h1 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a><strong>Wrap Up</strong></h1><p>感谢您坚持到最后。我希望你学到了一两件事。如果您有疑问、意见、疑虑、投诉或更正，请随时与我联系。我的推特账号是<a href="https://twitter.com/jgeigerm">@jgeigerm</a>。如果脚本损坏，也要联系他们，他们不应该这样做。以后我会尝试发布更多Windows相关内容，敬请期待。我希望有一天能在 <a href="https://www.sans.org/cyber-security-courses/advanced-exploit-development-penetration-testers/">SEC760</a> 见到你！我最近重写了内核开发日，教学非常精彩！</p><p>Tags: <a href="https://wumb0.in/tag/patch-diff/">patch-diff</a>  <a href="https://wumb0.in/tag/vr/">VR</a>  <a href="https://wumb0.in/tag/bindiff/">bindiff</a>  <a href="https://wumb0.in/tag/patch-delta/">patch-delta</a> </p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>栈相关检查</title>
    <link href="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/"/>
    <url>/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Base-Runtime-Checks-x2F-RTC1-…"><a href="#1-Base-Runtime-Checks-x2F-RTC1-…" class="headerlink" title="1. Base Runtime Checks(&#x2F;RTC1 …)"></a>1. Base Runtime Checks(&#x2F;RTC1 …)</h2><p>在vc开发程序的时候，我们在编译代码的时候，可以设置选项：<code>Base Runtime Checks</code> 如下图所示：</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/base-runtime-checks.png" alt="Base Runtime Checks"></p><h3 id="那么什么是基础的运行时检查呢？作用是什么？"><a href="#那么什么是基础的运行时检查呢？作用是什么？" class="headerlink" title="那么什么是基础的运行时检查呢？作用是什么？"></a><b>那么什么是基础的运行时检查呢？作用是什么？</b><br></h3><p>在这个部分，我们可以查看文档 <a href="https://docs.microsoft.com/en-us/cpp/build/reference/rtc-run-time-error-checks?view=msvc-160">&#x2F;RTC （运行时错误检查）</a></p><h3 id="在汇编中，我们能看到什么？"><a href="#在汇编中，我们能看到什么？" class="headerlink" title="在汇编中，我们能看到什么？"></a><b>在汇编中，我们能看到什么？</b></h3><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/RTCfunctions.png" alt="RTC functions"></p><h3 id="去掉RTC检查"><a href="#去掉RTC检查" class="headerlink" title="去掉RTC检查"></a><b>去掉RTC检查</b></h3><p>如下图，在选项中设置 <code>Default</code> 就可以了</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/no-base-runtime-checks.png"></p><p>那么在汇编中，现在的情况是什么呢？</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/ida-no-base-runtime-checks.png"></p><p>我们能看到，已经没有了相关的函数，只有一个初始化和结束的函数</p><h2 id="2-Buffer-Security-Check-x2F-GS"><a href="#2-Buffer-Security-Check-x2F-GS" class="headerlink" title="2. Buffer Security Check(&#x2F;GS)"></a>2. Buffer Security Check(&#x2F;GS)</h2><p>检测一些缓冲区溢出，这些溢出覆盖了函数的返回地址、异常处理程序地址或某些类型的参数。导致缓冲区溢出是黑客用来利用不强制执行缓冲区大小限制的代码的一种技术。</p><h3 id="什么是受保护的？"><a href="#什么是受保护的？" class="headerlink" title="什么是受保护的？"></a><b>什么是受保护的？</b></h3><p>在&#x2F; GS编译器选项保护下列项目：</p><ul><li><p>函数调用的返回地址。</p></li><li><p>函数的异常处理程序的地址。</p></li><li><p>易受攻击的函数参数。</p></li></ul><p>在所有平台上，&#x2F;GS尝试检测缓冲区溢出到返回地址。缓冲区溢出在 x86 和 x64 等平台上更容易被利用，这些平台使用调用约定将函数调用的返回地址存储在堆栈上。</p><p>在 x86 上，如果函数使用异常处理程序，编译器会注入安全 cookie 以保护异常处理程序的地址。在帧展开期间检查 cookie。</p><p>&#x2F;GS保护传递给函数的易受攻击的参数。易受攻击的参数是指针、C++ 引用、包含指针的 C 结构（C++ POD 类型）或 GS 缓冲区。</p><p>在 cookie 和局部变量之前分配了一个易受攻击的参数。缓冲区溢出可以覆盖这些参数。在函数返回和执行安全检查之前，使用这些参数的函数中的代码可能会导致攻击。为了尽量减少这种危险，编译器在函数 prolog 期间制作了易受攻击的参数的副本，并将它们放在任何缓冲区的存储区域之下。</p><p>在以下情况下，编译器不会复制易受攻击的参数：</p><ul><li><p>不包含 GS 缓冲区的函数。</p></li><li><p>未启用优化（&#x2F;O 选项）。</p></li><li><p>具有可变参数列表 (…) 的函数。</p></li><li><p>标有裸体的函数。</p></li><li><p>在第一条语句中包含内联汇编代码的函数。</p></li><li><p>参数仅以在缓冲区溢出时不太可能被利用的方式使用。</p></li></ul><h3 id="什么不受保护？"><a href="#什么不受保护？" class="headerlink" title="什么不受保护？"></a><b>什么不受保护？</b></h3><p>在&#x2F;GS编译器选项并不能防止所有的缓冲区溢出的安全攻击。例如，如果对象中有一个缓冲区和一个 vtable，则缓冲区溢出可能会损坏 vtable。</p><p>即使您使用&#x2F;GS，也要始终尝试编写没有缓冲区溢出的安全代码。</p><p><i>详细的信息可以查看<a href="https://docs.microsoft.com/en-us/cpp/build/reference/gs-buffer-security-check?view=msvc-160">微软官方文档</a></i></p><h3 id="在汇编中我们能看到什么？"><a href="#在汇编中我们能看到什么？" class="headerlink" title="在汇编中我们能看到什么？"></a><b>在汇编中我们能看到什么？</b></h3><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/buffersecuritycheck.png" alt="Buffer Security Check"></p><h2 id="3-Buffer-Security-Check原理"><a href="#3-Buffer-Security-Check原理" class="headerlink" title="3. Buffer Security Check原理"></a>3. Buffer Security Check原理</h2><p>我们在IDA 中查看反编译汇编代码，如下图：</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/asm-buffersercuritycheck.png"></p><p>观看以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">var_4= dword ptr -4<br><br>push    ebp<br>mov     ebp, esp<br>sub     esp, 70h<br>mov     eax, ___security_cookie<br>xor     eax, ebp<br>mov     [ebp+var_4], eax<br></code></pre></td></tr></table></figure><p>其中 <code>___security_cookie</code> 是一个固定值,如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">___security_cookie dd 0BB40E64Eh<br></code></pre></td></tr></table></figure><p>在函数结束位置，我们看到如下汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov     ecx, [ebp+var_4]<br>xor     ecx, ebp        ; cookie<br>call    j_@__security_check_cookie@4 ; __security_check_cookie(x)<br></code></pre></td></tr></table></figure><p>我们查看 <code>__security_check_cookie(x)</code> 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asm">; void __fastcall __security_check_cookie(unsigned int cookie)<br>.text:00411310 @__security_check_cookie@4 proc near    ; CODE XREF: __security_check_cookie(x)j<br>.text:00411310<br>.text:00411310 cookie          = dword ptr -4<br>.text:00411310<br>.text:00411310                 cmp     ecx, ___security_cookie<br>.text:00411316                 jnz     short failure<br>.text:00411318                 rep retn<br>.text:0041131A ; ---------------------------------------------------------------------------<br>.text:0041131A<br>.text:0041131A failure:                                ; CODE XREF: __security_check_cookie(x)+6j<br>.text:0041131A                 jmp     j____report_gsfailure<br>.text:0041131A @__security_check_cookie@4 endp<br></code></pre></td></tr></table></figure><p>我们比较上面的内容发现，如果在使用过程中，变量改变了，那么就出现错误。所以这样就保证了缓存区溢出造成的漏洞。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li>目录projects 下有功能 test_safeSEH 和 testc_bufcheck</li></ol><h2 id="4-x2F-JMC-CheckForDebuggerJustMyCode-4-选项"><a href="#4-x2F-JMC-CheckForDebuggerJustMyCode-4-选项" class="headerlink" title="4. &#x2F;JMC (@__CheckForDebuggerJustMyCode@4) 选项"></a>4. &#x2F;JMC (@__CheckForDebuggerJustMyCode@4) 选项</h2><p>微软官方文档：<a href="https://learn.microsoft.com/en-us/cpp/build/reference/jmc?view=msvc-170">https://learn.microsoft.com/en-us/cpp/build/reference/jmc?view=msvc-170</a></p><p>指定编译器支持 Visual Studio 调试器中的本机 Just My Code 调试。此选项支持允许 Visual Studio 跨过系统、框架、库和其他非用户调用并在调用堆栈窗口中折叠这些调用的用户设置。 &#x2F;JMC 编译器选项从 Visual Studio 2017 版本 15.8 开始可用。</p><p>选项位置：</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/jmc.png"></p><p>启用 &#x2F;JMC 时，编译器会在函数序言中插入对辅助函数 <code>__CheckForDebuggerJustMyCode</code> 的调用。帮助函数提供支持 Visual Studio 调试器 Just My Code 步骤操作的挂钩。</p><p>如果启用了 <code>/JMC</code> 通过反汇编，可以查看如下代码：</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/jmc2.png"></p><p>启用 <code>/JMC</code> 选项后，PDB 文件会使用额外的行号信息进行注释。在 Visual Studio 2019 版本 16.8 之前的版本中，此信息可能会出现在代码覆盖率报告中，出现在第 15732480 (0xF00F00) 行或 16707566 (0xFEEFEE) 行。这些虚构的行号用作区分用户代码和非用户代码的标记。要在没有这些意外行号的情况下在代码覆盖率报告中包含非用户代码，请使用 <code>/JMC-</code> 选项构建您的代码。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>星期二补丁- 星期三利用：24 小时内破解 WinSock (afd.sys) 的 Windows 辅助功能驱动程序</title>
    <link href="/2023/07/04/CVE-2023-21768/"/>
    <url>/2023/07/04/CVE-2023-21768/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://securityintelligence.com/posts/patch-tuesday-exploit-wednesday-pwning-windows-ancillary-function-driver-winsock/">Patch Tuesday -&gt; Exploit Wednesday: Pwning Windows Ancillary Function Driver for WinSock (afd.sys) in 24 Hours</a></p><style>.highlight {    background-color: rgba(23, 200, 150, 0.5);}</style><p>“星期二补丁，星期三利用” 是一句古老的黑客格言，指的是每月安全补丁公开后的第二天，漏洞就被武器化。随着安全性的提高和漏洞缓解措施变得更加复杂，制作武器化漏洞所需的研究和开发量也随之增加。这与内存损坏漏洞尤其相关。</p><p><img src="/2023/07/04/CVE-2023-21768/p0.png"></p><p>然而，随着 Windows 11 内核中添加新功能（以及内存不安全的 C 代码），可能会引入成熟的新攻击面。通过研究这个新引入的代码，我们证明了可以轻易武器化的漏洞仍然经常发生。在这篇博文中，我们分析并利用了 Winsock 的 Windows 辅助功能驱动程序 <code>afd.sys</code> 中的一个漏洞，用于 Windows 11 上的本地权限升级 (LPE)。虽然我们之前都没有使用此内核模块的经验，但我们能够在大约一天内诊断、重现该漏洞并将其武器化。您可以在 [此处] (<a href="https://github.com/xforcered/Windows_LPE_AFD_CVE-2023-21768)%E6%89%BE%E5%88%B0%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81%E3%80%82">https://github.com/xforcered/Windows_LPE_AFD_CVE-2023-21768)找到漏洞利用代码。</a></p><h2 id="补丁差异和根本原因分析"><a href="#补丁差异和根本原因分析" class="headerlink" title="补丁差异和根本原因分析"></a><strong>补丁差异和根本原因分析</strong></h2><p>根据微软安全响应中心（MSRC）发布的CVE-2023-21768的详细信息，该漏洞存在于辅助功能驱动程序（AFD）中，其二进制文件名为 <code>afd.sys</code>。AFD 模块是 <a href="https://en.wikipedia.org/wiki/Winsock">Winsock API</a> 的内核入口点。利用这些信息，我们分析了 2022 年 12 月的驱动程序版本，并将其与 2023 年 1 月新发布的版本进行了比较。这些样本可以从 <a href="https://winbindex.m417z.com/">Winbindex</a> 单独获取，无需从 Microsoft 补丁中提取更改的耗时过程。分析的两个版本如下所示。</p><ul><li>AFD.sys &#x2F; Windows 11 22H2 &#x2F; 10.0.22621.608 (December 2022)</li><li>AFD.sys &#x2F; Windows 11 22H2 &#x2F; 10.0.22621.1105 (January 2023)</li></ul><p><a href="https://ghidra-sre.org/">Ghidra</a> 用于为这两个文件创建二进制导出，以便可以在 <a href="https://www.zynamics.com/bindiff.html">BinDiff</a> 中对它们进行比较。匹配功能的概述如下所示。</p><p><img src="/2023/07/04/CVE-2023-21768/p1.png"></p><center>Figure 2 — Binary comparison of AFD.sys</center><p>似乎只有一个函数发生了变化，<code>afd!AfdNotifyRemoveIoCompletion</code>。这大大加快了我们对漏洞的分析速度。然后我们比较了这两个功能。下面的屏幕截图显示了在 <a href="https://binary.ninja/">Binary Ninja</a> 中查看反编译代码时修补前后代码的变化。</p><p><strong>Pre-patch</strong>, <code>afd.sys version 10.0.22621.608</code>.</p><p><img src="/2023/07/04/CVE-2023-21768/p2.png"></p><center>Figure 3 — afd!AfdNotifyRemoveIoCompletion pre-patch</center><p><strong>Post-patch</strong>, <code>afd.sys version 10.0.22621.1105</code>.</p><p><img src="/2023/07/04/CVE-2023-21768/p3.png"></p><center>Figure 4 — afd!AfdNotifyRemoveIoCompletion post-patch</center><p>上面显示的此更改是对已识别功能的唯一更新。一些快速分析表明，正在根据以下内容执行检查</p><p><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/previousmode">PreviousMode</a> 。 如果 <code>PreviousMode</code> 为 0 （表明调用源自内核），则将值写入由未知结构中的字段指定的指针。另一方面，如果 PreviousMode 不为零，则 <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-probeforwrite">ProbeForWrite</a>函数被调用确保该字段中设置的指针是驻留在用户模式中的有效地址。</p><p>补丁前版本的驱动程序中缺少此检查。由于该函数有一个针对 <code>PreviousMode</code> 的特定 switch 语句，因此假设开发人员打算添加此检查但忘记了（我们有时都缺咖啡☕！）。</p><p>从这次更新中，我们可以推断攻击者可以通过未知结构的 <code>field_0x18</code> 处的受控值到达此代码路径。如果攻击者能够使用内核地址填充此字段，则可以创建任意内核 Write-Where 原语。此时，尚不清楚正在写入什么值，但任何值都可能用于本地权限升级原语。</p><p>函数原型本身包含 <code>PreviousMode</code> 值和指向未知结构的指针，分别作为第一个和第三个参数。</p><p><img src="/2023/07/04/CVE-2023-21768/p4.png"></p><center>Figure 5 — afd!AfdNotifyRemoveIoCompletion function prototype</center><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a><strong>逆向工程</strong></h2><p>我们现在知道漏洞的位置，但不知道如何触发有漏洞的代码路径的执行。在开始进行概念验证 (PoC) 之前，我们将进行一些逆向工程。</p><p>首先，交叉引用易受攻击的函数以了解其使用地点和方式。</p><p><img src="/2023/07/04/CVE-2023-21768/p5.png"></p><p>在 <code>afd!AfdNotifySock</code> 中对易受攻击的函数进行了一次调用。</p><p>我们重复该过程，寻找对 <code>AfdNotifySock</code> 的交叉引用。我们发现没有对该函数的直接调用，但其地址出现在名为 <code>AfdIrpCallDispatch</code> 的函数指针表上方。</p><p><img src="/2023/07/04/CVE-2023-21768/p6.png"></p><center>Figure 7 — afd!AfdIrpCallDispatch</center><p>该表包含 AFD 驱动程序的调度例程。调度例程用于通过调用来处理来自 Win32 应用程序的请求 <a href="https://learn.microsoft.com/en-us/windows/win32/api/ioapiset/nf-ioapiset-deviceiocontrol">DeviceIoControl</a>. 每个函数的控制代码可在 <code>AfdIoctlTable</code> 中找到。</p><p>然而，上面的指针并不像我们预期的那样位于 <code>AfdIrpCallDispatch</code> 表中。从 Steven Vittitoe 的 <a href="https://recon.cx/2015/slides/recon2015-20-steven-vittitoe-Reverse-Engineering-Windows-AFD-sys.pdf">Recon</a> 谈话幻灯片中，我们发现 AFD 实际上有两个调度表。第二个是 <code>AfdImmediateCallDispatch</code> 。通过计算该表的开头与存储 AfdNotifySock 的指针之间的距离，我们可以计算 AfdIoctlTable 的索引，该索引显示该函数的控制代码是 <code>0x12127</code>。</p><p><img src="/2023/07/04/CVE-2023-21768/p7.png"></p><center>Figure 8 — afd!AfdIoctlTable</center><p>值得注意的是，它是表中最后一个输入&#x2F;输出控制（IOCTL）代码，表明 <code>AfdNotifySock</code> 很可能是最近添加到 AFD 驱动程序中的新调度函数。</p><p>此时，我们有几个选择。我们可以在用户空间对相应的 <code>Winsock API</code> 进行逆向工程，以更好地了解底层内核函数是如何调用的，或者对内核代码进行逆向工程并直接调用它。我们实际上并不知道哪个 Winsock 函数对应于 <code>AfdNotifySock</code> ，因此我们选择了后者。</p><p>我们发现 <a href="https://twitter.com/x86matthew">x86matthew</a> 发布的一些<a href="https://www.x86matthew.com/view_post?id=ntsockets">代码</a>通过直接调用 AFD 驱动程序来执行套接字操作，放弃了 Winsock 库。从隐秘的角度来看，这很有趣，但就我们的目的而言，它是一个很好的模板，可以创建 TCP 套接字的句柄以向 AFD 驱动程序发出 IOCTL 请求。从那里，我们能够到达目标函数，正如在内核调试时到达 <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools">WinDbg</a> 中设置的断点所证明的那样。</p><p><img src="/2023/07/04/CVE-2023-21768/p8.png"></p><center>Figure 9 — afd!AfdNotifySock breakpoint</center><p>现在，回顾一下 <code>DeviceIoControl</code> 的函数原型，通过它我们从用户空间调用 AFD 驱动程序。参数之一 lpInBuffer 是用户模式缓冲区。如上一节所述，该漏洞的发生是因为用户能够在未知数据结构中将未经验证的指针传递给驱动程序。该结构是通过 <code>lpInBuffer</code> 参数直接从我们的用户模式应用程序传入的。它作为第四个参数传递到 AfdNotifySock 中，并作为第三个参数传递到 <code>AfdNotifyRemoveIoCompletion</code> 中。</p><p>此时，我们不知道如何填充 <code>lpInBuffer</code> 中的数据（我们将其称为 <code>AFD_NOTIFYSOCK_STRUCT</code> ），以便通过到达 <code>AfdNotifyRemoveIoCompletion</code> 中易受攻击的代码路径所需的检查。我们逆向工程过程的其余部分包括遵循执行流程并检查如何访问易受攻击的代码。</p><p>让我们逐一检查一下。</p><p>我们遇到的第一个检查是在 <code>AfdNotifySock</code> 的开头：</p><p><img src="/2023/07/04/CVE-2023-21768/p9.png"></p><center>Figure 10 — afd!AfdNotifySock size check</center><p>此检查告诉我们 <code>AFD_NOTIFYSOCK_STRUCT</code> 的大小应等于 0x30 字节，否则函数会失败并显示 <code>STATUS_INFO_LENGTH_MISMATCH</code> 。</p><p>下一个检查验证结构中各个字段中的值：</p><p><img src="/2023/07/04/CVE-2023-21768/p10.png"></p><center>Figure 11 — afd!AfdNotifySock structure validation</center><p>当时我们不知道这些字段对应什么，所以我们传入一个 <code>0x30</code> 字节数组，其中填充了 <code>0x41</code> 字节（AAAAAAAAA…）。</p><p>我们遇到的下一个检查是在调用之后 <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-obreferenceobjectbyhandle">ObReferenceObjectByHandle</a>. 该函数将输入结构的第一个字段作为其第一个参数。</p><p><img src="/2023/07/04/CVE-2023-21768/p11.png"></p><center>Figure 12 — afd!AfdNotifySock call nt!ObReferenceObjectByHandle</center><p>该调用必须返回成功才能继续到正确的代码执行路径，这意味着我们必须将有效的句柄传递给 <code>IoCompletionObject</code> 。没有正式记录的方法可以通过 Win32 API 创建该类型的对象。然而，经过一番搜索，我们发现了一个未记录的 NT 函数 <a href="http://undocumented.ntinternals.net/index.html?page=UserMode/Undocumented%20Functions/NT%20Objects/IoCompletion/NtCreateIoCompletion.html">NtCreateIoCompletion</a> 之后，我们到达一个循环，其计数器是结构中的值之一：</p><p><img src="/2023/07/04/CVE-2023-21768/p12.png"></p><center>Figure 13 — afd!AfdNotifySock loop</center><p>该循环检查结构中的一个字段，以验证它包含有效的用户模式指针并将数据复制到其中。每次循环迭代后指针都会递增。我们用有效地址填充了指针，并将计数器设置为 1。从这里，我们最终能够到达存在漏洞的函数 <code>AfdNotifyRemoveIoCompletion</code> 。</p><p><img src="/2023/07/04/CVE-2023-21768/p13.png"></p><center>Figure 14 — afd!AfdNotifyRemoveIoCompletion call</center><p>进入 <code>AfdNotifyRemoveIoCompletion</code> 后，第一个检查是结构中的另一个字段。它必须是非零的。然后将其乘以 0x20，并与结构体中的另一个字段一起作为指针参数传递到 <code>ProbeForWrite</code> 。从这里，我们可以使用有效的用户模式指针 (<code>pData2</code>) 和字段 <code>dwLen = 1</code> 进一步填充结构（以便传递给 <code>ProbeForWrite</code> 的总大小等于 <code>0x20</code> ），并且检查通过。</p><p><img src="/2023/07/04/CVE-2023-21768/p14.png"></p><center>Figure 15 — afd! Afd!AfdNotifyRemoveIoCompletion field check</center><p>最后，在到达目标代码之前要通过的最后一个检查是对 <code>IoRemoveCompletion</code> 的调用，它必须返回 0 (<code>STATUS_SUCCESS</code>)。</p><p>该函数将阻塞，直到：</p><ul><li><p>完成记录可用于 <code>IoCompletionObject</code> 参数</p></li><li><p>超时到期，作为函数的参数传入</p></li></ul><p>我们通过结构控制超时值，但简单地将超时设置为 0 不足以让函数返回成功。为了使该函数无错误地返回，必须至少有一个可用的完成记录。经过一番研究，我们发现了未记录的功能 <a href="http://undocumented.ntinternals.net/index.html?page=UserMode/Undocumented%20Functions/NT%20Objects/IoCompletion/NtSetIoCompletion.html">NtSetIoCompletion</a> 它手动增加 <code>IoCompletionObject</code> 上的 I&#x2F;O 挂起计数器。在我们之前创建的 <code>IoCompletionObject</code> 上调用此函数可确保对 <code>IoRemoveCompletion</code> 的调用返回 <code>STATUS_SUCCESS</code> 。</p><p><img src="/2023/07/04/CVE-2023-21768/p15.png"></p><center>Figure 16 — afd!AfdNotifyRemoveIoCompletion check return nt!IoRemoveIoCompletion</center><h2 id="触发任意写位置"><a href="#触发任意写位置" class="headerlink" title="触发任意写位置"></a><strong>触发任意写位置</strong></h2><p>现在我们可以到达易受攻击的代码，我们可以用任意要写入的地址填充结构中的适当字段。我们写入该地址的值来自一个整数，该整数的指针被传递到对 <code>IoRemoveIoCompletion</code> 的调用中。 <code>IoRemoveIoCompletion</code> 将此整数的值设置为调用 <code>KeRemoveQueueEx</code> 的返回值。</p><p><img src="/2023/07/04/CVE-2023-21768/p16.png"></p><center>Figure 17 — nt!KeRemoveQueueEx return value</center><p><img src="/2023/07/04/CVE-2023-21768/p17.png"></p><center>Figure 18 — nt!KeRemoveQueueEx return use</center><p>在我们的概念验证中，该写入值始终等于 0x1。我们推测 <code>KeRemoveQueueEx</code> 的返回值是从队列中删除的项目数，但没有进一步调查。此时，我们已经有了所需的原语，并继续完成漏洞利用链。我们后来证实了这个猜测是正确的，并且可以通过对 <code>IoCompletionObject</code> 上的 <code>NtSetIoCompletion</code> 进行额外调用来任意增加写入值。</p><h2 id="LPE-with-IORING"><a href="#LPE-with-IORING" class="headerlink" title="LPE with IORING"></a><strong>LPE with IORING</strong></h2><p>由于能够在任意内核地址写入固定值 (0x1)，我们继续将其转换为完整的任意内核读&#x2F;写。由于此漏洞影响最新版本的 Windows 11(<a href="https://learn.microsoft.com/en-us/windows/release-health/windows11-release-information">22H2</a>)，因此我们选择利用 <a href="https://learn.microsoft.com/en-us/windows/win32/api/ioringapi/">Windows I&#x2F;O</a> 环对象损坏来创建我们的原语。<a href="https://twitter.com/yarden_shafir">Yarden Shafir</a> 撰写了许多关于 Windows I&#x2F;O 环的优秀文章，并且还开发并披露了我们在漏洞利用链中利用的<a href="https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/">原语</a>。据我们所知，这是该原语首次被用于公共漏洞利用。<span class="highlight"> 当用户初始化 I&#x2F;O 环时，会创建两个独立的结构，一个在用户空间，一个在内核空间。</span> 这些结构如下所示。</p><p>内核对象映射到 <code>nt!_IORING_OBJECT</code>，如下所示。</p><p><img src="/2023/07/04/CVE-2023-21768/p18.png"></p><center>Figure 19 — nt!_IORING_OBJECT initialization</center><p>请注意，内核对象有两个字段：<code>RegBuffersCount</code> 和 <code>RegBuffers</code>，它们在初始化时被清零。该计数指示有多少 I&#x2F;O 操作可以在 I&#x2F;O 环中排队。另一个参数是指向当前排队操作列表的指针。</p><p>在用户空间端，调用 <a href="https://learn.microsoft.com/en-us/windows/win32/api/ioringapi/nf-ioringapi-createioring">kernelbase!CreateIoRing</a>时，如果成功，您将返回一个 I&#x2F;O 环句柄。该句柄是指向未记录结构 (<code>HIORING</code>) 的指针。我们对这种结构的定义是从 Yarden Shafir 所做的研究中获得的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">HIORING</span> &#123;</span><br>    HANDLE handle;<br>    NT_IORING_INFO Info;<br>    ULONG IoRingKernelAcceptedVersion;<br>    PVOID RegBufferArray;<br>    ULONG BufferArraySize;<br>    PVOID Unknown;<br>    ULONG FileHandlesCount;<br>    ULONG SubQueueHead;<br>    ULONG SubQueueTail;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果某个漏洞（例如本博文中提到的漏洞）允许您更新 <code>RegBuffersCount</code> 和 <code>RegBuffers</code> 字段，则可以使用标准 I&#x2F;O Ring API 来读取和写入内核内存。</p><p>正如我们在上面看到的，我们可以利用该漏洞在我们喜欢的任何内核地址写入 <code>0x1</code>。要设置 I&#x2F;O 环原语，我们只需触发该漏洞两次即可。</p><p><img src="/2023/07/04/CVE-2023-21768/p19.png"></p><center>Figure 20 — nt!_IORING_OBJECT first time triggering the bug</center><p>在第二个触发器中，我们将 <code>RegBuffers</code> 设置为可以在用户空间中分配的地址（例如 <code>0x0000000100000000</code>）。</p><p><img src="/2023/07/04/CVE-2023-21768/p20.png"></p><center>Figure 21 — nt!_IORING_OBJECT second time triggering the bug</center><p><span class="highlight">备注：</span> 需要验证两次的原因就是 <code>RegBuffersCount</code> 和 <code>RegBuffers</code> 分别验证是否能通过带有缺陷的驱动写入。</p><p>剩下的就是通过在用户空间地址 (<code>0x100000000</code>) 写入伪造的 <code>nt!_IOP_MC_BUFFER_ENTRY</code> 结构的指针来对 I&#x2F;O 操作进行排队。条目数应等于 <code>RegBuffersCount</code> 。下图中突出显示了此过程。</p><p><img src="/2023/07/04/CVE-2023-21768/p21.png"></p><center>Figure 22 — Setting up user space for I/O Ring kernel R/W primitive</center><p>下面的屏幕截图显示了这样一个 <code>nt!_IOP_MC_BUFFER_ENTRY</code> 。请注意，操作的目标是内核地址 (<code>0xfffff8052831da20</code>)，并且在本例中操作的大小为 <code>0x8</code> 字节。从结构中无法判断这是读操作还是写操作。操作的方向取决于使用哪个 API 对 I&#x2F;O 请求进行排队。利用 <a href="https://learn.microsoft.com/en-us/windows/win32/api/ioringapi/nf-ioringapi-buildioringreadfile">kernelbase!BuildIoRingReadFile</a> 导致任意内核写入，<code>kernelbase!BuildIoRingWriteFile</code> 导致任意内核读取。</p><p><img src="/2023/07/04/CVE-2023-21768/p22.png"></p><center>Figure 23 — Example faked I/O Ring operation</center><p>为了执行任意写入，I&#x2F;O 操作的任务是从文件句柄读取数据并将该数据写入内核地址。</p><p><img src="/2023/07/04/CVE-2023-21768/p23.png"></p><center>Figure 24 — I/O Ring arbitrary write</center><p>相反，为了执行任意读取，I&#x2F;O 操作的任务是读取内核地址处的数据并将该数据写入文件句柄。</p><p><img src="/2023/07/04/CVE-2023-21768/p24.png"></p><center>Figure 25 – I/O Ring arbitrary read</center><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><strong>Demo</strong></h2><p>设置原语后，剩下的就是使用一些标准内核后利用技术来泄漏系统（PID 4）等提升进程的令牌并覆盖不同进程的令牌。</p><p><a href="https://youtu.be/M3IPsKAsxvQ">Exploiting Windows 11 with Ancillary Function Driver vulnerability CVE-2023-21768</a></p><p><img src="/2023/07/04/CVE-2023-21768/p25.png"></p><h2 id="在野利用"><a href="#在野利用" class="headerlink" title="在野利用"></a><strong>在野利用</strong></h2><p>在我们的漏洞<a href="https://github.com/xforcered/Windows_LPE_AFD_CVE-2023-21768">代码</a>公开后，来自360 Icesword Lab的Xiaoliang Liu（<a href="https://twitter.com/flame36987044">@flame36987044</a>）首次公开披露，他们在今年早些时候发现了利用该漏洞的样本（ITW）。 ITW 样本使用的技术与我们的不同。攻击者使用相应的 Winsock API 函数 <code>ProcessSocketNotifications</code> 触发漏洞，而不是像我们的漏洞利用那样直接调用 afd.sys 驱动程序。</p><p>360冰剑实验室官方声明如下：</p><p>“360冰剑实验室专注于APT检测与防御。基于我们的0day漏洞雷达系统，今年1月份我们在野外发现了CVE-2023-21768的利用样本，该样本与 <a href="https://twitter.com/chompie1337">@chompie1337</a> 和 <a href="https://twitter.com/FuzzySec">@FuzzySec</a> 公布的利用样本不同，它是通过系统机制和漏洞特征进行利用的。该漏洞与 <code>NtSetIoCompletion</code> 和 <code>ProcessSocketNotifications</code> 有关， <code>ProcessSocketNotifications</code> 获取调用 <code>NtSetIoCompletion</code> 的次数，因此我们使用它来更改权限计数。”</p><h2 id="结论和最终反思"><a href="#结论和最终反思" class="headerlink" title="结论和最终反思"></a>结论和最终反思</h2><p>您可能会注意到，在逆向工程的某些部分，我们的分析是肤浅的。有时，仅观察一些相关的状态变化并将程序的某些部分视为黑匣子是有帮助的，以避免陷入不相关的兔子洞。这使我们能够快速扭转漏洞，尽管最大化完成速度不是我们的目标。此外，我们对 afd.sys 中所有报告的漏洞进行了补丁差异审查，这些漏洞被标记为“利用可能性更大”。我们的审查显示，除了两个漏洞之外，所有漏洞都是由于对从用户模式传入的指针验证不当造成的。这表明，了解过去的漏洞（尤其是特定目标内的漏洞）的历史知识，对于发现新漏洞可能会卓有成效。当代码库扩展时，同样的错误很可能会重复。请记住，新的 C 代码 &#x3D;&#x3D; 新的 bug 😀。正如发现上述漏洞在野外被利用所证明的那样，可以肯定地说，攻击者也在密切监视新的代码库添加。</p><p>Windows 内核中缺乏对管理员模式访问保护 (SMAP) 的支持，这给我们提供了丰富的选项来构建新的纯数据利用原语。这些原语在支持 SMAP 的其他操作系统中不可行。例如，考虑 CVE-2021-41073，这是 Linux 的 I&#x2F;O 环预注册缓冲区实现中的一个漏洞（我们在 Windows 中滥用相同的功能用于 R&#x2F;W 原语）。此漏洞可以允许覆盖已注册缓冲区的内核指针，但不能用于构造任意 R&#x2F;W 原语，因为如果该指针被替换为用户指针，并且内核尝试在那里读取或写入，系统将崩溃。</p><p>尽管微软尽了最大努力来消除人们喜爱的<a href="https://twitter.com/33y0re/status/1597640404748599296">漏洞利用原语</a>，但肯定会发现新的原语来取代它们。我们能够利用最新版本的 Windows 11 22H2，而不会遇到 <a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/bringup/device-guard-and-credential-guard">HVCI(内存完整性和基于虚拟化的安全性)</a> 等基于虚拟化的安全功能的任何缓解或限制。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2023-21768">MSRC (CVE-2023-21768)</a></li><li><a href="https://windows-internals.com/i-o-rings-when-one-i-o-operation-is-not-enough/">I&#x2F;O Rings – When One I&#x2F;O Operation is Not Enough  (@yarden_shafir)</a></li><li><a href="https://windows-internals.com/ioring-vs-io_uring-a-comparison-of-windows-and-linux-implementations/">IoRing vs. io_uring: a comparison of Windows and Linux implementations  (@yarden_shafir)</a></li><li><a href="https://windows-internals.com/one-year-to-i-o-ring-what-changed/">One Year to I&#x2F;O Ring: What Changed? (@yarden_shafir)</a></li><li><a href="https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/">One I&#x2F;O Ring to Rule Them All: A Full Read&#x2F;Write Exploit Primitive on Windows 11 (@yarden_shafir)</a></li><li><a href="https://knifecoat.com/Posts/Arbitrary+Kernel+RW+using+IORING's">Arbitrary Kernel RW using IORING’s (@FuzzySec)</a></li><li><a href="https://www.x86matthew.com/view_post?id=ntsockets">NTSockets – Downloading a file via HTTP using the NtCreateFile and NtDeviceIoControlFile syscalls (@x86matthew)</a></li><li><a href="https://recon.cx/2015/slides/recon2015-20-steven-vittitoe-Reverse-Engineering-Windows-AFD-sys.pdf">Reverse Engineering AFD.sys (@bool101)</a></li><li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/243235">Microsoft Windows Ancillary Function Driver for WinSock privilege escalation CVE-2023-21768 Vulnerability Report</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
