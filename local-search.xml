<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/17/CVE-2023-38146/"/>
    <url>/2023/09/17/CVE-2023-38146/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><hr><h2 id="title-CVE-2023-38146：通过-Windows-主题执行任意代码excerpt-翻译文章，-关于CVE-2023-38146漏洞的分析date-2023-09-17-23-00-00tags-categories-CVE"><a href="#title-CVE-2023-38146：通过-Windows-主题执行任意代码excerpt-翻译文章，-关于CVE-2023-38146漏洞的分析date-2023-09-17-23-00-00tags-categories-CVE" class="headerlink" title="title: CVE-2023-38146：通过 Windows 主题执行任意代码excerpt: 翻译文章， 关于CVE-2023-38146漏洞的分析date: 2023-09-17 23:00:00tags:categories:- CVE"></a>title: CVE-2023-38146：通过 Windows 主题执行任意代码<br>excerpt: 翻译文章， 关于CVE-2023-38146漏洞的分析<br>date: 2023-09-17 23:00:00<br>tags:<br>categories:<br>- CVE</h2><p>原文: <a href="https://exploits.forsale/themebleed/">CVE-2023-38146: Arbitrary Code Execution via Windows Themes</a></p><p>这是我在研究奇怪的 Windows 文件格式时发现的一个有趣的错误。这是一种经典的 Windows 风格漏洞，具有签名损坏、DLL 加载粗略、文件竞争、cab 文件和 Web 愚蠢标记等特征。这也是我自 2022 年 4 月离开微软以来第一次向 MSRC Windows 漏洞赏金提交。</p><p>按照命名漏洞的伟大传统，我亲切地将这个命名为 ThemeBleed（目前还没有徽标，但我正在接受提交。）</p><p>总的来说，发现并 PoC 这个漏洞非常有趣，MSRC 的响应速度和判断赏金的速度令人难以置信:</p><pre><code class="hljs">以下是我发送给 Microsoft 的报告的稍微修改版本。报告之后是时间表和我的修复说明。</code></pre><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Windows 11 上存在一系列问题，这些问题可能导致用户加载 <code>.theme</code> 文件时执行任意代码。</p><h1 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>在 Windows 上，<code>.theme</code> 文件允许自定义操作系统外观。 <code>.theme</code> 文件本身是 <code>ini</code> 文件，其中包含配置详细信息。单击 Windows 11 上的 <code>.theme</code> 文件将调用以下命令：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-string">&quot;C:\WINDOWS\system32\rundll32.exe&quot;</span> C:\WINDOWS\<span class="hljs-params">system</span>32\themecpl.dll,OpenThemeAction &lt;theme <span class="hljs-keyword">file</span> path&gt;<br></code></pre></td></tr></table></figure><p>此漏洞专门涉及 <code>.msstyles</code> 文件的处理。这些是 PE (DLL) 文件，其中包含主题中使用的图标等资源，但（应该）不包含任何代码。 <code>.msstyles</code> 文件可以通过以下方式在 <code>.theme</code> 文件中引用：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[VisualStyles]</span><br><span class="hljs-attr">Path</span>=%SystemRoot%\resources\Themes\Aero\Aero.msstyles<br></code></pre></td></tr></table></figure><p>打开 <code>.theme</code> 文件时，<code>.msstyles</code> 文件也会被加载。</p><h2 id="2-“999版本”检查"><a href="#2-“999版本”检查" class="headerlink" title="2. “999版本”检查"></a>2. “999版本”检查</h2><p>当加载<code>.msstyles</code>文件时，<code>uxtheme.dll</code>中的 <code>LoadThemeLibrary</code> 将检查主题的版本。它将通过从二进制文件加载名为 <code>PACKTHEM_VERSION</code> 的资源来完成此操作。如果它读取的版本是<code>999</code>，它将调用另一个函数 <code>ReviseVersionIfNecessary</code>。该函数的反编译版本以及相关部分的注释如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">LoadThemeLibrary</span><span class="hljs-params">(<span class="hljs-type">const</span> WCHAR *msstyles_path, HMODULE *out_module, <span class="hljs-type">int</span> *out_version)</span><br>&#123;<br>  HMODULE module_handle;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> result;<br>  <span class="hljs-type">int</span> version;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> return_val;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> resource_size;<br>  __int16 *version_ptr;<br><br>  <span class="hljs-keyword">if</span> ( out_version )<br>    *out_version = <span class="hljs-number">0</span>;<br>  module_handle = LoadLibraryExW(msstyles_path, <span class="hljs-number">0</span>, <span class="hljs-number">2u</span>);<br>  <span class="hljs-keyword">if</span> ( !module_handle )<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)MakeErrorLast();<br>  result = GetPtrToResource(<br>             module_handle,<br>             <span class="hljs-string">L&quot;PACKTHEM_VERSION&quot;</span>,<br>             (<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> __int16 *)<span class="hljs-number">1</span>,<br>             (<span class="hljs-type">void</span> **)&amp;version_ptr,<br>             &amp;resource_size); <span class="hljs-comment">// !!! [1] version number is extracted from resource &quot;PACKTHEM_VERSION&quot;</span><br>  <span class="hljs-keyword">if</span> ( result &lt; <span class="hljs-number">0</span> || resource_size != <span class="hljs-number">2</span> )<br>    <span class="hljs-keyword">goto</span> LABEL_22;<br>  version = *version_ptr;<br>  <span class="hljs-keyword">if</span> ( out_version )<br>    *out_version = version;<br>  return_val = <span class="hljs-number">-2147467259</span>;<br>  <span class="hljs-keyword">if</span> ( version &gt;= <span class="hljs-number">4</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( version &gt; <span class="hljs-number">4</span> )<br>      result = <span class="hljs-number">-2147467259</span>;<br>    return_val = result;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( return_val &lt; <span class="hljs-number">0</span> &amp;&amp; (_WORD)version == <span class="hljs-number">999</span> ) <span class="hljs-comment">// !!! [2] special case for version 999</span><br>  &#123;<br>    resource_size = <span class="hljs-number">999</span>;<br>    return_val = ReviseVersionIfNecessary(msstyles_path, <span class="hljs-number">999</span>, (<span class="hljs-type">int</span> *)&amp;resource_size); <span class="hljs-comment">// !!! [3] call to `ReviseVersionIfNecessary`</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-ReviseVersionIfNecessary-中的检查时间和使用时间允许绕过签名"><a href="#3-ReviseVersionIfNecessary-中的检查时间和使用时间允许绕过签名" class="headerlink" title="3. ReviseVersionIfNecessary 中的检查时间和使用时间允许绕过签名"></a>3. ReviseVersionIfNecessary 中的检查时间和使用时间允许绕过签名</h2><p>上一步调用的 <code>ReviseVersionIfNecessary</code> 函数执行多个操作。给定 <code>.msstyles</code> 文件的路径，它将执行以下操作：</p><ol><li><p>将 <code>_vrf.dll</code> 和 <code>.msstyles</code> 所在文件路径组合成一个新的路径</p></li><li><p>检查这个新的 <code>_vrf.dll</code> 文件是否存在。如果没有，直接退出</p></li><li><p>打开 <code>_vrf.dll</code> 文件</p></li><li><p>验证 <code>_vrf.dll</code> 文件的签名，如果无效，则直接退出</p></li><li><p>关闭 <code>_vrf.dll</code> 文件</p></li><li><p>加载 <code>_vrf.dll</code> 文件，并调用函数 <code>VerifyThemeVersion</code></p></li></ol><p>其目标似乎是尝试安全地加载签名的 DLL 并调用函数。然而，这种实现是有缺陷的，因为 DLL 在步骤 5 中验证签名后关闭，然后在步骤 6 中通过调用 LoadLibrary 加载 DLL 时重新打开。这在这两个步骤之间提供了一个竞争窗口，攻击者可以用未签名的恶意文件替换已验证签名的 <code>_vrf.dll</code> 文件。然后该恶意 DLL 将被加载并执行。</p><h2 id="4-Mark-of-the-Web-MOTW-绕过"><a href="#4-Mark-of-the-Web-MOTW-绕过" class="headerlink" title="4. Mark-of-the-Web(MOTW)绕过"></a>4. Mark-of-the-Web(MOTW)绕过</h2><p>如果用户下载 <code>.theme</code> 文件，则在启动该文件时，由于该文件上存在 Mark-of-the-Web，他们将收到安全警告。事实证明，可以通过将 <code>.theme</code> 文件打包在 <code>.themepack</code> 文件中来绕过这个问题。</p><p><code>.themepack</code> 文件是包含 <code>.theme</code> 文件的 cab 文件。打开 <code>.themepack</code> 文件时，将加载包含的 <code>.theme</code> 文件。当使用 Mark-of-the-Web 打开 <code>.themepack</code> 文件时，不会显示任何警告，因此通常会看到的警告被绕过。</p><h1 id="概念验证"><a href="#概念验证" class="headerlink" title="概念验证"></a>概念验证</h1><p>我针对这个问题开发了一个PoC。 PoC 由两个组件组成：一个在攻击者计算机上运行的 SMB 服务器可执行文件，以及一个在目标计算机上打开的 .theme 文件。</p><p>为此，我选择使用攻击者控制的 SMB 服务器，因为 <code>.theme</code> 文件可能指向远程 SMB 共享上的 <code>.msstyle</code> 路径。由于 SMB 共享是由攻击者控制的，因此当客户端首次请求检查签名时，它可以通过返回有效签名的文件来轻松利用 <code>ReviseVersionIfNecessary</code> 中的 <code>TOCTOU</code> 错误,然后，当客户端加载 DLL 时，就会出现恶意攻击。</p><p>PoC 可以在这里找到：<a href="https://github.com/gabe-k/themebleed">https://github.com/gabe-k/themebleed</a></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>要运行 PoC，您将需要两台机器，一台将运行 SMB 服务器的攻击者机器，以及一台将在其中加载 .theme 文件的目标机器。以下是各机器的要求：</p><p><strong>攻击者机器</strong></p><ul><li>Windows 10 或 11</li><li>禁用 “Server” 服务以释放 SMB 端口（禁用并重新启动，不要只是停止该服务）</li><li>最新的 .Net 框架</li><li>接入到互联网，能直接访问</li></ul><p><strong>目标主机</strong></p><ul><li>最新版本的windows11</li></ul><h1 id="重现步骤"><a href="#重现步骤" class="headerlink" title="重现步骤"></a>重现步骤</h1><ol><li><p>通过运行以下命令创建 <code>.theme</code> 文件：<code>themebleed.exe make_theme &lt;attacker machine ip&gt;exploit.theme</code></p></li><li><p>在攻击者机器上运行：<code>themebleed.exe server</code></p></li><li><p>在目标机器上打开 <code>exploit.theme</code></p></li></ol><p>这应该会导致计算器在目标计算机上打开。这表明任意代码已被执行。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一个可靠的漏洞，从加载主题到下载和执行代码，都不会损坏内存。此外，此漏洞似乎是新漏洞，仅存在于 Windows 11 中。我请求考虑将此提交视为赏金。</p><p>为了修复这个漏洞，我建议：</p><ul><li><p>完全删除“版本 999”功能，但我不完全确定它的预期用途是什么。</p></li><li><p>以 Windows 验证其他代码的标准方式签署和验证 <code>_vrf.dll</code> 二进制文件，而不是容易受到此类竞争条件影响的代码。</p></li><li><p>禁止从主题文件中的远程共享加载资源。</p></li><li><p>将 Web 标记警告添加到 .themepack 文件。</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>A. Details about the Mark-of-the-Web (MOTW) <a href="https://nolongerset.com/mark-of-the-web-details/">https://nolongerset.com/mark-of-the-web-details/</a></p><p>B.  Save Custom Theme in Windows 11 <a href="https://www.elevenforum.com/t/save-custom-theme-in-windows-11.9908/">https://www.elevenforum.com/t/save-custom-theme-in-windows-11.9908/</a></p><p>C. 如何监控获取到双击文件的信息？ 可以通过 <code>ProcExplorer.exe</code> 设置 Path 过滤Contains 你的theme文件名称即可，如下图：</p><p><img src="/2023/09/17/CVE-2023-38146/getDoubleClickThemeFileInfo.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>.Net 反编译与编译</title>
    <link href="/2023/08/17/dotNet%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <url>/2023/08/17/dotNet%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>本文通过 C# 程序举例</p><p>示例代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">test1</span><br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            MessageBox.Show(<span class="hljs-string">&quot;hello,world&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后的程序，我们可以通过 <code>ildasm.exe</code> 进行反编译，如下图：</p><p><img src="/2023/08/17/dotNet%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/ildasm_1.png"></p><p>然后在菜单 <code>File</code>-&gt; <code>Dump</code>， 如下图：</p><p><img src="/2023/08/17/dotNet%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/ildasm_2.png"></p><p>然后就可以得到文件：</p><p><img src="/2023/08/17/dotNet%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/ildasm_3.png"></p><p>然后我们打开： <code>tttt.il</code>, 然后找到字符串 <code>hello,world</code> 修改成：<code>okddddddddd</code>, 如下图：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// =============== CLASS MEMBERS DECLARATION ===================</span><br><br><span class="hljs-selector-class">.class</span> private auto ansi beforefieldinit test2<span class="hljs-selector-class">.Program</span><br>       extends <span class="hljs-selector-attr">[mscorlib]</span>System<span class="hljs-selector-class">.Object</span><br>&#123;<br>  <span class="hljs-selector-class">.method</span> private hidebysig static void  <span class="hljs-built_in">Main</span>(string<span class="hljs-selector-attr">[]</span> args) cil managed<br>  &#123;<br>    <span class="hljs-selector-class">.entrypoint</span><br>    <span class="hljs-comment">// Code size       13 (0xd)</span><br>    <span class="hljs-selector-class">.maxstack</span>  <span class="hljs-number">8</span><br>    IL_0000:  nop<br>    IL_0001:  ldstr      <span class="hljs-string">&quot;okddddddddd&quot;</span><br>    IL_0006:  call       valuetype <span class="hljs-selector-attr">[System.Windows.Forms]</span>System<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Forms</span><span class="hljs-selector-class">.DialogResult</span> <span class="hljs-selector-attr">[System.Windows.Forms]</span>System<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Forms</span><span class="hljs-selector-class">.MessageBox</span>::<span class="hljs-built_in">Show</span>(string)<br>    IL_000b:  pop<br>    IL_000c:  ret<br>  &#125; <span class="hljs-comment">// end of method Program::Main</span><br><br>  <span class="hljs-selector-class">.method</span> public hidebysig specialname rtspecialname <br>          instance void  <span class="hljs-selector-class">.ctor</span>() cil managed<br>  &#123;<br>    <span class="hljs-comment">// Code size       8 (0x8)</span><br>    <span class="hljs-selector-class">.maxstack</span>  <span class="hljs-number">8</span><br>    IL_0000:  ldarg.<span class="hljs-number">0</span><br>    IL_0001:  call       instance void <span class="hljs-selector-attr">[mscorlib]</span>System<span class="hljs-selector-class">.Object</span>::<span class="hljs-selector-class">.ctor</span>()<br>    IL_0006:  nop<br>    IL_0007:  ret<br>  &#125; <span class="hljs-comment">// end of method Program::.ctor</span><br><br>&#125; <span class="hljs-comment">// end of class test2.Program</span><br></code></pre></td></tr></table></figure><p>然后通过 <code>ilasm.exe</code> 把代码编译成程序， 如下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ilasm.<span class="hljs-keyword">exe</span> /resource=tttt.<span class="hljs-keyword">res</span> tttt.<span class="hljs-keyword">il</span><br></code></pre></td></tr></table></figure><p>如下图：</p><p><img src="/2023/08/17/dotNet%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/compile_1.png"></p><p>完成后，得到程序：<code>tttt.exe</code>, 然后运行，我们可以看到：</p><p><img src="/2023/08/17/dotNet%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/run.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PlayStation 开发 - 设置和安装 PSY-Q</title>
    <link href="/2023/08/04/PlayStation%20%E5%BC%80%E5%8F%91%20-%20%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%AE%89%E8%A3%85%20PSY-Q/"/>
    <url>/2023/08/04/PlayStation%20%E5%BC%80%E5%8F%91%20-%20%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%AE%89%E8%A3%85%20PSY-Q/</url>
    
    <content type="html"><![CDATA[<p>翻译文章：<a href="https://www.psxdev.net/help/psyq_install.html">https://www.psxdev.net/help/psyq_install.html</a></p><style>    .highlight {        background-color: rgba(233,223,0, 0.4);    }</style><div align="center"><img src="./psyq_logo.png" height="157px" width="109px"><img src="./snblue2.png" height="157px" width="109px"><br><span class="header2">PSY-Q 由 SN Systems Ltd 和 Psygnosis 打造</span><br><br></div><p>本教程将教您如何为 PlayStation 1（PSX、PS1 &#x2F; PSone）设置和安装 Psy-Q。</p><h2 id="什么是-Psy-Q"><a href="#什么是-Psy-Q" class="headerlink" title="什么是 Psy-Q?"></a>什么是 Psy-Q?</h2><p>Psy-Q 是由 SN Systems Limited 和 Psygnosis 创建的 SDK。SDK 附带手册、文档、光盘、软盘、蓝色并行适配器和用于与 Playstation 1 进行通信链接的 SCSI ISA 接口（黄色）卡。该 SDK 后来被破解并发布到互联网上，许多爱好者在 PlayStation 上创建了自己的游戏和应用程序。它是游戏开发者用来创建游戏的官方索尼 SDK。</p><p>让我们开始吧。首先，您需要点击此处下载 <a href="http://psxdev.net/downloads.html">PSY-Q SDK</a>。</p><p><span class="highlight">请注意</span>，请记住 Psy-Q 只能在 Windows 32 位操作系统上运行。 Psy-Q 根本无法在 Windows 64 位版本下工作，即使您确实设法使其工作，您所需的工具也无法正确运行。</p><p>Psy-Q 最初是为 Windows 3.1 设计的，索尼不断更新它，以便与 Windows 95 和 98 更加兼容。早期开发人员当时使用 Windows 95 来制作 PlayStation 1 游戏，但 Windows 98 或 XP 将是相当于在 Windows NT 和 95 上使用的更新版本。</p><p>如果您因使用 64 位操作系统而感到困惑或困惑，请按照本教程了解如何设置和使用我们预先配置的 Windows XP 磁盘映像以在 Microsoft 的 Virtual PC 中使用。您无需设置 Psy-Q，因为它已经预先配置并准备就绪。</p><p>除此之外，下一步是将 Psy-Q 解压到您的“<code>C:\</code>”目录（根目录）。提取后，结构将为“<code>C:\psyq\...</code>”。</p><p><span class="highlight">注意</span>：如果您不调用目录“psyq”（建议您不要将其从“psyq”更改），那么您将需要编辑 PSPATHS.BAT（如果您使用的是 Windows 9x），替换在下图具有正确的目录名称。如果您使用的是 Windows XP 及更高版本，则需要编辑环境变量（如下所述）。</p><p><img src="/2023/08/04/PlayStation%20%E5%BC%80%E5%8F%91%20-%20%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%AE%89%E8%A3%85%20PSY-Q/PSPATHS.png"></p><p>解压后，您将在“<code>C:\psyq\</code>”下看到：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-number">3</span><span class="hljs-variable">rdParty</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">addons</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">beta</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">bin</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">cdemu</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">cdgen</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">DOCS</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">include</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">kanji</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">lib</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">opm</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">PA</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">psx</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">psxgraph</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">psyq</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">zips</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">PSPATHS</span><span class="hljs-operator">.</span><span class="hljs-variable">BAT</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">PSXICON</span><span class="hljs-operator">.</span><span class="hljs-variable">ICO</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">README</span><span class="hljs-operator">.</span><span class="hljs-built_in">PDF</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">psyq</span>\<span class="hljs-variable">README</span><span class="hljs-operator">.</span><span class="hljs-variable">TXT</span><br></code></pre></td></tr></table></figure><p>如果您有Windows 95、98、ME等，则需要在启动时使用AUTOEXEC.BAT来调用PSPATH.BAT 将此行添加到 <code>AUTOEXEC.BAT</code> 文件（位于“<code>C:\</code>”目录中）“<code>CALL C:\psyq\PSPATHS.BAT</code>”。</p><p>但是，如果您使用的是 Windows XP、Vista、7 等，则需要将变量添加到“环境变量”列表中，如<a href="http://psxdev.net/forum/viewtopic.php?f=49&t=206">此处</a>所述。建议运行注册表文件，以便自动为您添加环境变量。</p><p>恭喜！您现在已经安装了 PSY-Q，并且可以制作 PlayStation 1 游戏了。 您现在可以通过阅读<a href="http://psxdev.net/help/psyq_hello_world.html">此处</a>来制作“<code>Hello World</code>”程序。</p>]]></content>
    
    
    <categories>
      
      <category>PlayStation 开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>什么是 SafeSEH ?</title>
    <link href="/2023/07/19/What&#39;s%20the%20SafeSEH/"/>
    <url>/2023/07/19/What&#39;s%20the%20SafeSEH/</url>
    
    <content type="html"><![CDATA[<p>测试代码：</p><p>（借用网上的代码，通过这段代码编译分析)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*---------------------------------------------------------------------</span><br><span class="hljs-comment">SEH_Excp.cpp - Sample to explore exception handling of SEH.</span><br><span class="hljs-comment">Software Debugging by Raymond Zhang, All rights reserved.</span><br><span class="hljs-comment">---------------------------------------------------------------------*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;excpt.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">char</span> g_szDefPara[] = <span class="hljs-string">&quot;0123456789&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ExcptionFilter</span><span class="hljs-params">(LPEXCEPTION_POINTERS pException, <span class="hljs-type">char</span>** ppPara)</span><br>&#123;<br>PEXCEPTION_RECORD pER = pException-&gt;ExceptionRecord;<br>PCONTEXT pContext = pException-&gt;ContextRecord;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exception Info: code=%08X, addr=%08X, flags=%X.\n&quot;</span>,<br>pER-&gt;ExceptionCode, pER-&gt;ExceptionAddress,<br>pER-&gt;ExceptionFlags);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Context Info: EIP=%08X, EAX=%08X.\n&quot;</span>,<br>pContext-&gt;Eip, pContext-&gt;Eax);<br><br><span class="hljs-keyword">if</span> (*ppPara == <span class="hljs-literal">NULL</span> &amp;&amp; pER-&gt;ExceptionCode == STATUS_ACCESS_VIOLATION)<br>&#123;<br>*ppPara = g_szDefPara;<br>pContext-&gt;Eip -= <span class="hljs-number">3</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;New EIP=%08X and *ppPara=%s.\n&quot;</span>,<br>pContext-&gt;Eip, *ppPara);<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<br>&#125;<br><br><span class="hljs-keyword">return</span> EXCEPTION_EXECUTE_HANDLER;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">FuncA</span><span class="hljs-params">(<span class="hljs-type">char</span>* lpsz)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Entering FuncA with lpsz=%s.\n&quot;</span>, lpsz);<br>__try<br>&#123;<br>*lpsz = <span class="hljs-string">&#x27;2&#x27;</span>;<br>&#125;<br>__except (ExcptionFilter(GetExceptionInformation(), &amp;lpsz))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exexcuting handling block in FuncB.\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exiting from FuncA with lpsz=%s.\n&quot;</span>, lpsz);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SehPrint</span><span class="hljs-params">(<span class="hljs-type">char</span>* szName, LPEXCEPTION_POINTERS pException)</span><br>&#123;<br>PEXCEPTION_RECORD pER = pException-&gt;ExceptionRecord;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s:%x\n&quot;</span>, szName, pER-&gt;ExceptionFlags);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">FuncB</span><span class="hljs-params">(<span class="hljs-type">int</span> nPara)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Entering FuncB with Para=%d.\n&quot;</span>, nPara);<br>__try<br>&#123;<br>nPara = <span class="hljs-number">1</span> / nPara;<br><br>*(<span class="hljs-type">int</span>*)<span class="hljs-number">0</span> = <span class="hljs-number">1</span>;<br>&#125;<br>__except (SehPrint(<span class="hljs-string">&quot;FuncB&quot;</span>, GetExceptionInformation()),<br>GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?<br>EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Executing handling block in FuncB [%X].\n&quot;</span>,<br>GetExceptionCode());<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exiting from FuncB with Para=%d.\n&quot;</span>, nPara);<br><span class="hljs-keyword">return</span> nPara;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-type">int</span> nRet = <span class="hljs-number">0</span>;<br><br>FuncA(argv[<span class="hljs-number">1</span>]);<br><br>__try<br>&#123;<br>nRet = FuncB(argc - <span class="hljs-number">1</span>);<br>&#125;<br>__except (SehPrint(<span class="hljs-string">&quot;main&quot;</span>, GetExceptionInformation()), EXCEPTION_EXECUTE_HANDLER)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Executing exception handling block in main [%X].\n&quot;</span>,<br>GetExceptionCode());<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exit from main with nRet=%d.\n&quot;</span>, nRet);<br><span class="hljs-keyword">return</span> nRet;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在了解 <code>SafeSEH</code> 之前，我们要首先了解什么是 <code>SEH</code>, 然后才知道为什么会出现 SafeSEH 这个东西。</p><h2 id="1-结构化异常处理-SEH"><a href="#1-结构化异常处理-SEH" class="headerlink" title="1. 结构化异常处理(SEH)"></a>1. 结构化异常处理(SEH)</h2><p>结构化异常处理 (SEH) 是 C 和 C++ 的 Microsoft 扩展，用于处理某些特殊代码情况，例如硬件故障，正常。 尽管 Windows 和 Microsoft C++ 支持 SEH，但我们建议在 C++ 代码中使用 ISO 标准 C++ 异常处理。 它提高了代码的可移植性和灵活性。 但是，为了维护现有代码，或者对于特定类型的程序，你仍可能必须使用 SEH。</p><p>更加详细的内容，请参考微软的官方文档：<a href="https://learn.microsoft.com/zh-cn/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170">https://learn.microsoft.com/zh-cn/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170</a></p><p>我们下面说的是具体结构问题。</p><p>保存结构化异常，在系统内部需要一套结构来保存处理的函数数据， 所有的结构化异常数据都保存在 <code>TEB</code> 中， 也就是线程环境块，是系统为每一个线程分配的一个线程管理的数据块，其中又包括了线程信息块 <code>TIB</code>, <code>TIB</code> 块是 <code>TEB</code> 结构的第一部分，在windows系统中， <code>TIB</code> 的结构为 <code>_NT_TIB</code>, 所以，我们可以通过 TEB的地址，来获取 <code>_NT_TIB</code> 的数据内容。如下：</p><p><img src="/2023/07/19/What's%20the%20SafeSEH/address_teb.png"></p><p>通过上面的地址，我们分析 <code>_NT_TIB</code> 结构，如下:</p><p><img src="/2023/07/19/What's%20the%20SafeSEH/nt_tib.png"></p><p>我们通过上面的结构，就能看到异常处理的链，保存的是一个 <code>_EXCEPTION_REGISTRATION_RECORD </code>的结构， 那么我们查看这个结构，数据如下：</p><p><img src="/2023/07/19/What's%20the%20SafeSEH/EXCEPTION_REGISTRATION_RECORD.png"></p><p>我们得到相关的 <code>_EXCEPTION_REGISTRATION_RECORD</code> 的结构如下图：</p><p><img src="/2023/07/19/What's%20the%20SafeSEH/EXCEPTION_REGISTRATION_RECORD_struct.png"></p><ul><li><p><code>_EXCEPTION_REGISTRATION_RECORD</code> 指向下一个异常结构</p></li><li><p><code>_EXCEPTION_DISPOSITION</code> 异常处理的代码地址</p></li></ul><p>我们继续分析程序，因为上述的结构化异常处理是一个链表，我们打印几个点查看相关的数据，如下图：</p><p><img src="/2023/07/19/What's%20the%20SafeSEH/seh_list.png"></p><p>我们上图能看处理，异常处理的 <code>Handler</code> 正好是我们程序的异常处理的地方:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">+<span class="hljs-number">0x004</span> Handler          : <span class="hljs-number">0x00ec1ad0</span>     _EXCEPTION_DISPOSITION  test_safeseh!_except_handler4+<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>我们通过上图知道，我们自己的异常处理结构的位置为：<code>0x0136fc0c</code>, 然后我们查看一下 <code>esp</code>的值，也就是当前函数栈帧的所在地址范围， 如下图：</p><p><img src="/2023/07/19/What's%20the%20SafeSEH/stack_frame.png"></p><p>通过上图，我们可以看出来， 异常处理的结构基本就是在栈帧的所在范围。记住这一点，后续的对于通过利用 <code>SEH</code> 实现漏洞利用很重要。</p><h2 id="2-什么是-SafeSEH"><a href="#2-什么是-SafeSEH" class="headerlink" title="2. 什么是 SafeSEH ?"></a>2. 什么是 SafeSEH ?</h2><p>SafeSEH（安全结构化异常处理程序）是一种针对 32 位可执行文件的 Windows 二进制保护机制，已经存在了一段时间。启用该选项后，链接器会在构建二进制文件时在 SEHandlerTable 中创建一个有效异常处理程序地址列表。这种保护可防止执行损坏的异常处理程序，这是一种常见的利用技术。当抛出异常并且处理程序的地址由攻击者控制时，他们可以使用的地址选择有限。由于所有现代操作系统上都有 DEP（数据执行保护），攻击者选择的地址必须是可执行的，通常这些地址仅限于可执行模块的 .text 部分内的地址。在启用 SafeSEH 的模块中选择地址时，会将其与 SEHandlerTable 中的有效地址列表进行比较，除非找到，否则不会执行。</p><p><span style="background-color:#ecec73; color:#266ad7">注意：</span> SafeSEH 只针对 32位的程序，对于64位程序，有其他的处理办法来实现类似思路。</p><h3 id="1-VisualStudio开发中设置-SafeSEH-选项"><a href="#1-VisualStudio开发中设置-SafeSEH-选项" class="headerlink" title="1. VisualStudio开发中设置 /SafeSEH 选项"></a>1. VisualStudio开发中设置 <code>/SafeSEH</code> 选项</h3><p><img src="/2023/07/19/What's%20the%20SafeSEH/safeseh_attribute.png"></p><p>我们本身的测试程序是加入了 <code>/SafeSEH</code> 选项的，那么我们查看PE结构如下：</p><p><img src="/2023/07/19/What's%20the%20SafeSEH/SafeSEH_Handler.png"></p><p>在 <code>SE Handler Table</code> 地方存在，这个地方就是保留的 <code>SafeSEH</code> 的一个对照表，用于防止 SEH 被修改</p><p>我们在看看，把 <code>/SafeSEH</code> 选项去掉的情况，如下图：</p><p><img src="/2023/07/19/What's%20the%20SafeSEH/SafeSEH_Handler_NoExist.png"></p><p>发现 <code>SE Handler Table</code> 已经是空的了，说明不存在这个表了。</p><h2 id="3-关于x64下的SEH"><a href="#3-关于x64下的SEH" class="headerlink" title="3. 关于x64下的SEH"></a>3. 关于x64下的SEH</h2><p>SEH 在 x86下是通过Stack保存的，但在x64位下，是通过PE的节保存的: <code>.pdata</code>, 参考的文章可以看：</p><ul><li><p><code>x64 exception handling</code>： <a href="https://learn.microsoft.com/en-us/cpp/build/exception-handling-x64?view=msvc-170&viewFallbackFrom=vs-2019">https://learn.microsoft.com/en-us/cpp/build/exception-handling-x64?view=msvc-170&amp;viewFallbackFrom=vs-2019</a></p></li><li><p><code>Exceptional behavior: the Windows 8.1 X64 SEH Implementation</code>: <a href="https://blog.talosintelligence.com/exceptional-behavior-windows-81-x64-seh/">https://blog.talosintelligence.com/exceptional-behavior-windows-81-x64-seh/</a></p></li><li><p><code>Programming against the x64 exception handling support</code> : <a href="http://www.nynaeve.net/?p=113&ref=cisco-talos-blog">http://www.nynaeve.net/?p=113&amp;ref=cisco-talos-blog</a></p></li><li><p><code>Windows Exceptions (SEH stack x86 + section based x64)</code> : <a href="https://github.com/qilingframework/qiling/issues/76">https://github.com/qilingframework/qiling/issues/76</a></p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><code>结构化异常SEH处理机制详细介绍(一）</code> : <a href="https://www.cnblogs.com/yilang/p/11233935.html">https://www.cnblogs.com/yilang/p/11233935.html</a></p></li><li><p><code>Analyzing Safe Exception Handlers</code>: <a href="https://warroom.rsmus.com/analyzing-safe-exception-handlers/">https://warroom.rsmus.com/analyzing-safe-exception-handlers/</a></p></li><li><p><code>/SafeSEH选项</code>： <a href="https://learn.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers?view=msvc-170">https://learn.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers?view=msvc-170</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Cheat Engine Tutorial(1-7)</title>
    <link href="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/"/>
    <url>/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/</url>
    
    <content type="html"><![CDATA[<style>.highlight {        background-color: rgba(255,255,0, 0.5);    }</style><p>最近在玩一个游戏，发现不修改数据，很难让我过关，所以我想到了CE, 虽然很多年前用过，属于基本应用，没有特别深入，这次为了游戏，系统的学习一下，做个教程，留住记忆吧。</p><p>这篇主要是练习 Cheat Engine 帮助部分的 Check Engine Turtorial 部分， 主要使用的CE 为最新的7.5版本， 如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/CE_Basic_1.png" alt="主界面"></p><p>本身英文也不是很好，所以通过机翻的方式翻译题目，离谱的地方会尽量手翻修正，希望能更好的让大家理解。</p><h2 id="1-Welcome-to-the-Cheat-Engine-Tutorial-v3-6"><a href="#1-Welcome-to-the-Cheat-Engine-Tutorial-v3-6" class="headerlink" title="1. Welcome to the Cheat Engine Tutorial (v3.6)"></a>1. Welcome to the Cheat Engine Tutorial (v3.6)</h2><p>如图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Cheat-Engine-Tutorial-1.png" alt="Cheat-Engine-Tutorial-1"></p><p>题目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs text">欢迎使用 Cheat Engine 教程（版本 3.6）。<br><br>本教程将教您如何在视频游戏中进行作弊。它还将向您展示使用 Cheat Engine（简称 CE）的基础知识。按照下面的步骤开始操作。<br><br>1：如果尚未运行 Cheat Engine，请打开它。<br>2：点击“打开进程”图标（在“文件”下方，最左边的一个带有电脑图标的图标）。<br>3：现在打开了进程列表窗口，请在列表中寻找本教程的进程。它可能类似于“00001F98-Tutorial-x86_64.exe”或“0000047C-Tutorial-i386.exe”（前8个数字/字母可能会不同）。<br>4：找到进程后，点击选择它，然后点击“打开”按钮（现在不用担心其他按钮，如果有兴趣的话，以后可以了解更多）。<br><br>恭喜！如果您一切操作正确，进程窗口应该消失，Cheat Engine 现在已经连接到教程（您将在 CE 的顶部中心位置看到进程名称）。<br><br>点击下方的“下一步”按钮继续，或填写密码并点击“确定”按钮继续下一步。<br><br>如果遇到问题，您可以前往 forum.cheatengine.org，然后点击“教程”查看面向初学者的指南！<br></code></pre></td></tr></table></figure><p>按步骤附加到进程，如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/CE-Tutorial-1-1.png" alt="CE-Tutorail-1-1"></p><p>然后点击 <code>Tutorail-i386</code> 上的 <code>Next</code> 或是 <code>OK</code> 进入到 <code>Step 2</code>(这一步我是没找到相关需要操作的地方，所以直接进入到 Step2)。</p><h2 id="2-Step2"><a href="#2-Step2" class="headerlink" title="2. Step2"></a>2. Step2</h2><p>如图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step-2.png"></p><p>题目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs text">第2步：精确值扫描（密码=090453）<br>现在您已经使用 Cheat Engine 打开了教程，我们继续下一步。<br><br>您可以在窗口底部看到文本“Health: xxx”。每次点击“Hit me”按钮时，您的生命值都会减少。<br><br>为了进行下一步操作，您需要找到这个值并将其更改为1000。<br><br>有不同的方法可以找到这个值，但我将告诉您最简单的一种方法，即“精确值”：<br>首先确保值类型至少设置为2字节或4字节。1字节也可以工作，但当您找到地址并想要更改它时，可能会遇到一个容易解决的问题。如果地址后面的字节是0，8字节也可能起作用，但我不会赌这个。<br>单精度、双精度和其他扫描方法都不起作用，因为它们以不同的方式存储值。<br><br>当值类型正确设置后，确保扫描类型设置为“精确值”。<br>然后在值框中填入您的生命值，并点击“首次扫描”。<br>经过一段时间（如果您的计算机非常慢），扫描就完成了，并且结果会显示在左侧的列表中。<br><br>如果找到的地址不止一个，您不确定哪个地址是正确的，请点击“Hit me”按钮，将新的生命值填入值框中，然后点击“下一次扫描”。<br>重复此过程，直到确定找到为止（这包括列表中只有一个地址）。<br><br>现在在左侧的列表中双击地址。这会使地址在底部的列表中弹出，并显示当前值。<br>双击该值（或选择它并按回车键），将值更改为1000。<br><br>如果一切顺利，下一步按钮将变为可用状态，您已准备好进行下一步操作。<br><br>注意：<br>如果在扫描过程中出现任何错误，请点击“新扫描”并重新进行扫描。<br>另外，尝试调整值并点击“Hit me”按钮。<br></code></pre></td></tr></table></figure><p>首先，如上图显示 <code>Health: 100</code> 根据提示，我们使用 精确值 <code>Exact Value</code> 和 选择 <code>4 Bytes</code> 的值大小，在值得输入框中输入： <code>100</code> , 然后点击 <code>First Scan</code>, 如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step2-1.png"></p><p>然后点击 <code>Hit me</code> 更改 <code>Health</code> 得值，如下：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step2-2.png"></p><p>然后重新回到 CE 窗口，在 <code>Value</code> 中输入 <code>98</code>, 然后 <code>Next Scan</code> 一下，就能得到：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step2-3.png"></p><p>我们看到得到一个地址值，我们选中这个值到地址栏，然后修改题目要求，为1000, 如下：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step2-4.png"></p><p>然后确定，我们就能看到 <code>Next</code> 已经变成 <code>Enable</code> 了，如下：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step2-5.png"></p><h2 id="3-Step3"><a href="#3-Step3" class="headerlink" title="3. Step3"></a>3. Step3</h2><p>题目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">第3步：未知初始值（密码=419482）<br>好的，既然您已经知道如何使用精确值找到一个值，我们继续下一步。<br><br>首先，请确保您正在进行新的扫描。因此，您首先需要点击“新扫描”以开始新的扫描。（您可能认为这很简单，但会有许多人在这一步卡住）我不会再解释这一步，所以记住这一点。<br>现在，您已经开始了新的扫描，我们继续。<br><br>在上一次测试中，我们知道了初始值，所以我们可以进行精确值搜索，但现在我们有一个状态栏，我们不知道初始值是多少。<br>我们只知道该值介于0和500之间。每次点击“Hit me”按钮，您都会失去一些生命值。每次失去的数量显示在状态栏上方。<br><br>同样，有几种不同的方法可以找到该值（例如通过减小的值进行扫描），但我只解释最简单的方法，“未知初始值”和“减小的值”。<br>因为您不知道当前值是多少，精确值不会起作用，所以选择扫描类型为“未知初始值”，值类型仍然是4字节（大多数 Windows 应用程序使用4字节）。点击“首次扫描”并等待扫描完成。<br><br>当扫描完成后，点击“Hit me”按钮。您会失去一些生命值（失去的数量会在几秒钟内显示，然后消失，但您不需要关注这个）。<br>现在回到 Cheat Engine，选择“减小的值”并点击“下一步扫描”。<br>当扫描完成后，再次点击“Hit me”按钮，并重复上述步骤，直到只找到几个地址为止。<br><br>我们知道该值介于0和500之间，所以选择最有可能是我们需要的地址，并将其添加到列表中。<br>现在将生命值更改为5000，以继续进行下一步操作。<br></code></pre></td></tr></table></figure><p>我们首先重新开一个 <code>New Scan</code> ，然后选择 <code>Value Between</code> 和 <code>4 Bytes</code>， 然后填入 <code>0</code> 到 <code>500</code> ，如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step3-1.png"></p><p>然后 <code>First Scan</code>, 如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step3-2.png"></p><p>完成了第一次扫描之后，因为每次点击都是减小值，所以我们重新设定 Scan Type 为 <code>Decreased Value</code> ，如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step3-3.png"></p><p>然后点击程序中得 <code>Hit Me</code> 然后再CE中点击 <code>Next Scan</code>:</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step3-4.png"></p><p>我们发现也没什么变化，那么重复几次这个过程，就能得到改变得地址，如下：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step3-5.png"></p><p>然后修改为 <code>5000</code> 就会是 <code>Next</code> 按钮变成可用状。</p><h2 id="4-Step4"><a href="#4-Step4" class="headerlink" title="4. Step4"></a>4. Step4</h2><p>题目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">第4步：浮点数（密码=890124）<br>在上一个教程中，我们使用了字节进行扫描，但一些游戏会将信息存储为所谓的“浮点数”表示法。<br>（可能是为了防止简单的内存扫描器轻易找到它）<br>浮点数是带有小数点后面一些数字的值（例如5.12或11321.1）。<br><br>下面您可以看到您的生命值和弹药。它们都以浮点数表示，但生命值以float存储，而弹药以double存储。<br>点击“Hit me”按钮失去一些生命值，并点击“Shoot”按钮将您的弹药减少0.5。<br><br>您必须将这两个值都设置为5000或更高才能继续进行。<br><br>在这里，精确值扫描将工作得很好，但您也可以尝试其他类型的扫描。<br><br>提示：double类型得建议禁用快速扫描：Fast Scan<br></code></pre></td></tr></table></figure><p>有上面的基础，我们直接略过一些步骤，扫描类型选择 <code>float</code> ，第二个值一会选择 <code>double</code> 类型，因为可以用 <code>Exact Value</code>，目前没有问题，等遇到了其他情况可以具体分析。如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step4-1.png"></p><p>然后修改地址栏中得两个值都为 <code>5000</code> 即可进入到下一步。</p><h2 id="5-Step5"><a href="#5-Step5" class="headerlink" title="5. Step5"></a>5. Step5</h2><p>题目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">第5步：代码查找器（密码=888899）<br>有时候，一个值的位置在重新启动游戏时或者在游戏过程中可能会发生变化。在这种情况下，您可以使用两个方法来创建一个仍然有效的表格。在本步骤中，我将尝试描述如何使用“代码查找器”功能。<br><br>下面的值每次开始教程时都会位于不同的位置，因此普通的地址列表中的条目将不起作用。<br>首先，尝试找到该地址（假设您已经知道如何进行这个操作）。<br>当找到地址后，在 Cheat Engine 中右键单击该地址，然后选择 “ Find out what writes to this address ” 。一个窗口将弹出，并显示一个空的列表。<br>然后，点击本教程中的“Change value”按钮，并返回到 Cheat Engine。如果一切正常，现在应该有一个带有汇编代码的地址。<br>点击它，并选择“替换”选项，将其替换为不执行任何操作的代码。这也将在“高级选项”窗口的代码列表中添加该代码地址（如果保存了表格，它将被保存）。<br><br>点击“Stop”，以便游戏正常运行，并点击“Close”关闭窗口。<br>现在，点击“Change value”，如果一切正常，下一步按钮应该变为可用状态。<br><br>注意：当您使用足够快的速度冻结地址时，下一步按钮可能会变为可见状态。<br></code></pre></td></tr></table></figure><p>还是重新开始一个扫描，然后得到改变得地址如下：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step5-1.png"></p><p>然后我们右键选择 <code>Find out what writes to this address</code>, 如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step5-2.png"></p><p>出现如下图所示得窗口，然后我们点击教程得 <code>Change Value </code> 就能出现写入改变值地址得汇编内容：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step5-3.png"></p><p>然后地址这个窗口中得 <code>Replace</code> 就会出现一个汇编来改变内容：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">eax</span>], <span class="hljs-built_in">ebx</span><br></code></pre></td></tr></table></figure><p>我们随意修改这个汇编指令，如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">eax</span>], <span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><p>然后点击教程中得 <code>Change Value</code> 那么 <code>Next</code> 就变为可用状态：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step5-4.png"></p><p><span class="highlight">注：</span></p><p>其实地址得数据可以直接修改，至于修改值后不能使 <code>Next</code> 变为可用，是教程开发上的原因。</p><h2 id="6-Step6"><a href="#6-Step6" class="headerlink" title="6. Step6"></a>6. Step6</h2><p>题目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs text">第6步：指针（密码=098712）<br>在上一步中，我解释了如何使用代码查找器处理位置变化的情况。但仅仅使用这种方法很难找到要设置所需值的地址。<br>这就是为什么会有指针的存在：<br><br>在底部，您会找到两个按钮。一个按钮用于更改值，另一个按钮用于更改值和值的位置。<br>在这一步中，您实际上不需要了解汇编语言，但如果您了解汇编语言，会对您有很大帮助。<br><br>首先找到该值的地址。找到地址后，使用“Find out what accesses this address”功能来查找访问该地址的代码。<br>再次更改该值，列表中将显示一个条目。双击该条目（或选择并单击“更多信息”），将打开一个新窗口，详细说明指令运行时发生的情况。<br>如果汇编指令在 &#x27;[&#x27; 和 &#x27;]&#x27; 之间没有任何内容，请使用列表中的另一个条目。<br>如果有内容，它将显示它认为您所需的指针的值。<br>返回到 Cheat Engine 的主窗口（如果您愿意，可以保持此额外信息窗口打开，但如果关闭它，请记住 &#x27;[&#x27; 和 &#x27;]&#x27; 之间的内容），并对该额外信息提供的值进行16进制的4字节扫描。<br>扫描完成后，可能会返回1个或几百个地址。！大多数情况下，您所需的地址将是最小的地址。然后点击“Add Address Manually”按钮，并选择指针复选框。<br><br>窗口将更改，并允许您输入指针的地址和偏移量。<br>填入刚才找到的地址。它可以是形如：“Tutorial-i386.exe”+xxxxxx（相对于进程的地址）的形式，<br>或者您可以双击地址将其添加到地址列表中，并使用出现在那里的绝对地址。<br>如果汇编指令末尾有一个计算（例如：[esi+12]），请在地址字段上方输入在末尾的值。这是偏移量。否则将其保留为0。如果是更复杂的指令，请参考以下计算。<br><br>更复杂指令的示例：<br>[EAX2+EDX+00000310] eax=4C，edx=00801234。<br>在这种情况下，EDX 将是指针的值，而 EAX2+00000310 将是偏移量，因此您要填写的偏移量将是 2*4C+00000310=3A8。（这都是16进制，使用 Windows 的计算器（calc.exe）在程序员模式下计算16进制值。）<br><br>回到教程中，点击“确定”，地址将被添加。如果一切顺利，地址将显示为 P-&gt;xxxxxxx，其中 xxxxxxx 是您找到的值的地址。如果不正确，则表示您做错了什么。<br>现在，使用您添加的指针将该值更改为5000，并点击“Active”列以冻结它。然后点击“Change pointer”，如果一切顺利，下一步按钮将变为可见状态。<br><br>额外信息：<br>您还可以使用指针扫描器来查找指向该地址的指针。https://cheatengine.org/help/pointer-scan.htm<br></code></pre></td></tr></table></figure><p>还是通过上面的方法找到地址，然后右键 <code>Find out what accesses this address</code> , 如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step6-1.png"></p><p>打开窗口，然后我们点击课程的 <code>Change Value</code> 按钮，就可以得到值，如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step6-2.png"></p><p>其中第二汇编就是需要的内容： <code>mov [edx], eax</code>, 原因可以看下图，赋值的 eax &#x3D; 451</p><p>其他的汇编内容，可以自行查看，和本身的内容没有太多关系。</p><p>我们找到上图的 <code>EDX</code> 的值为： <code>016D6030</code> 我们搜索这个值，如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step6-3.png"></p><p>我们把这个地址手动添加到地址栏中</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step6-4.png"></p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step6-5.png"></p><p><span class="highlight"> 注意: </span>这个地方一定选择指针和添加途中的地址形式，要不后续的操作不对，这个是本身CE在做内容锁定的时候需要的地方，我尝试过使用使用地址，而不是指针的形式，是锁定不了的。</p><p>然后如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step6-6.png"></p><p>然后我们改变值和改变地址尝试看看变化：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step6-7.png"></p><p>我们看到，即使改变地址，我们指针指向的还是正确的值， 那么我们修改值为 5000， 并且锁定这个指针，点击教程中的按钮， 如下图：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step6-8.png"></p><p>我们看到成功解锁了这个程序。</p><h2 id="7-Step7"><a href="#7-Step7" class="headerlink" title="7. Step7"></a>7. Step7</h2><p>题目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs text">第7步：代码注入（密码=013370）<br>代码注入是一种技术，您通过将一段代码注入到目标进程中，然后将代码的执行重定向到您自己编写的代码中。<br><br>在本教程中，您有一个生命值和一个按钮，每次点击按钮时，生命值会减少1。<br>您的任务是使用代码注入使按钮每次点击时生命值增加2。<br><br>首先找到该地址，然后找出对其进行写入的代码。<br>然后，当您找到减少生命值的代码时，在反汇编器中浏览到该地址，并打开自动汇编器窗口（Ctrl+A）。<br>在那里，点击模板，然后选择代码注入，并给它减少生命值的地址（如果没有正确填写）。<br>这将生成一个基本的自动汇编器注入框架，您可以在其中编写您的代码。<br><br>请注意 alloc 这一行，它将为您的代码洞分配一个内存块，在过去，在 Windows 2000 之前的系统中，人们必须在内存中找到代码洞（游戏未使用的内存区域），但幸运的是，这已经成为过去式，因为从 Windows 2000 开始，由于 XP 的 SP2 和新 CPU 的 NX 位，尝试使用这些代码洞将导致错误。<br><br>还请注意 newmem: 和 originalcode: 这两行以及“在此处放置您的代码”文本。<br>正如您猜到的那样，在此处编写代码，该代码将使生命值增加2。<br>在这种情况下，一个有用的汇编指令是“ADD 指令”。<br><br>以下是几个示例：<br>&quot;ADD [00901234],9&quot; 表示将地址 00901234 处的值增加9<br>&quot;ADD [ESP+4],9&quot; 表示将 ESP+4 所指向的地址的值增加9<br>在这种情况下，您将使用与原代码中减少生命值的部分相同的内容放在方括号中。<br><br>注意：<br>建议删除原代码部分中减少生命值的行，否则您将不得不将生命值增加3（您增加2，原代码减少1，因此最终结果是增加2），这可能会变得令人困惑。但这完全取决于您和您的编程。<br><br>注意2：<br>在某些游戏中，原代码可能由多个指令组成，并且有时（并非总是）可能发生的是，其他位置的代码跳转到您的跳转指令中，这会导致未知的行为。如果发生这种情况，通常应在该指令附近查看跳转并进行修复，或者甚至可以选择使用不同的地址进行代码注入。只要您能够在注入的代码中找到更改的地址即可。<br></code></pre></td></tr></table></figure><p>首先通过上面的方法找到地址位置，然后右键菜单：<code>Find out what writes to this address</code>, 看到汇编内容如下：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step7-1.png"></p><p>按题目要求，我们尝试修改一下这条汇编，从原有的减少1到增加2， 如下：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step7-2.png"></p><p>我们点击 <code>Hit Me</code> 发现已经通过测试：</p><p><img src="/2023/07/09/Cheat%20Engine%20Tutorial(1-7)/Step7-3.png"></p>]]></content>
    
    
    <categories>
      
      <category>Cheat Engine</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>StackOverflow</title>
    <link href="/2023/07/06/StackOverflow/"/>
    <url>/2023/07/06/StackOverflow/</url>
    
    <content type="html"><![CDATA[<style>.highlight {    background-color:#ecec73;     color:#266ad7;}</style><p>本篇文章主要是手动分析栈的溢出情况，并且去掉了相关的检查代码，我们下面就是通过简单的示例，来分析整个流程，首先看代码如下：</p><p>代码文件为：<code>test_stack.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-comment">//by MoreWindows</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;process.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* input)</span><br>&#123;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">//buf 占4字节，后4字节为ebp，再后4个字节为返回地址。</span><br><span class="hljs-built_in">strcpy</span>(buf, input); <span class="hljs-comment">//传入的字符串去覆盖返回地址，从而使用程序执行bar()函数</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Augh! This program have been hacked by MoreWindows!\n&quot;</span>);<br>_getch();<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//由于这时的ebp已经破坏了, 所以在这直接退出程序. 不然会弹出错误对话框</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of main = %p\n&quot;</span>, main);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of foo = %p\n&quot;</span>, foo);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of bar = %p\n&quot;</span>, bar);<br><br><span class="hljs-comment">//构造字符串，前8个填充字符，再跟一个bar()函数的地址。</span><br><span class="hljs-type">char</span> szbuf[<span class="hljs-number">50</span>] = <span class="hljs-string">&quot;12341234&quot;</span>;<br>DWORD* pbarAddress = (DWORD*)&amp;szbuf[<span class="hljs-number">8</span>];<br>*pbarAddress = (DWORD)bar;<br><br>foo(szbuf);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-准备编译环境"><a href="#1-准备编译环境" class="headerlink" title="1. 准备编译环境"></a><strong>1. 准备编译环境</strong></h2><ul><li>visual studio 2019 </li><li>Debug&#x2F;x86</li><li>使用C编译器编译</li><li>去掉栈检查,JMC等</li></ul><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a><strong>1. 配置</strong></h3><p><span class="highlight">指定C编译器：</span></p><p><img src="/2023/07/06/StackOverflow/c_compiler.png"></p><p><span class="highlight">去掉基本运行时检查</span></p><p><img src="/2023/07/06/StackOverflow/rtc.png"></p><p>具体的rtc检查，生成的函数，可以参考文章：<a href="https://blog.csdn.net/magictong/article/details/6306820">https://blog.csdn.net/magictong/article/details/6306820</a></p><p><span class="highlight">去掉缓冲区检查</span></p><p><img src="/2023/07/06/StackOverflow/stack_check.png"></p><p>去掉整个作用就是去掉我们在反汇编中经常能看到的函数：<code>___security_cookie</code></p><p><span class="highlight">去掉JMC选项</span></p><p><img src="/2023/07/06/StackOverflow/jmc.png"></p><p>JMC选项一个Debug调试过程中的对于PDB文件的一种修饰，可以查看文章：<a href="https://learn.microsoft.com/en-us/cpp/build/reference/jmc?view=msvc-170">https://learn.microsoft.com/en-us/cpp/build/reference/jmc?view=msvc-170</a></p><p>上面的配置都完成之后，我们就可以生成程序了，然后调试程序，就可以看见反汇编结果。</p><h2 id="2-反汇编并调试"><a href="#2-反汇编并调试" class="headerlink" title="2. 反汇编并调试"></a><strong>2. 反汇编并调试</strong></h2><p>调试过程中的反汇编结果：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; ----------------------main主函数---------------------------</span><br><br><span class="hljs-keyword">int</span> main(<span class="hljs-keyword">int</span> argc, char* argv[])<br>&#123;<br>005B1920  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ebp</span>  <br>005B1921  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ebp</span>,<span class="hljs-built_in">esp</span>  <br>005B1923  <span class="hljs-keyword">sub</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">78h</span>  <br>005B1926  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ebx</span>  <br>005B1927  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">esi</span>  <br>005B1928  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">edi</span>  <br>printf(<span class="hljs-string">&quot;Address of main = %p\n&quot;</span>, main)<span class="hljs-comment">;</span><br>005B1929  <span class="hljs-keyword">push</span>        offset _main (<span class="hljs-number">05B12DFh</span>)  <br>005B192E  <span class="hljs-keyword">push</span>        offset string <span class="hljs-string">&quot;Address of main = %p\n&quot;</span> (<span class="hljs-number">05B7B70h</span>)  <br>005B1933  <span class="hljs-keyword">call</span>        _printf (<span class="hljs-number">05B10CDh</span>)  <br>005B1938  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span>  <br>printf(<span class="hljs-string">&quot;Address of foo = %p\n&quot;</span>, foo)<span class="hljs-comment">;</span><br>005B193B  <span class="hljs-keyword">push</span>        offset _foo (<span class="hljs-number">05B127Bh</span>)  <br>005B1940  <span class="hljs-keyword">push</span>        offset string <span class="hljs-string">&quot;Address of foo = %p\n&quot;</span> (<span class="hljs-number">05B7B8Ch</span>)  <br>005B1945  <span class="hljs-keyword">call</span>        _printf (<span class="hljs-number">05B10CDh</span>)  <br>005B194A  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span>  <br>printf(<span class="hljs-string">&quot;Address of bar = %p\n&quot;</span>, bar)<span class="hljs-comment">;</span><br>005B194D  <span class="hljs-keyword">push</span>        offset _bar (<span class="hljs-number">05B11F9h</span>)  <br>005B1952  <span class="hljs-keyword">push</span>        offset string <span class="hljs-string">&quot;Address of bar = %p\n&quot;</span> (<span class="hljs-number">05B7BA8h</span>)  <br>005B1957  <span class="hljs-keyword">call</span>        _printf (<span class="hljs-number">05B10CDh</span>)  <br>005B195C  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span>  <br><br>//构造字符串，前<span class="hljs-number">8</span>个填充字符，再跟一个bar()函数的地址。<br>char szbuf[<span class="hljs-number">50</span>] = <span class="hljs-string">&quot;12341234&quot;</span><span class="hljs-comment">;</span><br>005B195F  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [string <span class="hljs-string">&quot;12341234&quot;</span> (<span class="hljs-number">05B7BC4h</span>)]  <br>005B1964  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [szbuf],<span class="hljs-built_in">eax</span>  <br>005B1967  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-number">5B7BC8h</span>]  <br>005B196D  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">30h</span>],<span class="hljs-built_in">ecx</span>  <br>005B1970  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dl</span>,<span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-number">5B7BCCh</span>]  <br>005B1976  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">2Ch</span>],<span class="hljs-built_in">dl</span>  <br>005B1979  <span class="hljs-keyword">push</span>        <span class="hljs-number">29h</span>  <br>005B197B  <span class="hljs-keyword">push</span>        <span class="hljs-number">0</span>  <br>005B197D  <span class="hljs-keyword">lea</span>         <span class="hljs-built_in">eax</span>,[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">2Bh</span>]  <br>005B1980  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">eax</span>  <br>005B1981  <span class="hljs-keyword">call</span>        _memset (<span class="hljs-number">05B114Fh</span>)  <br>005B1986  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">0Ch</span>  <br><span class="hljs-built_in">DWORD</span>* pbarAddress = (<span class="hljs-built_in">DWORD</span>*)&amp;szbuf[<span class="hljs-number">8</span>]<span class="hljs-comment">;</span><br>005B1989  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span>  <br>005B198E  <span class="hljs-keyword">shl</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-number">3</span>  <br>005B1991  <span class="hljs-keyword">lea</span>         <span class="hljs-built_in">ecx</span>,szbuf[<span class="hljs-built_in">eax</span>]  <br>005B1995  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [pbarAddress],<span class="hljs-built_in">ecx</span>  <br>*pbarAddress = (<span class="hljs-built_in">DWORD</span>)bar<span class="hljs-comment">;</span><br>005B1998  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [pbarAddress]  <br>005B199B  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">eax</span>],offset _bar (<span class="hljs-number">05B11F9h</span>)  <br><br>foo(szbuf)<span class="hljs-comment">;</span><br>005B19A1  <span class="hljs-keyword">lea</span>         <span class="hljs-built_in">eax</span>,[szbuf]  <br>005B19A4  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">eax</span>  <br>005B19A5  <span class="hljs-keyword">call</span>        _foo (<span class="hljs-number">05B127Bh</span>)  <span class="hljs-comment">; -------------------- ①</span><br>005B19AA  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">4</span>  <span class="hljs-comment">; ------------------------------ ②</span><br><br>return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>005B19AD  <span class="hljs-keyword">xor</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span>  <br>&#125;<br><br><span class="hljs-comment">;---------------------foo函数------------------------------</span><br><br>void foo(const char* input)<br>&#123;<br>005B1880  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ebp</span>  <br>005B1881  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ebp</span>,<span class="hljs-built_in">esp</span>  <br>005B1883  <span class="hljs-keyword">sub</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">44h</span>  <br>005B1886  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ebx</span>  <br>005B1887  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">esi</span>  <br>005B1888  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">edi</span>  <br>char buf[<span class="hljs-number">4</span>]<span class="hljs-comment">; //buf 占4字节，后4字节为ebp，再后4个字节为返回地址。</span><br>strcpy(buf, input)<span class="hljs-comment">; //传入的字符串去覆盖返回地址，从而使用程序执行bar()函数</span><br>005B1889  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [input]  <br>005B188C  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">eax</span>  <br>005B188D  <span class="hljs-keyword">lea</span>         <span class="hljs-built_in">ecx</span>,[buf]  <span class="hljs-comment">; ------------------------- ③</span><br>005B1890  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ecx</span>  <br>005B1891  <span class="hljs-keyword">call</span>        _strcpy (<span class="hljs-number">05B120Dh</span>)  <br>005B1896  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span>  <br>&#125;<br><br><span class="hljs-comment">; --------------------bar函数----------------------------</span><br><br>void bar(void)<br>&#123;<br>005B1810  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ebp</span>  <br>005B1811  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ebp</span>,<span class="hljs-built_in">esp</span>  <br>005B1813  <span class="hljs-keyword">sub</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">40h</span>  <br>005B1816  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ebx</span>  <br>005B1817  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">esi</span>  <br>005B1818  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">edi</span>  <br>printf(<span class="hljs-string">&quot;Augh! This program have been hacked by MoreWindows!\n&quot;</span>)<span class="hljs-comment">;</span><br>005B1819  <span class="hljs-keyword">push</span>        offset string <span class="hljs-string">&quot;Augh! This program have been ha@&quot;</span>... (<span class="hljs-number">05B7B30h</span>)  <br>005B181E  <span class="hljs-keyword">call</span>        _printf (<span class="hljs-number">05B10CDh</span>)  <br>005B1823  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">4</span>  <br>_getch()<span class="hljs-comment">;</span><br>005B1826  <span class="hljs-keyword">call</span>        <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [__imp___getch (<span class="hljs-number">05BB174h</span>)]  <br>exit(<span class="hljs-number">0</span>)<span class="hljs-comment">;//由于这时的ebp已经破坏了, 所以在这直接退出程序. 不然会弹出错误对话框</span><br>005B182C  <span class="hljs-keyword">push</span>        <span class="hljs-number">0</span>  <br>005B182E  <span class="hljs-keyword">call</span>        <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [__imp__exit (<span class="hljs-number">05BB178h</span>)]  <br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>我们运行程序到调用 <code>foo</code> 函数， 如下图：</p><p><img src="/2023/07/06/StackOverflow/call_foo.png"></p><p>暂时的输出如下：</p><p><img src="/2023/07/06/StackOverflow/addressoffunctions.png"></p><p>通过上图，我们要记住一点，调用 <code>foo</code> 函数后面的地址，这个是汇编 <code>call _foo</code> 的返回地址，第一张图 <code>①</code> 的位置： <code>005B19AA  add esp,4</code>。 </p><p>我们运行程序，进去到 <code>foo</code> 函数，如下图：</p><p><img src="/2023/07/06/StackOverflow/foo_function.png"></p><p>我们通过查看 <code>esp</code> 寄存器，查看栈中的数据：</p><p><img src="/2023/07/06/StackOverflow/stack_foo.png"></p><p>能看到 <code>esp</code> 地址的数据的第一值是 <code>aa 19 5b 00</code> 也就是 <code>005b19aa</code> 这个地址就是我们上面看到的 <code>call _foo</code> 函数的下一个地址，也就是 <code>call</code> 之后，压入栈的返回地址。</p><p>我们继续运行程序，我们要获取<code>buf</code>变量的位置，因为是局部变量，本身变量存在于栈中，下图：</p><p><img src="/2023/07/06/StackOverflow/address_buf.png"></p><p>我们获取到的 <code>ecx</code> 寄存的值就是 <code>buf</code> 的缓冲区地址：<code>008FF710</code></p><p><img src="/2023/07/06/StackOverflow/address_buf_value.png"></p><p>我们通过上面，知道 <code>①</code> 的位置就是返回地址的位置：<code>0x008FF718  aa 19 5b 00 ?.[.</code></p><p><img src="/2023/07/06/StackOverflow/stack_foo.png"></p><p>而 <code>②</code> 的位置就是 <code>buf</code> 缓存区位置：<code>0x008FF710</code>, 其中的值是随意填充的，没有影响。</p><p>我们继续运行程序，如下图：</p><p><img src="/2023/07/06/StackOverflow/finish_strcpy.png"></p><p>我们完成了 <code>strcpy</code> 函数的执行，然后观察现在 <code>buf</code> 的位置的数值情况，如下图：</p><p><img src="/2023/07/06/StackOverflow/stack_finish_strcpy.png"></p><p>我们看到 <code>buf</code> 地址的位置已经背填充了值，本身的程序代码是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//构造字符串，前8个填充字符，再跟一个bar()函数的地址。</span><br><span class="hljs-type">char</span> szbuf[<span class="hljs-number">50</span>] = <span class="hljs-string">&quot;12341234&quot;</span>;<br>DWORD* pbarAddress = (DWORD*)&amp;szbuf[<span class="hljs-number">8</span>];<br>*pbarAddress = (DWORD)bar;<br><br>foo(szbuf);<br></code></pre></td></tr></table></figure><p>buf 本身填充的数据有两个部分组成，一个是字符数据：<code>&quot;12341234&quot;</code>, 一个是 <code>bar</code> 函数的地址，这个地址我们通过最上面的输出，可以看到如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of main = %p\n&quot;</span>, main);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of foo = %p\n&quot;</span>, foo);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of bar = %p\n&quot;</span>, bar);<br></code></pre></td></tr></table></figure><p><img src="/2023/07/06/StackOverflow/addressofbar.png"></p><p>我们继续看上面的执行完成后的内存栈图，</p><p><img src="/2023/07/06/StackOverflow/finish_strcpy_2.png"></p><p>注意观察这三个地址：<code>0x008FF718</code>, <code>0x008FF714</code>, <code>0x008FF710</code></p><ul><li><p><code>0x008FF710</code>: buf的位置</p></li><li><p><code>0x008FF714</code>: ?</p></li><li><p><code>0x008FF718</code>: 存放调用函数foo的返回地址（可以查看上面的说明）不过这个地址目前已经被 <code>bar</code> 的函数地址覆盖了：<code>f9 11 5b 00</code></p></li></ul><p>第2个地址：<code>0x008FF714</code> 是什么呢？ 在 <code>buf</code> 和 返回地址之间这个压入栈的数据是什么呢？其实也是很好理解，我们从 <code>foo</code> 函数的汇编就可以看出来，如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">void foo(const char* input)<br>&#123;<br>005B1880  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ebp</span>  <span class="hljs-comment">; ------------ 压入ebp</span><br>005B1881  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ebp</span>,<span class="hljs-built_in">esp</span>  <br>005B1883  <span class="hljs-keyword">sub</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">44h</span>  <br>005B1886  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ebx</span>  <br>005B1887  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">esi</span>  <br>005B1888  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">edi</span><br></code></pre></td></tr></table></figure><p>其实这个地方就是 <code>push ebp</code> 的操作。所以在返回地址和buf之间的位置。</p><p>那么我们继续执行，看看会出现什么效果？</p><p>首先执行到 <code>foo</code> 函数的最后，如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">005B1891  <span class="hljs-keyword">call</span>        _strcpy (<span class="hljs-number">05B120Dh</span>)  <br>005B1896  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span>  <br>&#125;<br>005B1899  <span class="hljs-keyword">pop</span>         <span class="hljs-built_in">edi</span>  <br>005B189A  <span class="hljs-keyword">pop</span>         <span class="hljs-built_in">esi</span>  <br>005B189B  <span class="hljs-keyword">pop</span>         <span class="hljs-built_in">ebx</span>  <br>005B189C  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-built_in">ebp</span>  <br>005B189E  <span class="hljs-keyword">pop</span>         <span class="hljs-built_in">ebp</span>  <br>005B189F  <span class="hljs-keyword">ret</span>   <span class="hljs-comment">; ------------------ ret 返回函数</span><br></code></pre></td></tr></table></figure><p>我们查看 <code>ret</code> 汇编指令的说明（Intel IA-32文档):</p><p><img src="/2023/07/06/StackOverflow/ret_operation.png"></p><p>因为是32位程序，所以 <code>ret</code> 执行指令最终执行后是：<code>EIP ← Pop();</code> 说明会把栈返回的数据返回给 <code>EIP</code> 寄存器，这个也就是代码执行的下一个执行存储的寄存器。</p><p>因为上面已经说明了， 把返回地址修改为了 <code>bar</code> 函数的地址：<code>0x008FF718 f9 11 5b 00</code></p><p><img src="/2023/07/06/StackOverflow/finish_strcpy_2.png"></p><p>那么 <code>foo</code> 返回后，也就是要执行 <code>bar</code> 函数了，这个也是能看到的确实是执行了 <code>bar</code> 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Augh! This program have been hacked by MoreWindows!\n&quot;</span>);<br>_getch();<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//由于这时的ebp已经破坏了, 所以在这直接退出程序. 不然会弹出错误对话框</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/06/StackOverflow/bar_function.png"></p><p>我们继续执行，看看能不能输出 <code>printf</code> 函数，如下图：</p><p><img src="/2023/07/06/StackOverflow/bar_output.png"></p><p>已经看到了，确实执行了, 并输出了信息。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a><strong>3. 总结</strong></h2><p>我们通过上面的分析，就是一个完整的栈溢出漏洞的程序执行过程， 但要注意，我们去掉的几乎所有的栈检查和运行时检查，这里只是做为一个演示，观察怎么通过溢出覆盖了返回地址的。后续的文档，我们还会基于这个文章，做payload的分析工作，通过输出的方式弹出对话框。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows 补丁的提取和比较</title>
    <link href="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/"/>
    <url>/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://wumb0.in/extracting-and-diffing-ms-patches-in-2020.html">Extracting and Diffing Windows Patches in 2020</a></p><style>    .highlight {        background-color: rgba(255,255,0, 0.5);    }</style><p>我已经有一段时间没有在这里发布任何东西了！毕竟，个人博客除了多年来被忽视之外还有什么用；）</p><p>不管怎样，我在教授 <a href="https://www.sans.org/cyber-security-courses/advanced-exploit-development-penetration-testers/">SANS SEC760</a> 时一直在运行这个演示，我想我应该把它写下来，以便研究人员稍后在需要时可以回来查看它。将所有这些内容记录在一个地方也很有用，因为有关它的信息似乎分散在整个 Internet 上，就像许多 Windows 主题一样。</p><p>那么为什么要关心提取和分析 Windows 补丁呢？补丁不是说修复的bug现在就没用了吗？</p><p>要开始思考如何回答这些问题，请考虑一下，即使是一个运行良好且具有适当补丁管理的组织也需要多长时间才能向设备推出补丁。如果您，安全研究人员，可以在补丁发布后的几周内将错误武器化，那么您就可以出售它或在活动中使用它。查找 bug 很困难，但是经过 n 天的研究可以告诉您几乎确切的 bug 位置！这是个好消息。查看补丁的实施方式以及错误的修复位置对于发现 0day 也很有用。多年来，微软不得不在多个地方修复相同（或非常相似）的错误。一个典型的例子是旧的 <a href="https://docs.microsoft.com/en-us/security-updates/securitybulletins/2007/ms07-017">MS07-017</a> 动画光标错误，它实际上是两年前 (<a href="https://docs.microsoft.com/en-us/security-updates/securitybulletins/2005/ms05-002">MS05-002</a>) 中相同错误的重复，只是一个函数交叉引用。此外，微软可能根本不会修复该漏洞，或者修复可能不完整，就像今年发现的打印后台处理程序错误一样，该错误被 Ionescu 和 Shafir 称为 <a href="https://windows-internals.com/printdemon-cve-2020-1048/">PrintDemon</a>。原始 CVE 为 <a href="https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2020-1048">CVE-2020-1048</a>，归功于 <a href="https://safebreach.com/safebreach-labs">SafeBreach 实验室</a> 的 Peleg Hadar 和 Tomer Bar。修复后，Ionescu 被认定为 CVE-2020-1337，该漏洞仍然允许通过检查时间使用时间 (TOC&#x2F;TOU) 错误创建恶意端口，详细信息请参见<a href="https://twitter.com/aionescu/status/1293283013715951622">此处</a>。所有这些只是想说：是的，值得一看补丁。查看补丁还可以帮助您找到尚未被研究人员彻底分解的新功能，<a href="https://twitter.com/aionescu/status/1271098369788674051">这些新功能是漏洞研究的主要目标</a>。</p><h1 id="如何获取补丁以及Windows补丁包格式"><a href="#如何获取补丁以及Windows补丁包格式" class="headerlink" title="如何获取补丁以及Windows补丁包格式"></a><strong>如何获取补丁以及Windows补丁包格式</strong></h1><p>为了能够分解补丁，您首先需要了解补丁的格式以及如何获取它们。您实际上可能对用于打包补丁的文件格式有些熟悉：<code>.MSU</code>（Microsoft 独立更新）和 <code>.CAB</code>（Cabinet）。所有补丁均作为 Windows Update 的一部分分发到您的设备上，但您仍然可以从 <a href="https://www.catalog.update.microsoft.com/Home.aspx">Microsoft Update Catolog</a> 下载独立补丁。在这篇文章中，我将拆解 Windows 10 1903 x64 的补丁。很久以前，<span class="highlight">微软将每个月的第二个星期二定为“补丁星期二” </span>，这样补丁管理员就可以随时知道何时需要修复。在大多数情况下，他们坚持在补丁星期二发布更新，偶尔会针对<a href="https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2015/ms15-078">非常严重</a>的错误发布紧急补丁。Microsoft 过去提供必须按顺序安装的连续更新包。如今，更新以累积方式提供，这意味着基础版本 (.1) 所需的所有更新都包含在软件包中。这可以进行一些相当大的更新！许多更新都以<code>增量</code>形式分发，这让事情变得更复杂一些。我们将在本文后面深入讨论这一点。</p><h2 id="有效浏览-Microsoft-更新目录"><a href="#有效浏览-Microsoft-更新目录" class="headerlink" title="有效浏览 Microsoft 更新目录"></a><strong>有效浏览 Microsoft 更新目录</strong></h2><p>幸运的是，Microsoft 更新目录具有非常好的搜索功能。搜索所需更新的最有效方法是按以下格式搜索：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">YYYY-MM <span class="hljs-keyword">release</span>-number (<span class="hljs-keyword">x</span><span class="hljs-number">86</span>|<span class="hljs-keyword">x</span><span class="hljs-number">64</span>|ARM<span class="hljs-number">64</span>) cumulative<br></code></pre></td></tr></table></figure><p>例如，如果我正在寻找 Windows 10 1903 x64 的 2020 年 7 月补丁集，我将搜索 2020-07 1903 x64 累积，并且最热门的点击之一应该是我正在寻找的结果。</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/msupdate-search.png" alt="Relevant results are easy to get with the right search!"></p><p>如您所见，返回了几个不同版本号（1903、1909 和 2004）以及 Windows 10 和 Windows Server 的结果。敏锐的观察者应该注意到，Windows Server 和 Windows 10 更新的大小完全相同。事实上，如果您单击下载，两个链接都会定向到同一个地方。此外，1903和1909的更新也是相同的。后一种情况的原因在操作系统<a href="https://support.microsoft.com/en-us/help/4565483">构建页面</a>上进行了解释：</p><pre><code class="hljs">Windows 10 版本 1903 和 1909 共享一个通用的核心操作系统和一组相同的系统文件。因此，Windows 10 版本 1909 中的新功能包含在最近的 Windows 10 版本 1903 每月质量更新（2019 年 10 月 8 日发布）中，但目前处于休眠状态。这些新功能将保持休眠状态，直到使用启用包打开它们，启用包是一个小型、快速安装的“主开关”，只需激活 Windows 10 版本 1909 功能即可。</code></pre><h2 id="动态和服务堆栈更新"><a href="#动态和服务堆栈更新" class="headerlink" title="动态和服务堆栈更新"></a><strong>动态和服务堆栈更新</strong></h2><p>Microsoft 还通过 Microsoft 更新目录分发一些其他类型的更新。如果您在上面的搜索中省略“<code>cumulative(累积)</code>”一词，那么您会得到更多结果，包括比累积更新小得多的 <code>Dynamic(动态)</code> 和 <code>Servicing Stack(服务堆栈)</code> 更新。</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/msupdate-variations.png" alt="Different Kinds of Updates"></p><p><a href="https://docs.microsoft.com/en-us/windows/deployment/update/servicing-stack-updates">根据 Microsoft 文档</a>，服务堆栈更新是对 Windows 更新过程本身的更新。服务堆栈更新像累积更新一样打包，并且仅包含与 Windows Update 相关的组件。</p><p><a href="https://techcommunity.microsoft.com/t5/windows-it-pro-blog/the-benefits-of-windows-10-dynamic-update/ba-p/467847">Microsoft 文档</a> 再次为动态更新节省了时间，这显然还可以更新 Windows 更新组件，以及安装介质、Windows 恢复环境 (WinRE) 和一些驱动程序等安装组件。<span class="highlight"> 动态更新的打包方式与累积更新和服务堆栈更新略有不同；它们可以作为单个 CAB 文件下载，并具有各种语言包和其他安装组件</span>。</p><h1 id="提取补丁"><a href="#提取补丁" class="headerlink" title="提取补丁"></a><strong>提取补丁</strong></h1><p>补丁被紧密地打包到一个 MSU 文件中，该文件可以包含数以万计的文件，其中只有一些文件对我们作为安全研究人员来说很重要。我想首先完成手动提取，然后提供对现有脚本 (<code>PatchExtract.ps1</code>) 的更新，以自动提取和排序给定的补丁。</p><h2 id="手动提取"><a href="#手动提取" class="headerlink" title="手动提取"></a><strong>手动提取</strong></h2><p>首先，您需要从更新目录下载累积更新 MSU 文件。在本示例中，我使用 Windows 10 1903 x64 2020 年 8 月累积更新包。我通常在开始之前创建几个文件夹：我用补丁年份和月份命名顶级文件夹，然后创建两个子文件夹，分别称为 <code>patch</code> 和 <code>ext</code>。嵌套 CAB 文件内的实际补丁文件将放入 patch 文件夹中，解压的 MSU 的内容将放入 ext 文件夹中。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir <span class="hljs-number">2020</span><span class="hljs-literal">-08</span><br><span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;.\windows10.0-kb4565351-x64_e4f46f54ab78b4dd2dcef193ed573737661e5a10.msu&quot;</span> .\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\<br><span class="hljs-built_in">cd</span> .\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\<br>mkdir ext<br>mkdir patch<br></code></pre></td></tr></table></figure><p>接下来，我将使用 <code>Expand.exe</code> 命令提取 <code>MSU</code>。 Expand 的参数可以使用 <code>/?</code> 选项获取详细说明。出于我们的目的，我们将提取每个文件，因此我们将使用 <code>-F:*</code>。如果您只需要某些类型的文件（CAB、DLL、EXE 等），那么您可以使用 <code>-F</code> 标志来实现。接下来的两个参数是要提取的 MSU，然后是扩展文件的目标文件夹。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">expand.exe <span class="hljs-operator">-F</span>:* <span class="hljs-string">&quot;.\windows10.0-kb4565351-x64_e4f46f54ab78b4dd2dcef193ed573737661e5a10.msu&quot;</span> .\ext\<br></code></pre></td></tr></table></figure><p>最后，我将再次使用 <code>expand</code> 命令从PSFX cab文件中提取补丁文件，这次扩展到 <code>patch</code> 目录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">expand.exe <span class="hljs-operator">-F</span>:* <span class="hljs-string">&quot;.\ext\Windows10.0-KB4565351-x64_PSFX.cab&quot;</span> .\patch\ | <span class="hljs-built_in">Out-Null</span><br></code></pre></td></tr></table></figure><p>此时我建议走开，开始洗一堆衣服，买一个三明治，然后抚摸猫，因为这部分需要一段时间（10-20 分钟）。<code>Out-Null</code> 是可选的，我只使用它，因为我不关心它打印要提取的每个文件。这种特殊的提取大约需要 15 分钟（通过 <code>Measure-Command</code>），并在 <code>patch</code> 文件夹下总共产生了 <code>78898</code> 个文件和文件夹！</p><p>如果你在家也跟着做： 提取完成后，给自己鼓掌，然后收回它，因为不幸的是，这是最容易的部分！</p><p>接下来，您必须理解提取的文件并找到您正在寻找的修补文件。</p><h2 id="理解提取的文件"><a href="#理解提取的文件" class="headerlink" title="理解提取的文件"></a><strong>理解提取的文件</strong></h2><p>要找到您要查找的内容，了解补丁的结构以及您将遇到的文件类型会有所帮助。</p><p>要开始了解这些细节，请看一下从 MSU 开始的补丁的层次结构视图（输出缩写以节省空间）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs stylus">windows10.<span class="hljs-number">0</span>-kb4565351-x64_e4f46f54ab78b4dd2dcef193ed573737661e5a10<span class="hljs-selector-class">.msu</span><br>├── WSUSSCAN<span class="hljs-selector-class">.cab</span><br>├── Windows10.<span class="hljs-number">0</span>-KB4565351-x64-pkgProperties_PSFX<span class="hljs-selector-class">.txt</span><br>├── Windows10.<span class="hljs-number">0</span>-KB4565351-x64_PSFX<span class="hljs-selector-class">.xml</span><br>└── Windows10.<span class="hljs-number">0</span>-KB4565351-x64_PSFX<span class="hljs-selector-class">.cab</span><br>    ├── amd64_microsoft<span class="hljs-selector-class">.windows</span><span class="hljs-selector-class">.gdiplus_6595b64144ccf1df_1</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>_none_e013babca5ee7b0b<br>    │   └── gdiplus<span class="hljs-selector-class">.dll</span><br>    ├── amd64_microsoft-windows-os-kernel_31bf3856ad364e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>_none_79ea293316ee3bad<br>    │   ├── f<br>    │   │   └── ntoskrnl<span class="hljs-selector-class">.exe</span><br>    │   └── r<br>    │       └── ntoskrnl<span class="hljs-selector-class">.exe</span><br>    ├── msil_microsoft<span class="hljs-selector-class">.hyperv</span><span class="hljs-selector-class">.powershell</span><span class="hljs-selector-class">.cmdlets_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">959</span>_none_a7668eee2055cacf<br>    │   ├── f<br>    │   │   └── microsoft<span class="hljs-selector-class">.hyperv</span><span class="hljs-selector-class">.powershell</span><span class="hljs-selector-class">.cmdlets</span><span class="hljs-selector-class">.dll</span><br>    │   └── r<br>    │       └── microsoft<span class="hljs-selector-class">.hyperv</span><span class="hljs-selector-class">.powershell</span><span class="hljs-selector-class">.cmdlets</span><span class="hljs-selector-class">.dll</span><br>    ├── wow64_microsoft-windows-<span class="hljs-selector-tag">p</span>.<span class="hljs-selector-class">.ting-spooler-client_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">693</span>_none_f3229700ded2ae02<br>    │   ├── f<br>    │   │   └── winspool<span class="hljs-selector-class">.drv</span><br>    │   └── r<br>    │       └── winspool<span class="hljs-selector-class">.drv</span><br>    ├── x86_microsoft-windows-win32calc<span class="hljs-selector-class">.resources_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">387</span>_ar-sa_38566bf3d86fbe5c<br>    │   ├── f<br>    │   │   └── win32calc<span class="hljs-selector-class">.exe</span><span class="hljs-selector-class">.mui</span><br>    │   └── r<br>    │       └── win32calc<span class="hljs-selector-class">.exe</span><span class="hljs-selector-class">.mui</span><br>    ├── amd64_windows-shield-provider_31bf3856ad364e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">900</span>_none_fbf40d7d5ed8b490<br>    │   ├── f<br>    │   │   ├── featuretoastbulldogimg<span class="hljs-selector-class">.png</span><br>    │   │   ├── securityhealthagent<span class="hljs-selector-class">.dll</span><br>    │   │   ├── securityhealthhost<span class="hljs-selector-class">.exe</span><br>    │   │   ├── securityhealthproxystub<span class="hljs-selector-class">.dll</span><br>    │   │   ├── securityhealthservice<span class="hljs-selector-class">.exe</span><br>    │   │   ├── windowsdefendersecuritycenter<span class="hljs-selector-class">.admx</span><br>    │   │   └── windowssecurityicon<span class="hljs-selector-class">.png</span><br>    │   ├── n<br>    │   │   └── featuretoastdlpimg<span class="hljs-selector-class">.png</span><br>    │   └── r<br>    │       ├── featuretoastbulldogimg<span class="hljs-selector-class">.png</span><br>    │       ├── securityhealthagent<span class="hljs-selector-class">.dll</span><br>    │       ├── securityhealthhost<span class="hljs-selector-class">.exe</span><br>    │       ├── securityhealthproxystub<span class="hljs-selector-class">.dll</span><br>    │       ├── securityhealthservice<span class="hljs-selector-class">.exe</span><br>    │       ├── windowsdefendersecuritycenter<span class="hljs-selector-class">.admx</span><br>    │       └── windowssecurityicon<span class="hljs-selector-class">.png</span><br>    ├── microsoft-windows-kernel-feature-package~<span class="hljs-number">31</span>bf3856ad364e35~amd64~~<span class="hljs-number">10.0</span>.<span class="hljs-number">18362.1016</span><span class="hljs-selector-class">.cat</span><br>    ├── microsoft-windows-kernel-feature-package~<span class="hljs-number">31</span>bf3856ad364e35~amd64~~<span class="hljs-number">10.0</span>.<span class="hljs-number">18362.1016</span><span class="hljs-selector-class">.mum</span><br>    ├── amd64_microsoft-windows-os-kernel_31bf3856ad364e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>_none_79ea293316ee3bad<span class="hljs-selector-class">.manifest</span><br>    ├── amd64_microsoft<span class="hljs-selector-class">.windows</span><span class="hljs-selector-class">.gdiplus_6595b64144ccf1df_1</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>_none_e013babca5ee7b0b<span class="hljs-selector-class">.manifest</span><br>    ├── msil_microsoft<span class="hljs-selector-class">.hyperv</span><span class="hljs-selector-class">.powershell</span><span class="hljs-selector-class">.cmdlets_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">959</span>_none_a7668eee2055cacf<span class="hljs-selector-class">.manifest</span><br>    ├── wow64_microsoft-windows-<span class="hljs-selector-tag">p</span>.<span class="hljs-selector-class">.ting-spooler-client_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">693</span>_none_f3229700ded2ae02<span class="hljs-selector-class">.manifest</span><br>    ├── amd64_windows-shield-provider_31bf3856ad364e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">900</span>_none_fbf40d7d5ed8b490<span class="hljs-selector-class">.manifest</span><br>    └── x86_microsoft-windows-win32calc<span class="hljs-selector-class">.resources_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">387</span>_ar-sa_38566bf3d86fbe5c.manifest<br></code></pre></td></tr></table></figure><p>正如您在上面看到的，有许多不同的文件格式和文件夹类型：</p><ul><li><p>文件夹类型</p><ul><li><p>平台 - 更新中的所有文件夹都将以其中之一为前缀</p><ul><li><code>amd64</code> - 64-bit x86</li><li><code>x86</code> - 32-bit x86</li><li><code>wow64</code> - Windows (32-bit) On Windows 64-bit</li><li><code>msil</code> - Microsoft Intermediate Language (.NET)</li></ul></li><li><p>差异文件夹</p><ul><li><code>n</code> - Null differentials(无差异)</li><li><code>r</code> - Reverse differentials(向后差异)</li><li><code>f</code> - Forward differentials(向前差异)</li></ul></li></ul></li><li><p>文件类型</p><ul><li><code>manifest</code> -（几乎）1-1 与平台文件夹配对, 这些是 <a href="https://docs.microsoft.com/en-us/windows/win32/sbscs/manifest-files-reference">Windows Side-by-Side (WinSxS) 清单</a></li><li><code>cat</code> - security catalog</li><li><code>mum</code> - 1-1 paired with a .cat file and conatins metadata about the part of the update package that the security catalog applies to(1-1 与 .cat 文件配对，包含有关安全目录适用的更新包部分的元数据)</li></ul></li></ul><p>平台文件夹和清单实际上与 WinSxS 有关，因为系统可能在 <code>C:\Windows\WinSxS</code> 文件夹中存储二进制文件的多个版本以及差异文件。请注意，这些文件夹中不仅仅有 EXE 和 DLL。还有 PNG 和 MUI 文件。任何类型的文件都可以通过 Windows Update 和 WinSxS 进行更新。一些文件夹名称已被截断；看起来最大文件夹名称长度是100个字符，中间多余的字符被替换为<code>..</code></p><p>出于本文的目的，我将保留 .mum 和 .cat 文件，因为它们本质上只是元数据和签名验证信息。</p><h3 id="WinSxS-Manifests"><a href="#WinSxS-Manifests" class="headerlink" title="WinSxS Manifests"></a><strong>WinSxS Manifests</strong></h3><p>补丁中的 <code>.manifest</code> 文件<span class="highlight">描述了如何应用补丁、补丁中包含的文件、文件哈希形式的补丁的预期结果、结果文件的权限、要设置的注册表项以及更多的</span>。它们定义了除了替换正在更新的文件之外对系统产生的影响。</p><p>以下是 <code>Windows-Gaming-XboxLive-Storage-Service-Component</code>（无论是什么）的示例清单。</p><p>▼ amd64_windows-gaming-xbox..e-service-component_31bf3856ad364e35_10.0.18362.836_none_a949879e457dbcd4.manifest</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span> <span class="hljs-attr">manifestVersion</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">copyright</span>=<span class="hljs-string">&quot;Copyright (c) Microsoft Corporation. All Rights Reserved.&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">assemblyIdentity</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Windows-Gaming-XboxLive-Storage-Service-Component&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;10.0.18362.836&quot;</span> <span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">buildType</span>=<span class="hljs-string">&quot;release&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span> <span class="hljs-attr">discoverable</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">resourceType</span>=<span class="hljs-string">&quot;resources&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependentAssembly</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">assemblyIdentity</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Windows-Gaming-XboxLive-Storage-Service-Component.Resources&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;10.0.18362.836&quot;</span> <span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">buildType</span>=<span class="hljs-string">&quot;release&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependentAssembly</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">file</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;XblGameSave.dll&quot;</span> <span class="hljs-attr">destinationPath</span>=<span class="hljs-string">&quot;$(runtime.system32)\&quot;</span> <span class="hljs-attr">sourceName</span>=<span class="hljs-string">&quot;XblGameSave.dll&quot;</span> <span class="hljs-attr">importPath</span>=<span class="hljs-string">&quot;$(build.nttree)\&quot;</span> <span class="hljs-attr">sourcePath</span>=<span class="hljs-string">&quot;.\&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_FILE_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">asmv2:hash</span> <span class="hljs-attr">xmlns:asmv2</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v2&quot;</span> <span class="hljs-attr">xmlns:dsig</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:Transforms</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dsig:Transform</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:HashTransforms.Identity&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dsig:Transforms</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:DigestMethod</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#sha256&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:DigestValue</span>&gt;</span>VjbzeELS2YXIwIhHo5f2hQm+pWTzHY8wo7dFxzfkbtA=<span class="hljs-tag">&lt;/<span class="hljs-name">dsig:DigestValue</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">asmv2:hash</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">file</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;XblGameSaveTask.exe&quot;</span> <span class="hljs-attr">destinationPath</span>=<span class="hljs-string">&quot;$(runtime.system32)\&quot;</span> <span class="hljs-attr">sourceName</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">importPath</span>=<span class="hljs-string">&quot;$(build.nttree)\&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_FILE_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">asmv2:hash</span> <span class="hljs-attr">xmlns:asmv2</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v2&quot;</span> <span class="hljs-attr">xmlns:dsig</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:Transforms</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dsig:Transform</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:HashTransforms.Identity&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dsig:Transforms</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:DigestMethod</span> <span class="hljs-attr">Algorithm</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/09/xmldsig#sha256&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dsig:DigestValue</span>&gt;</span>Ez9Rg7QMg26whoQcakH4i15oeH1NOZgbybxRdPMoi8Q=<span class="hljs-tag">&lt;/<span class="hljs-name">dsig:DigestValue</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">asmv2:hash</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">memberships</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">categoryMembership</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft.Windows.Categories.Services&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;10.0.18362.836&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> <span class="hljs-attr">typeName</span>=<span class="hljs-string">&quot;Service&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">categoryInstance</span> <span class="hljs-attr">subcategory</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">serviceData</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span> <span class="hljs-attr">displayName</span>=<span class="hljs-string">&quot;@%systemroot%\system32\XblGameSave.dll,-100&quot;</span> <span class="hljs-attr">errorControl</span>=<span class="hljs-string">&quot;normal&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;demand&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;win32ShareProcess&quot;</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;@%systemroot%\system32\XblGameSave.dll,-101&quot;</span> <span class="hljs-attr">dependOnService</span>=<span class="hljs-string">&quot;UserManager,XblAuthManager&quot;</span> <span class="hljs-attr">imagePath</span>=<span class="hljs-string">&quot;%SystemRoot%\system32\svchost.exe -k netsvcs -p&quot;</span> <span class="hljs-attr">objectName</span>=<span class="hljs-string">&quot;LocalSystem&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">failureActions</span> <span class="hljs-attr">resetPeriod</span>=<span class="hljs-string">&quot;86400&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;10000&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;restartService&quot;</span> /&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;10000&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;restartService&quot;</span> /&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;10000&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;restartService&quot;</span> /&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">failureActions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">serviceTrigger</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-attr">subtype</span>=<span class="hljs-string">&quot;RPC_INTERFACE_EVENT&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;NetworkEndpointEvent&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">triggerData</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;F6C98708-C7B8-4919-887C-2CE66E78B9A0&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">serviceTrigger</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">serviceData</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">categoryInstance</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">categoryMembership</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">categoryMembership</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft.Windows.Categories&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0.0&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;365143bb27e7ac8b&quot;</span> <span class="hljs-attr">typeName</span>=<span class="hljs-string">&quot;BootRecovery&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">categoryMembership</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">categoryMembership</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft.Windows.Categories&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0.0&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;365143bb27e7ac8b&quot;</span> <span class="hljs-attr">typeName</span>=<span class="hljs-string">&quot;SvcHost&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">categoryInstance</span> <span class="hljs-attr">subcategory</span>=<span class="hljs-string">&quot;netsvcs&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">serviceGroup</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;last&quot;</span> <span class="hljs-attr">serviceName</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">categoryInstance</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">categoryMembership</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">memberships</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">taskScheduler</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Task</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/windows/2004/02/mit/task&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">RegistrationInfo</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span>Microsoft<span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Description</span>&gt;</span>XblGameSave Standby Task<span class="hljs-tag">&lt;/<span class="hljs-name">Description</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">URI</span>&gt;</span>\Microsoft\XblGameSave\XblGameSaveTask<span class="hljs-tag">&lt;/<span class="hljs-name">URI</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">RegistrationInfo</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Principals</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Principal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;LocalSystem&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">UserId</span>&gt;</span>S-1-5-18<span class="hljs-tag">&lt;/<span class="hljs-name">UserId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Principal</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Principals</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Triggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">IdleTrigger</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;XblGameSave Check on CS Entry&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">Enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">IdleTrigger</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Triggers</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MultipleInstancesPolicy</span>&gt;</span>IgnoreNew<span class="hljs-tag">&lt;/<span class="hljs-name">MultipleInstancesPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DisallowStartIfOnBatteries</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">DisallowStartIfOnBatteries</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">StopIfGoingOnBatteries</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">StopIfGoingOnBatteries</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">AllowHardTerminate</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">AllowHardTerminate</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">StartWhenAvailable</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">StartWhenAvailable</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RunOnlyIfNetworkAvailable</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">RunOnlyIfNetworkAvailable</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">AllowStartOnDemand</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">AllowStartOnDemand</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Hidden</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">Hidden</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RunOnlyIfIdle</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">RunOnlyIfIdle</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">WakeToRun</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">WakeToRun</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ExecutionTimeLimit</span>&gt;</span>PT2H<span class="hljs-tag">&lt;/<span class="hljs-name">ExecutionTimeLimit</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Priority</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">Priority</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Settings</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Actions</span> <span class="hljs-attr">Context</span>=<span class="hljs-string">&quot;LocalSystem&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Exec</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Command</span>&gt;</span>%windir%\System32\XblGameSaveTask.exe<span class="hljs-tag">&lt;/<span class="hljs-name">Command</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Arguments</span>&gt;</span>standby<span class="hljs-tag">&lt;/<span class="hljs-name">Arguments</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Exec</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Actions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Task</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">taskScheduler</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">registryKeys</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Ubpm&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CriticalTask_XblGameSaveTask&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;NT TASK\Microsoft\XblGameSave\XblGameSaveTask&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CriticalTask_XblGameSaveTaskLogon&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;NT TASK\Microsoft\XblGameSave\XblGameSaveTaskLogon&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_CLASSES_ROOT\AppId\&#123;C5D3C0E1-DC41-4F83-8BA8-CC0D46BCCDE3&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Xbox Live Game Saves&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LocalService&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AccessPermission&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_BINARY&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;010014806400000070000000140000003000000002001c000100000011001400040000000101000000000010001000000200340002000000000018001f000000010200000000000f0200000001000000000014001f00000001010000000000010000000001010000000000050a00000001020000000000052000000021020000&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LaunchPermission&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_BINARY&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;010014806400000070000000140000003000000002001c000100000011001400040000000101000000000010001000000200340002000000000018001f000000010200000000000f0200000001000000000014001f00000001010000000000010000000001010000000000050a00000001020000000000052000000021020000&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\XblGameSave\Parameters&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ServiceDll&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_EXPAND_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%SystemRoot%\System32\XblGameSave.dll&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ServiceDllUnloadOnStop&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_DWORD&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0x00000001&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ServiceIdleTimeout&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_DWORD&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0x00000258&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_CLASSES_ROOT\CLSID\&#123;F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4&#125;\&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppId&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;C5D3C0E1-DC41-4F83-8BA8-CC0D46BCCDE3&#125;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsRuntime\AllowedCOMCLSIDs\&#123;F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4&#125;\&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_CLASSES_ROOT\CLSID\&#123;5B3E6773-3A99-4A3D-8096-7765DD11785C&#125;\&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">registryValue</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppId&quot;</span> <span class="hljs-attr">valueType</span>=<span class="hljs-string">&quot;REG_SZ&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;C5D3C0E1-DC41-4F83-8BA8-CC0D46BCCDE3&#125;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">registryKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">registryKey</span> <span class="hljs-attr">keyName</span>=<span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsRuntime\AllowedCOMCLSIDs\&#123;5B3E6773-3A99-4A3D-8096-7765DD11785C&#125;\&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">registryKeys</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localization</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span> <span class="hljs-attr">culture</span>=<span class="hljs-string">&quot;en-US&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">stringTable</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;displayName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;XblGameSave&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;XblGameSave service&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">stringTable</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">localization</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">trustInfo</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">accessControl</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptorDefinitions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptorDefinition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_REGKEY_DEFAULT_SDDL&quot;</span> <span class="hljs-attr">sddl</span>=<span class="hljs-string">&quot;O:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464G:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464D:P(A;CI;GA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;CI;GR;;;SY)(A;CI;GR;;;BA)(A;CI;GR;;;BU)(A;CI;GR;;;S-1-15-2-1)(A;CI;GR;;;S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681)&quot;</span> <span class="hljs-attr">operationHint</span>=<span class="hljs-string">&quot;replace&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">securityDescriptorDefinition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WRP_FILE_DEFAULT_SDDL&quot;</span> <span class="hljs-attr">sddl</span>=<span class="hljs-string">&quot;O:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464G:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464D:P(A;;FA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;;GRGX;;;BA)(A;;GRGX;;;SY)(A;;GRGX;;;BU)(A;;GRGX;;;S-1-15-2-1)(A;;GRGX;;;S-1-15-2-2)S:(AU;FASA;0x000D0116;;;WD)&quot;</span> <span class="hljs-attr">operationHint</span>=<span class="hljs-string">&quot;replace&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">securityDescriptorDefinitions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">accessControl</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">security</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">trustInfo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意所有不同的字段。有一些字段可以修改注册表项、更改文件权限、要修补的文件及其生成的哈希值、要修改或更改状态的服务、要添加或更改的计划任务等等！</p><p>如果您查看此清单描述的相应平台文件夹，您将找到它所引用的文件，可以是完整文件，也可以是（在本例中）差异文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; <span class="hljs-built_in">ls</span> <span class="hljs-literal">-Recurse</span> amd64_windows<span class="hljs-literal">-gaming-xbox</span>..e<span class="hljs-literal">-service-component_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">836</span>_none_a949879e457dbcd4<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Directory: C:\Users\wumb0\Desktop\patches\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\patch\amd64_windows<span class="hljs-literal">-gaming-xbox</span>..e<span class="hljs-literal">-service-component_31bf3856ad36</span><br>    <span class="hljs-number">4</span>e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">836</span>_none_a949879e457dbcd4<br><br><br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br>d<span class="hljs-literal">-----</span>         <span class="hljs-number">8</span>/<span class="hljs-number">23</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">6</span>:<span class="hljs-number">50</span> PM                f<br>d<span class="hljs-literal">-----</span>         <span class="hljs-number">8</span>/<span class="hljs-number">23</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">6</span>:<span class="hljs-number">50</span> PM                <span class="hljs-built_in">r</span><br><br><br>    Directory: C:\Users\wumb0\Desktop\patches\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\patch\amd64_windows<span class="hljs-literal">-gaming-xbox</span>..e<span class="hljs-literal">-service-component_31bf3856ad36</span><br>    <span class="hljs-number">4</span>e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">836</span>_none_a949879e457dbcd4\f<br><br><br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>          <span class="hljs-number">8</span>/<span class="hljs-number">6</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">5</span>:<span class="hljs-number">10</span> AM          <span class="hljs-number">35111</span> xblgamesave.dll<br><span class="hljs-literal">-a----</span>          <span class="hljs-number">8</span>/<span class="hljs-number">6</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">5</span>:<span class="hljs-number">10</span> AM            <span class="hljs-number">237</span> xblgamesavetask.exe<br><br><br>    Directory: C:\Users\wumb0\Desktop\patches\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\patch\amd64_windows<span class="hljs-literal">-gaming-xbox</span>..e<span class="hljs-literal">-service-component_31bf3856ad36</span><br>    <span class="hljs-number">4</span>e35_10.<span class="hljs-number">0.18362</span>.<span class="hljs-number">836</span>_none_a949879e457dbcd4\r<br><br><br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>          <span class="hljs-number">8</span>/<span class="hljs-number">6</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">5</span>:<span class="hljs-number">10</span> AM          <span class="hljs-number">35200</span> xblgamesave.dll<br><span class="hljs-literal">-a----</span>          <span class="hljs-number">8</span>/<span class="hljs-number">6</span>/<span class="hljs-number">2020</span>   <span class="hljs-number">5</span>:<span class="hljs-number">10</span> AM            <span class="hljs-number">237</span> xblgamesavetask.exe<br></code></pre></td></tr></table></figure><p>注：<code>ls -Recurse</code> 递归显示目录内容</p><h2 id="自动补丁提取"><a href="#自动补丁提取" class="headerlink" title="自动补丁提取"></a><strong>自动补丁提取</strong></h2><p>现在您已经了解了补丁的结构以及如何从中提取文件，现在是时候在混合中引入一些自动化了。Greg Linares (@laughing_mantis) 是 <a href="https://twitter.com/laughing_mantis/status/842100719385698305">Patch Extract</a> 的作者，一个自动提取和组织 Microsoft 补丁的工具。他还创建了一个名为 <a href="https://twitter.com/Laughing_Mantis/status/789346238122426368">Patch Clean</a> 的工具，但我不确定它是否仍然适用于现代补丁，所以使用后果自负！我稍微修改了 PatchExtract 以修复一些 powershell 问题并安静脚本的输出。请注意，它现在在用户输入字符串上使用 <code>IEX</code>，所以要小心:)。</p><p>PatchExtract.ps1:</p><script src="https://gist.github.com/wumb0/306f97dc8376c6f53b9f9865f60b4fb5.js"></script><p>要使用，请指定 <code>PATCH</code> 的路径和结果文件的输出 <code>PATH</code>。 <code>PatchClean</code> 将提取 MSU，找到 <code>PSFX</code> <code>CAB</code>，提取其内容，并将提取的补丁分类到各个文件夹中：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; <span class="hljs-built_in">ls</span> X:\Patches\x64\<span class="hljs-number">1903</span>\<span class="hljs-number">2019</span>\<span class="hljs-number">9</span><br><br><br>    Directory: X:\Patches\x64\<span class="hljs-number">1903</span>\<span class="hljs-number">2019</span>\<span class="hljs-number">9</span><br><br><br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">30</span> PM                JUNK<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">30</span> PM                MSIL<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">32</span> PM                PATCH<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">31</span> PM                WOW64<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">7</span>:<span class="hljs-number">06</span> PM                x64<br>da<span class="hljs-literal">----</span>         <span class="hljs-number">11</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">31</span> PM                x86<br><span class="hljs-literal">-a----</span>          <span class="hljs-number">9</span>/<span class="hljs-number">8</span>/<span class="hljs-number">2019</span>  <span class="hljs-number">12</span>:<span class="hljs-number">28</span> PM            <span class="hljs-number">517</span> Windows10.<span class="hljs-number">0</span><span class="hljs-literal">-KB4515384-x64-pkgProperties_PSFX</span>.txt<br></code></pre></td></tr></table></figure><p>MSIL、WOW64、x86 和 x64 文件夹将包含所有不同平台文件夹，并删除其前缀。 PATCH 文件夹将包含补丁 MSU 及其内容，但补丁 PSFX 元数据文本文件除外，该文件保留在顶级文件夹的根目录中。最后，JUNK 文件夹中填充了 .manifest 文件以及我们并不真正关心的 .mum 和 .cat 文件。使用此工具可以加快补丁提取过程！</p><h3 id="处理提取的补丁"><a href="#处理提取的补丁" class="headerlink" title="处理提取的补丁"></a><strong>处理提取的补丁</strong></h3><p>提取补丁时请注意：始终在本地计算机上进行，压缩结果，然后传输到另一台计算机进行存储。未压缩的解压补丁大约为 1.5 GB，压缩的解压补丁大约为 1 GB。这可以快速填满您的磁盘空间！由于每个补丁中有数万个文件，未压缩的目录结构的传输将需要很长时间。如果您需要搜索压缩补丁，您只需使用 unzip -l 列出内容，然后仅提取您需要的文件。</p><h1 id="补丁文件类型"><a href="#补丁文件类型" class="headerlink" title="补丁文件类型"></a><strong>补丁文件类型</strong></h1><h2 id="完整文件"><a href="#完整文件" class="headerlink" title="完整文件"></a><strong>完整文件</strong></h2><p>不含 <code>n</code>、<code>f</code> 或 <code>r</code> 目录的平台文件夹包含要安装的完整文件。修补过程非常简单，只需将该文件夹中的文件复制到相应 <code>.manifest</code> 文件中指定的位置即可。</p><p>您如何获得该文件的另一个副本来进行比较？这可能很困难，但您也许可以查看以前的补丁以获取不同的版本。事实证明，差速器实际上是更方便的情况！</p><h2 id="补丁增量"><a href="#补丁增量" class="headerlink" title="补丁增量"></a><strong>补丁增量</strong></h2><p>当平台文件夹中包含 <code>n</code>、<code>f</code> 或 <code>r</code> 目录时，补丁是一个增量，它要么应用于现有文件 <code>(r/f)</code>，要么应用于空缓冲区以创建新文件 <code>(n)</code>。微软在今年（2020）年初发布了关于差异化的<a href="https://docs.microsoft.com/en-us/windows/deployment/update/psfxwhitepaper">白皮书</a>。</p><h3 id="增量类型"><a href="#增量类型" class="headerlink" title="增量类型"></a><strong>增量类型</strong></h3><p>如前所述，增量分为三种类型：</p><ul><li><p><code>Forward differentials (f)</code> - 将基本二进制文件 (.1) 提升到特定补丁级别</p></li><li><p><code>Reverse differentials (r)</code> - 将应用的补丁恢复为基本二进制文件 (.1)</p></li><li><p><code>Null differentials (n)</code> - 一个全新的文件，刚刚压缩；应用于空缓冲区以获取完整文件</p></li></ul><p>您将始终在补丁内看到 r 和 f 文件夹，因为您需要能够稍后恢复补丁以应用较新的更新。</p><h3 id="Delta-APIs"><a href="#Delta-APIs" class="headerlink" title="Delta APIs"></a><strong>Delta APIs</strong></h3><p>在我开始深入研究 Delta 格式并将其应用于文件之前，值得注意的是 Microsoft 提供了有关 <a href="https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)">Delta Compression API</a> 的开发人员文档（稍微过时，但仍然相关）。实际上有两个完全不同的 API 用于创建和应用补丁增量：<a href="https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)#patchapi">PatchAPI</a> 和 <a href="https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)#msdelta">MSDELTA</a>。在这篇文章中，我将重点关注 MSDELTA API，因为它较新，并且仅在正在发布的新补丁中使用。此外，如果您调用 MSDELTA API 并提供 PatchAPI 修补程序文件，它会识别该文件并通过调用 <code>mspatcha.dll</code> 来应用修补程序。</p><p>MSDELTA API 中的函数包含在 msdelta.dll 内。</p><ul><li><code>CreateDelta(A|W|B)</code> - 从文件 (A|W) 或缓冲区 (B) 创建增量</li><li><code>ApplyDelta(A|W|B)</code> - 将增量从文件应用到文件 (A|W) 或从缓冲区 (B) 应用到缓冲区 (B)</li><li><code>ApplyDeltaProvidedB</code> - 将缓冲区中的增量应用到被调用者分配的提供的缓冲区（无需调用 <code>DeltaFree</code>）</li><li><code>GetDeltaInfo(A|W|B)</code> - 获取有关补丁的元数据并计算增量文件 (A|W) 或缓冲区 (B) 的签名</li><li><code>GetDeltaSignature(A|W|B)</code> - 计算增量文件 (A|W) 或缓冲区 (B) 的签名。</li><li><code>DeltaNormalizeProvidedB</code> - 将增量缓冲区置于标准状态，以便通过 MSDELTA 不支持的算法进行哈希处理</li><li><code>DeltaFree</code> - 释放由 <code>CreateDeltaB</code> 或 <code>ApplyDeltaB</code> 创建的增量缓冲区</li></ul><p>我将使用 <code>ApplyDeltaB</code> 将多个补丁增量文件应用到文件缓冲区，然后使用 <code>DeltaFree</code> 释放生成的缓冲区。更仔细地查看 <code>GetDeltaInfo*</code> 和 <code>DeltaNormalizeProvidedB</code> 都在我的 TODO 列表中，但对于本文的目的来说并不是那么重要。</p><p>MSDELTA API 的其他有趣功能是能够通过文件类型集将增量应用到<a href="https://docs.microsoft.com/en-us/previous-versions/bb417345(v=msdn.10)#file-type-sets">特定的二进制部分</a>。这些背后还有更多的研究要做！</p><h3 id="Delta-Formats"><a href="#Delta-Formats" class="headerlink" title="Delta Formats"></a><strong>Delta Formats</strong></h3><p>乍一看，您会确信补丁内的增量文件夹中的文件是完整的二进制文件，因为它们的扩展名。第一个线索是它们的大小，因为它们比您预期的完整二进制文件要小得多。另一个是文件格式完全不同！在十六进制编辑器中打开一些提取的文件很快就会显示这一点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">wumb0 <span class="hljs-keyword">in</span> patches$ xxd 2020-08/patch/amd64_microsoft-windows-os-kernel_31bf3856ad364e35_10.0.18362.1016_none_79ea293316ee3bad/f/ntoskrnl.exe | <span class="hljs-built_in">head</span><br>00000000: e45a 9bd5 5041 3330 6e2b 8720 fa6a d601  .Z..PA30n+. .j..<br>00000010: b05e 10d0 c7c4 0cc4 69bc c401 4021 00b4  .^......i...@!..<br>00000020: ab4f 2159 0f6a 2ab4 7848 f5df d9cd 2fb8  .O!Y.j*.xH..../.<br>00000030: b30b 0400 0000 0a00 0000 0000 0000 9836  ...............6<br>00000040: 86a9 cb02 f05b dddd dddd dddd dddd dddd  .....[..........<br>00000050: dd2d 4dd2 333d d143 3dd4 ddd3 0128 c6c4  .-M.3=.C=....(..<br>00000060: cccc cccc cccc cccc c31c 22c2 cccc 3c2c  ..........<span class="hljs-string">&quot;...&lt;,</span><br><span class="hljs-string">00000070: cccc ccc3 7280 3000 d07f 0700 a8ff 1700  ....r.0.........</span><br><span class="hljs-string">00000080: fc7f 00a0 ff03 80fc 5f00 90ff 0c00 ecfc  ........_.......</span><br><span class="hljs-string">00000090: 8701 60e5 ff19 1100 7cff 5f00 f8ff 0080  ..`.....|._.....</span><br><span class="hljs-string"></span><br><span class="hljs-string">wumb0 in patches$ xxd 2020-08/patch/amd64_microsoft-onecore-reverseforwarders_31bf3856ad364e35_10.0.18362.997_none_f7e8eb88fe7a4f39/r/gdi32.dll | head</span><br><span class="hljs-string">00000000: db07 a73a 5041 3330 f494 3566 d8dd d401  ...:PA30..5f....</span><br><span class="hljs-string">00000010: b05e 10d0 c7c4 0c02 6006 0e00 0a01 5d41  .^......`.....]A</span><br><span class="hljs-string">00000020: 1606 6042 f2b4 03a7 1295 36ee fbe7 2e01  ..`B......6.....</span><br><span class="hljs-string">00000030: 0100 0000 0c00 0000 0000 0000 b0b4 5e9e  ..............^.</span><br><span class="hljs-string">00000040: 0802 402d aaaa aaaa aaaa aaaa aaaa aa0a  ..@-............</span><br><span class="hljs-string">00000050: aaaa 2aa2 0117 dba2 aaaa aaaa aaaa aaaa  ..*.............</span><br><span class="hljs-string">00000060: a2a2 111a c900 f87f 03c0 fd17 00e4 ff00  ................</span><br><span class="hljs-string">00000070: f8ff 00d0 3f00 fa1f 00ff 0fd6 00b3 0340  ....?..........@</span><br><span class="hljs-string">00000080: 20ee ea69 7500 00d8 1069 a703 f54e 5d0f   ..iu....i...N].</span><br><span class="hljs-string">00000090: d301 2557 07ec 681d 9a0f caa7 03b5 c81a  ..%W..h.........</span><br><span class="hljs-string"></span><br><span class="hljs-string">wumb0 in patches$ xxd 2020-08/patch/amd64_microsoft-windows-f..ysafety-refreshtask_31bf3856ad364e35_10.0.18362.997_none_b453df19f80f8d5b/f/wpcmon.png | head</span><br><span class="hljs-string">00000000: 400b 0a1a 5041 3330 008b e980 ac49 d601  @...PA30.....I..</span><br><span class="hljs-string">00000010: b07e 4000 00c3 2709 1c00 1402 c30c 6217  .~@...&#x27;.......b.</span><br><span class="hljs-string">00000020: 48c6 6ce7 51b1 9b27 8855 9a3e 010b b103  H.l.Q..&#x27;.U.&gt;....</span><br><span class="hljs-string">00000030: 003c 12               </span><br></code></pre></td></tr></table></figure><p>这些不是 PE 或 PNG 文件，并且出现了一种清晰的模式！<code>PA30</code> 在每个文件中从偏移量 <code>4</code> 开始，无论类型是什么。但是前四个字节是什么？在我最初尝试使用 delta 时，我感到很沮丧，因为使用 <code>msdelta.dll</code> 中的任何 <code>ApplyDelta*</code> 函数都会导致错误。对文件格式（PA30）的研究最终使我获得了该技术的<a href="https://patents.google.com/patent/US20070260653">专利</a>，如果您想看一下，这很有趣，但没有为我的问题提供答案。在真正的 <a href="https://www.urbandictionary.com/define.php?term=FILDI">FILDI</a> 时刻，我只是切断了前四个字节，因为文件magic通常位于文件的开头（对吗？），令我惊讶的是，增量应用了！太棒了，那 4 个字节是多少？该格式是否记录在任何地方？在思考了我之前遇到的文件中看似无用的字节之后，我想到了一个校验和，特别是我能想到的最常见的 4 字节校验和：<code>CRC32！</code>所以我跳进 <code>ipython</code> 来尝试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> zlib<br><br>In [<span class="hljs-number">2</span>]: data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;2020-08/patch/amd64_microsoft-windows-f..ysafety-refreshtask_31bf3856ad364e35_10.0.18362.997_none_</span><br><span class="hljs-string">   ...: b453df19f80f8d5b/f/wpcmon.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-built_in">hex</span>(zlib.crc32(data[<span class="hljs-number">4</span>:]))<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">&#x27;0x1a0a0b40&#x27;</span><br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>.from_bytes(data[:<span class="hljs-number">4</span>], <span class="hljs-string">&#x27;little&#x27;</span>))<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-string">&#x27;0x1a0a0b40&#x27;</span><br></code></pre></td></tr></table></figure><p>我的怀疑得到了证实！完全是一个幸运的猜测，而且我能找到的任何地方都没有记录它。</p><p>在经历了这个发现之后，我认为这将是一个有趣的 CTF 挑战。所以我为一年一度的 <a href="http://sparsa.rip/">RITSEC CTF</a> 设计了一个 CTF 挑战赛。它应该被称为 <code>patch-tuesday</code>，但我不小心上传了带有该标志的原始 <code>.sys</code> 文件。该挑战最终被称为 patch-2sday，涉及调用 MSDELTA API 在剥离前置的 CRC32 后修补文件。感谢<a href="https://twitter.com/layle_ctf">莱尔</a>和元娜是仅有的两个解决了这个问题的人！您可以在 <a href="https://github.com/ritsec/RITSEC-CTF-2019/tree/master/Misc/patch-tuesday">RITSEC Github</a> 上找到该挑战的解决方案的文章；如果您对此感兴趣，该存储库还包含我用来<a href="https://github.com/ritsec/RITSEC-CTF-2019/blob/master/Misc/patch-tuesday/make_delta.py">创建增量的脚本</a>。</p><h3 id="从-Delta-中生成有用的二进制文件"><a href="#从-Delta-中生成有用的二进制文件" class="headerlink" title="从 Delta 中生成有用的二进制文件"></a><strong>从 Delta 中生成有用的二进制文件</strong></h3><p>假设我有一台 Windows 10 1903 x64 计算机，我想查看 2020 年 <a href="https://support.microsoft.com/en-us/help/4565483">7</a> 月至 <a href="https://support.microsoft.com/en-us/help/4565351_">8</a> 月 ntoskrnl.exe 之间的差异。该机器当前安装了 <a href="https://support.microsoft.com/en-us/help/4524147/windows-10-update-kb4524147_">2019 年 10 月</a>的补丁。我将从 <code>C:\windows\system32</code> 中复制 ntoskrnl.exe 二进制文件，并使用 MSDELTA API 将增量应用于二进制文件以获得我想要的版本。</p><h4 id="后退，然后前进"><a href="#后退，然后前进" class="headerlink" title="后退，然后前进"></a><strong>后退，然后前进</strong></h4><p>我拥有的内核二进制文件的版本是 10.0.18362.388。在开始修补之前，我需要此特定版本的反向差分将其回滚到版本 10.0.18362.1。我可以下载并提取 2019 年 10 月更新，但这需要很长时间。回想一下，安装补丁后，Windows Update 会将二进制文件和差异文件放置在 <code>C:\Windows\WinSxS</code> 目录中。您可以运行一些 powershell 来查找系统上已有的增量：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; <span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-Recurse</span> C:\windows\WinSxS\ | ? &#123;<span class="hljs-variable">$_</span>.Name <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;ntoskrnl.exe&quot;</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs powershell"> Directory:<br>    C:\windows\WinSxS\amd64_microsoft<span class="hljs-literal">-windows-os-kernel_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">388</span>_none_c1e023dc45da9936<br><br>Mode                LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a---l</span>        <span class="hljs-number">10</span>/<span class="hljs-number">4</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">06</span> AM        <span class="hljs-number">9928720</span> ntoskrnl.exe<br><br><br>    Directory:<br>    C:\windows\WinSxS\amd64_microsoft<span class="hljs-literal">-windows-os-kernel_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">388</span>_none_c1e023dc45da9936\f<br><br><br>Mode                LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>        <span class="hljs-number">9</span>/<span class="hljs-number">30</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">39</span> PM         <span class="hljs-number">479646</span> ntoskrnl.exe<br><br><br>    Directory:<br>    C:\windows\WinSxS\amd64_microsoft<span class="hljs-literal">-windows-os-kernel_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">388</span>_none_c1e023dc45da9936\r<br><br><br>Mode                LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>        <span class="hljs-number">9</span>/<span class="hljs-number">30</span>/<span class="hljs-number">2019</span>   <span class="hljs-number">6</span>:<span class="hljs-number">39</span> PM         <span class="hljs-number">476929</span> ntoskrnl.exe<br></code></pre></td></tr></table></figure><p>完整版本以及前进和后退差速器都存在。现在我拥有执行增量所需的所有文件并获取我想要比较的两个版本的内核！</p><h4 id="使用-MSDELTA-API-应用补丁增量"><a href="#使用-MSDELTA-API-应用补丁增量" class="headerlink" title="使用 MSDELTA API 应用补丁增量"></a><strong>使用 MSDELTA API 应用补丁增量</strong></h4><p>我决定编写一个 python 程序来与 <code>msdelta.dll</code> 交互并调用 <code>ApplyDelta</code> 系列函数。如果您以前从未使用过 python <code>ctypes</code>，那么该脚本一开始可能看起来有点奇怪，但我保证它是您实用工具带中的一个非常强大的工具。除此之外，ctypes 可以充当 C 的<a href="https://en.wikipedia.org/wiki/Foreign_function_interface">外部函数</a>接口；它允许您调用 DLL 内部的函数、创建结构和联合、原始缓冲区，并实现了许多基本类型，例如 <code>c_uint64</code>、<code>c_char_p</code>,以及 Windows 类型，例如 <code>DWORD</code>、<code>HANDLE</code> 和 <code>LPVOID</code>。</p><p>如果您对 ctypes 的更多用途感兴趣，请查看我关于<a href="https://wumb0.in/a-better-way-to-work-with-raw-data-types-in-python.html">有效使用 ctypes 结构的文章</a>，但请记住它是为 python 2.7 编写的，并且可能需要更改示例以支持 python 3。</p><p>下面是为 python 3 编写的最终补丁增量应用脚本（单击文件名展开）。它使用所有 python 内置函数，您需要在 Windows 系统上运行它，因为它导入 <code>msdelta.dll</code> 并使用 <code>ApplyDeltaB</code> 来应用补丁。它甚至支持旧版 PatchAPI 补丁 (<code>PA19</code>)。</p><p><a href="https://gist.github.com/wumb0/9542469e3915953f7ae02d63998d2553#file-delta_patch-py">delta_patch.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> (windll, wintypes, c_uint64, cast, POINTER, <span class="hljs-type">Union</span>, c_ubyte,<br>                    LittleEndianStructure, byref, c_size_t)<br><span class="hljs-keyword">import</span> zlib<br><br><br><span class="hljs-comment"># types and flags</span><br>DELTA_FLAG_TYPE             = c_uint64<br>DELTA_FLAG_NONE             = <span class="hljs-number">0x00000000</span><br>DELTA_APPLY_FLAG_ALLOW_PA19 = <span class="hljs-number">0x00000001</span><br><br><br><span class="hljs-comment"># structures</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DELTA_INPUT</span>(<span class="hljs-title class_ inherited__">LittleEndianStructure</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">U1</span>(<span class="hljs-title class_ inherited__">Union</span>):<br>        _fields_ = [(<span class="hljs-string">&#x27;lpcStart&#x27;</span>, wintypes.LPVOID),<br>                    (<span class="hljs-string">&#x27;lpStart&#x27;</span>, wintypes.LPVOID)]<br>    _anonymous_ = (<span class="hljs-string">&#x27;u1&#x27;</span>,)<br>    _fields_ = [(<span class="hljs-string">&#x27;u1&#x27;</span>, U1),<br>                (<span class="hljs-string">&#x27;uSize&#x27;</span>, c_size_t),<br>                (<span class="hljs-string">&#x27;Editable&#x27;</span>, wintypes.BOOL)]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DELTA_OUTPUT</span>(<span class="hljs-title class_ inherited__">LittleEndianStructure</span>):<br>    _fields_ = [(<span class="hljs-string">&#x27;lpStart&#x27;</span>, wintypes.LPVOID),<br>                (<span class="hljs-string">&#x27;uSize&#x27;</span>, c_size_t)]<br><br><br><span class="hljs-comment"># functions</span><br>ApplyDeltaB = windll.msdelta.ApplyDeltaB<br>ApplyDeltaB.argtypes = [DELTA_FLAG_TYPE, DELTA_INPUT, DELTA_INPUT,<br>                        POINTER(DELTA_OUTPUT)]<br>ApplyDeltaB.rettype = wintypes.BOOL<br>DeltaFree = windll.msdelta.DeltaFree<br>DeltaFree.argtypes = [wintypes.LPVOID]<br>DeltaFree.rettype = wintypes.BOOL<br>gle = windll.kernel32.GetLastError<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_patchfile_to_buffer</span>(<span class="hljs-params">buf, buflen, patchpath, legacy</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(patchpath, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> patch:<br>        patch_contents = patch.read()<br><br>    <span class="hljs-comment"># most (all?) patches (Windows Update MSU) come with a CRC32 prepended to the file</span><br>    <span class="hljs-comment"># we don&#x27;t really care if it is valid or not, we just need to remove it if it is there</span><br>    <span class="hljs-comment"># we only need to calculate if the file starts with PA30 or PA19 and then has PA30 or PA19 after it</span><br>    magic = [<span class="hljs-string">b&quot;PA30&quot;</span>]<br>    <span class="hljs-keyword">if</span> legacy:<br>        magic.append(<span class="hljs-string">b&quot;PA19&quot;</span>)<br>    <span class="hljs-keyword">if</span> patch_contents[:<span class="hljs-number">4</span>] <span class="hljs-keyword">in</span> magic <span class="hljs-keyword">and</span> patch_contents[<span class="hljs-number">4</span>:][:<span class="hljs-number">4</span>] <span class="hljs-keyword">in</span> magic:<br>        <span class="hljs-comment"># we have to validate and strip the crc instead of just stripping it</span><br>        crc = <span class="hljs-built_in">int</span>.from_bytes(patch_contents[:<span class="hljs-number">4</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>        <span class="hljs-keyword">if</span> zlib.crc32(patch_contents[<span class="hljs-number">4</span>:]) == crc:<br>            <span class="hljs-comment"># crc is valid, strip it, else don&#x27;t</span><br>            patch_contents = patch_contents[<span class="hljs-number">4</span>:]<br>    <span class="hljs-keyword">elif</span> patch_contents[<span class="hljs-number">4</span>:][:<span class="hljs-number">4</span>] <span class="hljs-keyword">in</span> magic:<br>        <span class="hljs-comment"># validate the header strip the CRC, we don&#x27;t care about it</span><br>        patch_contents = patch_contents[<span class="hljs-number">4</span>:]<br>    <span class="hljs-comment"># check if there is just no CRC at all</span><br>    <span class="hljs-keyword">elif</span> patch_contents[:<span class="hljs-number">4</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> magic:<br>        <span class="hljs-comment"># this just isn&#x27;t valid</span><br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Patch file is invalid&quot;</span>)<br> <br>    applyflags = DELTA_APPLY_FLAG_ALLOW_PA19 <span class="hljs-keyword">if</span> legacy <span class="hljs-keyword">else</span> DELTA_FLAG_NONE<br><br>    dd = DELTA_INPUT()<br>    ds = DELTA_INPUT()<br>    dout = DELTA_OUTPUT()<br><br>    ds.lpcStart = buf<br>    ds.uSize = buflen<br>    ds.Editable = <span class="hljs-literal">False</span><br><br>    dd.lpcStart = cast(patch_contents, wintypes.LPVOID)<br>    dd.uSize = <span class="hljs-built_in">len</span>(patch_contents)<br>    dd.Editable = <span class="hljs-literal">False</span><br><br>    status = ApplyDeltaB(applyflags, ds, dd, byref(dout))<br>    <span class="hljs-keyword">if</span> status == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Patch &#123;&#125; failed with error &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(patchpath, gle()))<br><br>    <span class="hljs-keyword">return</span> (dout.lpStart, dout.uSize)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> sys<br>    <span class="hljs-keyword">import</span> base64<br>    <span class="hljs-keyword">import</span> hashlib<br>    <span class="hljs-keyword">import</span> argparse<br><br>    ap = argparse.ArgumentParser()<br>    mode = ap.add_mutually_exclusive_group(required=<span class="hljs-literal">True</span>)<br>    output = ap.add_mutually_exclusive_group(required=<span class="hljs-literal">True</span>)<br>    mode.add_argument(<span class="hljs-string">&quot;-i&quot;</span>, <span class="hljs-string">&quot;--input-file&quot;</span>,<br>                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;File to patch (forward or reverse)&quot;</span>)<br>    mode.add_argument(<span class="hljs-string">&quot;-n&quot;</span>, <span class="hljs-string">&quot;--null&quot;</span>, action=<span class="hljs-string">&quot;store_true&quot;</span>, default=<span class="hljs-literal">False</span>,<br>                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Create the output file from a null diff &quot;</span><br>                           <span class="hljs-string">&quot;(null diff must be the first one specified)&quot;</span>)<br>    output.add_argument(<span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;--output-file&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Destination to write patched file to&quot;</span>)<br>    output.add_argument(<span class="hljs-string">&quot;-d&quot;</span>, <span class="hljs-string">&quot;--dry-run&quot;</span>, action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Don&#x27;t write patch, just see if it would patch&quot;</span><br>                             <span class="hljs-string">&quot;correctly and get the resulting hash&quot;</span>)<br>    ap.add_argument(<span class="hljs-string">&quot;-l&quot;</span>, <span class="hljs-string">&quot;--legacy&quot;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, default=<span class="hljs-literal">False</span>,<br>                    <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Let the API use the PA19 legacy API (if required)&quot;</span>)<br>    ap.add_argument(<span class="hljs-string">&quot;patches&quot;</span>, nargs=<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Patches to apply&quot;</span>)<br>    args = ap.parse_args()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args.dry_run <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> args.output_file:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Either specify -d or -o&quot;</span>, file=sys.stderr)<br>        ap.print_help()<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> args.null:<br>        inbuf = <span class="hljs-string">b&quot;&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.input_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> r:<br>            inbuf = r.read()<br><br>    buf = cast(inbuf, wintypes.LPVOID)<br>    n = <span class="hljs-built_in">len</span>(inbuf)<br>    to_free = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> patch <span class="hljs-keyword">in</span> args.patches:<br>            buf, n = apply_patchfile_to_buffer(buf, n, patch, args.legacy)<br>            to_free.append(buf)<br><br>        outbuf = <span class="hljs-built_in">bytes</span>((c_ubyte*n).from_address(buf))<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args.dry_run:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.output_file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> w:<br>                w.write(outbuf)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">for</span> buf <span class="hljs-keyword">in</span> to_free:<br>            DeltaFree(buf)<br><br>    finalhash = hashlib.sha256(outbuf)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Applied &#123;&#125; patch&#123;&#125; successfully&quot;</span><br>          .<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(args.patches), <span class="hljs-string">&quot;es&quot;</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args.patches) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Final hash: &#123;&#125;&quot;</span><br>          .<span class="hljs-built_in">format</span>(base64.b64encode(finalhash.digest()).decode()))<br></code></pre></td></tr></table></figure><p>这是该程序的用法的打印输出，因此您可以了解它提供的功能以及如何使用它。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; python X:\Patches\tools\delta_patch.py <span class="hljs-literal">-h</span><br>usage: delta_patch.py [-<span class="hljs-type">h</span>] (<span class="hljs-literal">-i</span> INPUT_FILE | <span class="hljs-literal">-n</span>) (<span class="hljs-literal">-o</span> OUTPUT_FILE | <span class="hljs-literal">-d</span>) [-<span class="hljs-type">l</span>] patches [<span class="hljs-type">patches</span> <span class="hljs-type">...</span>]<br><br>positional arguments:<br>  patches               Patches to apply<br><br>optional arguments:<br>  <span class="hljs-literal">-h</span>, <span class="hljs-literal">--help</span>            show this help message and <span class="hljs-keyword">exit</span><br>  <span class="hljs-literal">-i</span> INPUT_FILE, <span class="hljs-literal">--input-file</span> INPUT_FILE<br>                        File to patch (forward or reverse)<br>  <span class="hljs-literal">-n</span>, <span class="hljs-literal">--null</span>            Create the output file from a null <span class="hljs-built_in">diff</span> (null <span class="hljs-built_in">diff</span> must be the first one specified)<br>  <span class="hljs-literal">-o</span> OUTPUT_FILE, <span class="hljs-literal">--output-file</span> OUTPUT_FILE<br>                        Destination to <span class="hljs-built_in">write</span> patched file to<br>  <span class="hljs-literal">-d</span>, <span class="hljs-literal">--dry-run</span>         Don<span class="hljs-string">&#x27;t write patch, just see if it would patchcorrectly and get the resulting hash</span><br><span class="hljs-string">  -l, --legacy          Let the API use the PA19 legacy API (if required)</span><br></code></pre></td></tr></table></figure><p>为了生成我想要的二进制文件，我将应用反向增量，然后应用每个正向增量，创建两个输出文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; python X:\Patches\tools\delta_patch.py <span class="hljs-literal">-i</span> ntoskrnl.exe <span class="hljs-literal">-o</span> ntoskrnl.<span class="hljs-number">2020</span><span class="hljs-literal">-07</span>.exe .\r\ntoskrnl.exe X:\Patches\x64\<span class="hljs-number">1903</span>\<span class="hljs-number">2020</span>\<span class="hljs-number">2020</span><span class="hljs-literal">-07</span>\x64\os<span class="hljs-literal">-kernel_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">959</span>\f\ntoskrnl.exe<br><br>Applied <span class="hljs-number">2</span> patches successfully<br>Final hash: zZC/JZ+y5ZLrqTvhRVNf1/<span class="hljs-number">79</span>C4ZYwXgmZ+DZBMoq8ek=<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; python X:\Patches\tools\delta_patch.py <span class="hljs-literal">-i</span> ntoskrnl.exe <span class="hljs-literal">-o</span> ntoskrnl.<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>.exe .\r\ntoskrnl.exe X:\Patches\x64\<span class="hljs-number">1903</span>\<span class="hljs-number">2020</span>\<span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\x64\os<span class="hljs-literal">-kernel_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">1016</span>\f\ntoskrnl.exe<br><br>Applied <span class="hljs-number">2</span> patches successfully<br>Final hash: UZw7bE231NL2R0S4yBNT1nmDW8PQ83u9rjp91AiCrUQ=<br></code></pre></td></tr></table></figure><p>补丁已成功应用，现在我有两个完整的二进制文件，一个来自 2020 年 8 月的补丁集，另一个来自 2020 年 7 月。生成的哈希值应与相应清单文件中的哈希值匹配！</p><h4 id="空差异怎么样？"><a href="#空差异怎么样？" class="headerlink" title="空差异怎么样？"></a><strong>空差异怎么样？</strong></h4><p>在继续比较两个内核版本之前，我想解释如何使用 delta_patch 工具从 null (n) 差异中生成完整文件。有一个内置选项！使用 <code>-n</code> 标志并指定输出文件（但没有输入文件），并且 delta_patch 会将增量应用到空缓冲区。结果是完整的文件！</p><p>例如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> &gt; python X:\Patches\tools\delta_patch.py <span class="hljs-literal">-n</span> <span class="hljs-literal">-o</span> vmcomputeagent.exe  <span class="hljs-number">2020</span><span class="hljs-literal">-08</span>\patch\amd64_hyperv<span class="hljs-literal">-compute-guestcomputeservice_31bf3856ad364e35_10</span>.<span class="hljs-number">0.18362</span>.<span class="hljs-number">329</span>_none_e3769ae1a46d95f1\n\vmcomputeagent.exe<br>Applied <span class="hljs-number">1</span> patch successfully<br>Final hash: B5mZQ8i4OU22UQXOaDhLHNtLNhos6exfTHlsPzTmXGo=<br><span class="hljs-built_in">PS</span> &gt; wsl <span class="hljs-literal">-e</span> file vmcomputeagent.exe<br>vmcomputeagent.exe: PE32+ executable (GUI) x86<span class="hljs-literal">-64</span>, <span class="hljs-keyword">for</span> MS Windows<br></code></pre></td></tr></table></figure><p>从文件的输出中可以看到，零差异已扩展为完整的可执行文件。当然，您还可以应用前向差分，但只能在空差分之后应用，否则您将没有文件可以修补！</p><h1 id="补丁比较"><a href="#补丁比较" class="headerlink" title="补丁比较"></a><strong>补丁比较</strong></h1><p>有大量关于二进制比较和<a href="https://malware.news/t/comparative-analysis-between-bindiff-and-diaphora-patched-smokeloader-study-case/40996">比较工具</a>的资源<a href="https://googleprojectzero.blogspot.com/2017/10/using-binary-diffing-to-discover.html">1</a>,<a href="https://beistlab.files.wordpress.com/2012/10/isec_2012_beist_slides.pdf">2</a>,<a href="https://wumb0.in/extracting-and-diffing-ms-patches-in-2020.html">3</a>,<a href="https://www.slideshare.net/cisoplatform7/bruh-do-you-even-diffdiffing-microsoft-patches-to-find-vulnerabilities">4</a>,<a href="https://apprize.best/security/ethical_1/20.html">5</a>, <a href="http://joxeankoret.com/blog/2015/03/13/diaphora-a-program-diffing-plugin-for-ida-pro/">6</a>,<a href="https://deadlisting.com/files/Sims_Patch_Diff_BSides_Baltimore.pdf">7</a>，因此我不会深入研究如何使用它们，但为了完整起见，我将比较我刚刚创建的两个内核！</p><p>我将在 IDA Pro 7.5 中打开两个版本的 ntoskrnl.exe，接受符号下载提示，然后让自动分析完成。然后，我将关闭两个版本中较新的版本 (2020-08) 并调用 <a href="https://www.zynamics.com/bindiff.html">BinDiff</a> 将新版本（次要版本）与旧版本（主要版本）进行比较。</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/patchdiff-matched-functions.png" alt="There are only a few changed functions between the two versions"></p><p>我将查看 <code>MmDuplicateMemory</code>，因为与内存相关的函数的变化总是引起我的注意！下面是 BinDiff 中组合调用图的概述。绿色块没有变化，黄色块有差异，红色块被补丁删除，灰色块被补丁添加。</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/bindiff-overview.png" alt="Graph overview with BinDiff in combined mode"></p><p>有很多变化，但我想突出显示一个块，特别是靠近函数顶部的块（由红色箭头表示）：</p><p><img src="/2023/07/06/Windows%20%E8%A1%A5%E4%B8%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%AF%94%E8%BE%83/bindiff-changed-block.png" alt="Can you spot the important change?"></p><p>看起来未修补的版本中未检查函数 <code>KeWaitForSingleObject</code> 的返回值，并且修补程序添加了一项检查以确保该函数返回值 0 (<code>WAIT_OBJECT_0</code>)。在判断这个bug的严重性方面，需要做更多的工作来调查什么可等待对象被传递给<code>KeWaitForSingleObject（cs：[0x1404681D0]）</code>，是否有任何方法可以让等待可靠地失败，以及该失败会导致什么行为。这是留给读者的练习。</p><h1 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a><strong>Wrap Up</strong></h1><p>感谢您坚持到最后。我希望你学到了一两件事。如果您有疑问、意见、疑虑、投诉或更正，请随时与我联系。我的推特账号是<a href="https://twitter.com/jgeigerm">@jgeigerm</a>。如果脚本损坏，也要联系他们，他们不应该这样做。以后我会尝试发布更多Windows相关内容，敬请期待。我希望有一天能在 <a href="https://www.sans.org/cyber-security-courses/advanced-exploit-development-penetration-testers/">SEC760</a> 见到你！我最近重写了内核开发日，教学非常精彩！</p><p>Tags: <a href="https://wumb0.in/tag/patch-diff/">patch-diff</a>  <a href="https://wumb0.in/tag/vr/">VR</a>  <a href="https://wumb0.in/tag/bindiff/">bindiff</a>  <a href="https://wumb0.in/tag/patch-delta/">patch-delta</a> </p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>栈相关检查</title>
    <link href="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/"/>
    <url>/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Base-Runtime-Checks-x2F-RTC1-…"><a href="#1-Base-Runtime-Checks-x2F-RTC1-…" class="headerlink" title="1. Base Runtime Checks(&#x2F;RTC1 …)"></a>1. Base Runtime Checks(&#x2F;RTC1 …)</h2><p>在vc开发程序的时候，我们在编译代码的时候，可以设置选项：<code>Base Runtime Checks</code> 如下图所示：</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/base-runtime-checks.png" alt="Base Runtime Checks"></p><h3 id="那么什么是基础的运行时检查呢？作用是什么？"><a href="#那么什么是基础的运行时检查呢？作用是什么？" class="headerlink" title="那么什么是基础的运行时检查呢？作用是什么？"></a><b>那么什么是基础的运行时检查呢？作用是什么？</b><br></h3><p>在这个部分，我们可以查看文档 <a href="https://docs.microsoft.com/en-us/cpp/build/reference/rtc-run-time-error-checks?view=msvc-160">&#x2F;RTC （运行时错误检查）</a></p><h3 id="在汇编中，我们能看到什么？"><a href="#在汇编中，我们能看到什么？" class="headerlink" title="在汇编中，我们能看到什么？"></a><b>在汇编中，我们能看到什么？</b></h3><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/RTCfunctions.png" alt="RTC functions"></p><h3 id="去掉RTC检查"><a href="#去掉RTC检查" class="headerlink" title="去掉RTC检查"></a><b>去掉RTC检查</b></h3><p>如下图，在选项中设置 <code>Default</code> 就可以了</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/no-base-runtime-checks.png"></p><p>那么在汇编中，现在的情况是什么呢？</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/ida-no-base-runtime-checks.png"></p><p>我们能看到，已经没有了相关的函数，只有一个初始化和结束的函数</p><h2 id="2-Buffer-Security-Check-x2F-GS"><a href="#2-Buffer-Security-Check-x2F-GS" class="headerlink" title="2. Buffer Security Check(&#x2F;GS)"></a>2. Buffer Security Check(&#x2F;GS)</h2><p>检测一些缓冲区溢出，这些溢出覆盖了函数的返回地址、异常处理程序地址或某些类型的参数。导致缓冲区溢出是黑客用来利用不强制执行缓冲区大小限制的代码的一种技术。</p><h3 id="什么是受保护的？"><a href="#什么是受保护的？" class="headerlink" title="什么是受保护的？"></a><b>什么是受保护的？</b></h3><p>在&#x2F; GS编译器选项保护下列项目：</p><ul><li><p>函数调用的返回地址。</p></li><li><p>函数的异常处理程序的地址。</p></li><li><p>易受攻击的函数参数。</p></li></ul><p>在所有平台上，&#x2F;GS尝试检测缓冲区溢出到返回地址。缓冲区溢出在 x86 和 x64 等平台上更容易被利用，这些平台使用调用约定将函数调用的返回地址存储在堆栈上。</p><p>在 x86 上，如果函数使用异常处理程序，编译器会注入安全 cookie 以保护异常处理程序的地址。在帧展开期间检查 cookie。</p><p>&#x2F;GS保护传递给函数的易受攻击的参数。易受攻击的参数是指针、C++ 引用、包含指针的 C 结构（C++ POD 类型）或 GS 缓冲区。</p><p>在 cookie 和局部变量之前分配了一个易受攻击的参数。缓冲区溢出可以覆盖这些参数。在函数返回和执行安全检查之前，使用这些参数的函数中的代码可能会导致攻击。为了尽量减少这种危险，编译器在函数 prolog 期间制作了易受攻击的参数的副本，并将它们放在任何缓冲区的存储区域之下。</p><p>在以下情况下，编译器不会复制易受攻击的参数：</p><ul><li><p>不包含 GS 缓冲区的函数。</p></li><li><p>未启用优化（&#x2F;O 选项）。</p></li><li><p>具有可变参数列表 (…) 的函数。</p></li><li><p>标有裸体的函数。</p></li><li><p>在第一条语句中包含内联汇编代码的函数。</p></li><li><p>参数仅以在缓冲区溢出时不太可能被利用的方式使用。</p></li></ul><h3 id="什么不受保护？"><a href="#什么不受保护？" class="headerlink" title="什么不受保护？"></a><b>什么不受保护？</b></h3><p>在&#x2F;GS编译器选项并不能防止所有的缓冲区溢出的安全攻击。例如，如果对象中有一个缓冲区和一个 vtable，则缓冲区溢出可能会损坏 vtable。</p><p>即使您使用&#x2F;GS，也要始终尝试编写没有缓冲区溢出的安全代码。</p><p><i>详细的信息可以查看<a href="https://docs.microsoft.com/en-us/cpp/build/reference/gs-buffer-security-check?view=msvc-160">微软官方文档</a></i></p><h3 id="在汇编中我们能看到什么？"><a href="#在汇编中我们能看到什么？" class="headerlink" title="在汇编中我们能看到什么？"></a><b>在汇编中我们能看到什么？</b></h3><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/buffersecuritycheck.png" alt="Buffer Security Check"></p><h2 id="3-Buffer-Security-Check原理"><a href="#3-Buffer-Security-Check原理" class="headerlink" title="3. Buffer Security Check原理"></a>3. Buffer Security Check原理</h2><p>我们在IDA 中查看反编译汇编代码，如下图：</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/asm-buffersercuritycheck.png"></p><p>观看以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">var_4= dword ptr -4<br><br>push    ebp<br>mov     ebp, esp<br>sub     esp, 70h<br>mov     eax, ___security_cookie<br>xor     eax, ebp<br>mov     [ebp+var_4], eax<br></code></pre></td></tr></table></figure><p>其中 <code>___security_cookie</code> 是一个固定值,如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">___security_cookie dd 0BB40E64Eh<br></code></pre></td></tr></table></figure><p>在函数结束位置，我们看到如下汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov     ecx, [ebp+var_4]<br>xor     ecx, ebp        ; cookie<br>call    j_@__security_check_cookie@4 ; __security_check_cookie(x)<br></code></pre></td></tr></table></figure><p>我们查看 <code>__security_check_cookie(x)</code> 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asm">; void __fastcall __security_check_cookie(unsigned int cookie)<br>.text:00411310 @__security_check_cookie@4 proc near    ; CODE XREF: __security_check_cookie(x)j<br>.text:00411310<br>.text:00411310 cookie          = dword ptr -4<br>.text:00411310<br>.text:00411310                 cmp     ecx, ___security_cookie<br>.text:00411316                 jnz     short failure<br>.text:00411318                 rep retn<br>.text:0041131A ; ---------------------------------------------------------------------------<br>.text:0041131A<br>.text:0041131A failure:                                ; CODE XREF: __security_check_cookie(x)+6j<br>.text:0041131A                 jmp     j____report_gsfailure<br>.text:0041131A @__security_check_cookie@4 endp<br></code></pre></td></tr></table></figure><p>我们比较上面的内容发现，如果在使用过程中，变量改变了，那么就出现错误。所以这样就保证了缓存区溢出造成的漏洞。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li>目录projects 下有功能 test_safeSEH 和 testc_bufcheck</li></ol><h2 id="4-x2F-JMC-CheckForDebuggerJustMyCode-4-选项"><a href="#4-x2F-JMC-CheckForDebuggerJustMyCode-4-选项" class="headerlink" title="4. &#x2F;JMC (@__CheckForDebuggerJustMyCode@4) 选项"></a>4. &#x2F;JMC (@__CheckForDebuggerJustMyCode@4) 选项</h2><p>微软官方文档：<a href="https://learn.microsoft.com/en-us/cpp/build/reference/jmc?view=msvc-170">https://learn.microsoft.com/en-us/cpp/build/reference/jmc?view=msvc-170</a></p><p>指定编译器支持 Visual Studio 调试器中的本机 Just My Code 调试。此选项支持允许 Visual Studio 跨过系统、框架、库和其他非用户调用并在调用堆栈窗口中折叠这些调用的用户设置。 &#x2F;JMC 编译器选项从 Visual Studio 2017 版本 15.8 开始可用。</p><p>选项位置：</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/jmc.png"></p><p>启用 &#x2F;JMC 时，编译器会在函数序言中插入对辅助函数 <code>__CheckForDebuggerJustMyCode</code> 的调用。帮助函数提供支持 Visual Studio 调试器 Just My Code 步骤操作的挂钩。</p><p>如果启用了 <code>/JMC</code> 通过反汇编，可以查看如下代码：</p><p><img src="/2023/07/05/%E6%A0%88%E7%9B%B8%E5%85%B3%E6%A3%80%E6%9F%A5/jmc2.png"></p><p>启用 <code>/JMC</code> 选项后，PDB 文件会使用额外的行号信息进行注释。在 Visual Studio 2019 版本 16.8 之前的版本中，此信息可能会出现在代码覆盖率报告中，出现在第 15732480 (0xF00F00) 行或 16707566 (0xFEEFEE) 行。这些虚构的行号用作区分用户代码和非用户代码的标记。要在没有这些意外行号的情况下在代码覆盖率报告中包含非用户代码，请使用 <code>/JMC-</code> 选项构建您的代码。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>星期二补丁- 星期三利用：24 小时内破解 WinSock (afd.sys) 的 Windows 辅助功能驱动程序</title>
    <link href="/2023/07/04/CVE-2023-21768/"/>
    <url>/2023/07/04/CVE-2023-21768/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://securityintelligence.com/posts/patch-tuesday-exploit-wednesday-pwning-windows-ancillary-function-driver-winsock/">Patch Tuesday -&gt; Exploit Wednesday: Pwning Windows Ancillary Function Driver for WinSock (afd.sys) in 24 Hours</a></p><style>.highlight {    background-color: rgba(23, 200, 150, 0.5);}</style><p>“星期二补丁，星期三利用” 是一句古老的黑客格言，指的是每月安全补丁公开后的第二天，漏洞就被武器化。随着安全性的提高和漏洞缓解措施变得更加复杂，制作武器化漏洞所需的研究和开发量也随之增加。这与内存损坏漏洞尤其相关。</p><p><img src="/2023/07/04/CVE-2023-21768/p0.png"></p><p>然而，随着 Windows 11 内核中添加新功能（以及内存不安全的 C 代码），可能会引入成熟的新攻击面。通过研究这个新引入的代码，我们证明了可以轻易武器化的漏洞仍然经常发生。在这篇博文中，我们分析并利用了 Winsock 的 Windows 辅助功能驱动程序 <code>afd.sys</code> 中的一个漏洞，用于 Windows 11 上的本地权限升级 (LPE)。虽然我们之前都没有使用此内核模块的经验，但我们能够在大约一天内诊断、重现该漏洞并将其武器化。您可以在 [此处] (<a href="https://github.com/xforcered/Windows_LPE_AFD_CVE-2023-21768)%E6%89%BE%E5%88%B0%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81%E3%80%82">https://github.com/xforcered/Windows_LPE_AFD_CVE-2023-21768)找到漏洞利用代码。</a></p><h2 id="补丁差异和根本原因分析"><a href="#补丁差异和根本原因分析" class="headerlink" title="补丁差异和根本原因分析"></a><strong>补丁差异和根本原因分析</strong></h2><p>根据微软安全响应中心（MSRC）发布的CVE-2023-21768的详细信息，该漏洞存在于辅助功能驱动程序（AFD）中，其二进制文件名为 <code>afd.sys</code>。AFD 模块是 <a href="https://en.wikipedia.org/wiki/Winsock">Winsock API</a> 的内核入口点。利用这些信息，我们分析了 2022 年 12 月的驱动程序版本，并将其与 2023 年 1 月新发布的版本进行了比较。这些样本可以从 <a href="https://winbindex.m417z.com/">Winbindex</a> 单独获取，无需从 Microsoft 补丁中提取更改的耗时过程。分析的两个版本如下所示。</p><ul><li>AFD.sys &#x2F; Windows 11 22H2 &#x2F; 10.0.22621.608 (December 2022)</li><li>AFD.sys &#x2F; Windows 11 22H2 &#x2F; 10.0.22621.1105 (January 2023)</li></ul><p><a href="https://ghidra-sre.org/">Ghidra</a> 用于为这两个文件创建二进制导出，以便可以在 <a href="https://www.zynamics.com/bindiff.html">BinDiff</a> 中对它们进行比较。匹配功能的概述如下所示。</p><p><img src="/2023/07/04/CVE-2023-21768/p1.png"></p><center>Figure 2 — Binary comparison of AFD.sys</center><p>似乎只有一个函数发生了变化，<code>afd!AfdNotifyRemoveIoCompletion</code>。这大大加快了我们对漏洞的分析速度。然后我们比较了这两个功能。下面的屏幕截图显示了在 <a href="https://binary.ninja/">Binary Ninja</a> 中查看反编译代码时修补前后代码的变化。</p><p><strong>Pre-patch</strong>, <code>afd.sys version 10.0.22621.608</code>.</p><p><img src="/2023/07/04/CVE-2023-21768/p2.png"></p><center>Figure 3 — afd!AfdNotifyRemoveIoCompletion pre-patch</center><p><strong>Post-patch</strong>, <code>afd.sys version 10.0.22621.1105</code>.</p><p><img src="/2023/07/04/CVE-2023-21768/p3.png"></p><center>Figure 4 — afd!AfdNotifyRemoveIoCompletion post-patch</center><p>上面显示的此更改是对已识别功能的唯一更新。一些快速分析表明，正在根据以下内容执行检查</p><p><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/previousmode">PreviousMode</a> 。 如果 <code>PreviousMode</code> 为 0 （表明调用源自内核），则将值写入由未知结构中的字段指定的指针。另一方面，如果 PreviousMode 不为零，则 <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-probeforwrite">ProbeForWrite</a>函数被调用确保该字段中设置的指针是驻留在用户模式中的有效地址。</p><p>补丁前版本的驱动程序中缺少此检查。由于该函数有一个针对 <code>PreviousMode</code> 的特定 switch 语句，因此假设开发人员打算添加此检查但忘记了（我们有时都缺咖啡☕！）。</p><p>从这次更新中，我们可以推断攻击者可以通过未知结构的 <code>field_0x18</code> 处的受控值到达此代码路径。如果攻击者能够使用内核地址填充此字段，则可以创建任意内核 Write-Where 原语。此时，尚不清楚正在写入什么值，但任何值都可能用于本地权限升级原语。</p><p>函数原型本身包含 <code>PreviousMode</code> 值和指向未知结构的指针，分别作为第一个和第三个参数。</p><p><img src="/2023/07/04/CVE-2023-21768/p4.png"></p><center>Figure 5 — afd!AfdNotifyRemoveIoCompletion function prototype</center><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a><strong>逆向工程</strong></h2><p>我们现在知道漏洞的位置，但不知道如何触发有漏洞的代码路径的执行。在开始进行概念验证 (PoC) 之前，我们将进行一些逆向工程。</p><p>首先，交叉引用易受攻击的函数以了解其使用地点和方式。</p><p><img src="/2023/07/04/CVE-2023-21768/p5.png"></p><p>在 <code>afd!AfdNotifySock</code> 中对易受攻击的函数进行了一次调用。</p><p>我们重复该过程，寻找对 <code>AfdNotifySock</code> 的交叉引用。我们发现没有对该函数的直接调用，但其地址出现在名为 <code>AfdIrpCallDispatch</code> 的函数指针表上方。</p><p><img src="/2023/07/04/CVE-2023-21768/p6.png"></p><center>Figure 7 — afd!AfdIrpCallDispatch</center><p>该表包含 AFD 驱动程序的调度例程。调度例程用于通过调用来处理来自 Win32 应用程序的请求 <a href="https://learn.microsoft.com/en-us/windows/win32/api/ioapiset/nf-ioapiset-deviceiocontrol">DeviceIoControl</a>. 每个函数的控制代码可在 <code>AfdIoctlTable</code> 中找到。</p><p>然而，上面的指针并不像我们预期的那样位于 <code>AfdIrpCallDispatch</code> 表中。从 Steven Vittitoe 的 <a href="https://recon.cx/2015/slides/recon2015-20-steven-vittitoe-Reverse-Engineering-Windows-AFD-sys.pdf">Recon</a> 谈话幻灯片中，我们发现 AFD 实际上有两个调度表。第二个是 <code>AfdImmediateCallDispatch</code> 。通过计算该表的开头与存储 AfdNotifySock 的指针之间的距离，我们可以计算 AfdIoctlTable 的索引，该索引显示该函数的控制代码是 <code>0x12127</code>。</p><p><img src="/2023/07/04/CVE-2023-21768/p7.png"></p><center>Figure 8 — afd!AfdIoctlTable</center><p>值得注意的是，它是表中最后一个输入&#x2F;输出控制（IOCTL）代码，表明 <code>AfdNotifySock</code> 很可能是最近添加到 AFD 驱动程序中的新调度函数。</p><p>此时，我们有几个选择。我们可以在用户空间对相应的 <code>Winsock API</code> 进行逆向工程，以更好地了解底层内核函数是如何调用的，或者对内核代码进行逆向工程并直接调用它。我们实际上并不知道哪个 Winsock 函数对应于 <code>AfdNotifySock</code> ，因此我们选择了后者。</p><p>我们发现 <a href="https://twitter.com/x86matthew">x86matthew</a> 发布的一些<a href="https://www.x86matthew.com/view_post?id=ntsockets">代码</a>通过直接调用 AFD 驱动程序来执行套接字操作，放弃了 Winsock 库。从隐秘的角度来看，这很有趣，但就我们的目的而言，它是一个很好的模板，可以创建 TCP 套接字的句柄以向 AFD 驱动程序发出 IOCTL 请求。从那里，我们能够到达目标函数，正如在内核调试时到达 <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools">WinDbg</a> 中设置的断点所证明的那样。</p><p><img src="/2023/07/04/CVE-2023-21768/p8.png"></p><center>Figure 9 — afd!AfdNotifySock breakpoint</center><p>现在，回顾一下 <code>DeviceIoControl</code> 的函数原型，通过它我们从用户空间调用 AFD 驱动程序。参数之一 lpInBuffer 是用户模式缓冲区。如上一节所述，该漏洞的发生是因为用户能够在未知数据结构中将未经验证的指针传递给驱动程序。该结构是通过 <code>lpInBuffer</code> 参数直接从我们的用户模式应用程序传入的。它作为第四个参数传递到 AfdNotifySock 中，并作为第三个参数传递到 <code>AfdNotifyRemoveIoCompletion</code> 中。</p><p>此时，我们不知道如何填充 <code>lpInBuffer</code> 中的数据（我们将其称为 <code>AFD_NOTIFYSOCK_STRUCT</code> ），以便通过到达 <code>AfdNotifyRemoveIoCompletion</code> 中易受攻击的代码路径所需的检查。我们逆向工程过程的其余部分包括遵循执行流程并检查如何访问易受攻击的代码。</p><p>让我们逐一检查一下。</p><p>我们遇到的第一个检查是在 <code>AfdNotifySock</code> 的开头：</p><p><img src="/2023/07/04/CVE-2023-21768/p9.png"></p><center>Figure 10 — afd!AfdNotifySock size check</center><p>此检查告诉我们 <code>AFD_NOTIFYSOCK_STRUCT</code> 的大小应等于 0x30 字节，否则函数会失败并显示 <code>STATUS_INFO_LENGTH_MISMATCH</code> 。</p><p>下一个检查验证结构中各个字段中的值：</p><p><img src="/2023/07/04/CVE-2023-21768/p10.png"></p><center>Figure 11 — afd!AfdNotifySock structure validation</center><p>当时我们不知道这些字段对应什么，所以我们传入一个 <code>0x30</code> 字节数组，其中填充了 <code>0x41</code> 字节（AAAAAAAAA…）。</p><p>我们遇到的下一个检查是在调用之后 <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-obreferenceobjectbyhandle">ObReferenceObjectByHandle</a>. 该函数将输入结构的第一个字段作为其第一个参数。</p><p><img src="/2023/07/04/CVE-2023-21768/p11.png"></p><center>Figure 12 — afd!AfdNotifySock call nt!ObReferenceObjectByHandle</center><p>该调用必须返回成功才能继续到正确的代码执行路径，这意味着我们必须将有效的句柄传递给 <code>IoCompletionObject</code> 。没有正式记录的方法可以通过 Win32 API 创建该类型的对象。然而，经过一番搜索，我们发现了一个未记录的 NT 函数 <a href="http://undocumented.ntinternals.net/index.html?page=UserMode/Undocumented%20Functions/NT%20Objects/IoCompletion/NtCreateIoCompletion.html">NtCreateIoCompletion</a> 之后，我们到达一个循环，其计数器是结构中的值之一：</p><p><img src="/2023/07/04/CVE-2023-21768/p12.png"></p><center>Figure 13 — afd!AfdNotifySock loop</center><p>该循环检查结构中的一个字段，以验证它包含有效的用户模式指针并将数据复制到其中。每次循环迭代后指针都会递增。我们用有效地址填充了指针，并将计数器设置为 1。从这里，我们最终能够到达存在漏洞的函数 <code>AfdNotifyRemoveIoCompletion</code> 。</p><p><img src="/2023/07/04/CVE-2023-21768/p13.png"></p><center>Figure 14 — afd!AfdNotifyRemoveIoCompletion call</center><p>进入 <code>AfdNotifyRemoveIoCompletion</code> 后，第一个检查是结构中的另一个字段。它必须是非零的。然后将其乘以 0x20，并与结构体中的另一个字段一起作为指针参数传递到 <code>ProbeForWrite</code> 。从这里，我们可以使用有效的用户模式指针 (<code>pData2</code>) 和字段 <code>dwLen = 1</code> 进一步填充结构（以便传递给 <code>ProbeForWrite</code> 的总大小等于 <code>0x20</code> ），并且检查通过。</p><p><img src="/2023/07/04/CVE-2023-21768/p14.png"></p><center>Figure 15 — afd! Afd!AfdNotifyRemoveIoCompletion field check</center><p>最后，在到达目标代码之前要通过的最后一个检查是对 <code>IoRemoveCompletion</code> 的调用，它必须返回 0 (<code>STATUS_SUCCESS</code>)。</p><p>该函数将阻塞，直到：</p><ul><li><p>完成记录可用于 <code>IoCompletionObject</code> 参数</p></li><li><p>超时到期，作为函数的参数传入</p></li></ul><p>我们通过结构控制超时值，但简单地将超时设置为 0 不足以让函数返回成功。为了使该函数无错误地返回，必须至少有一个可用的完成记录。经过一番研究，我们发现了未记录的功能 <a href="http://undocumented.ntinternals.net/index.html?page=UserMode/Undocumented%20Functions/NT%20Objects/IoCompletion/NtSetIoCompletion.html">NtSetIoCompletion</a> 它手动增加 <code>IoCompletionObject</code> 上的 I&#x2F;O 挂起计数器。在我们之前创建的 <code>IoCompletionObject</code> 上调用此函数可确保对 <code>IoRemoveCompletion</code> 的调用返回 <code>STATUS_SUCCESS</code> 。</p><p><img src="/2023/07/04/CVE-2023-21768/p15.png"></p><center>Figure 16 — afd!AfdNotifyRemoveIoCompletion check return nt!IoRemoveIoCompletion</center><h2 id="触发任意写位置"><a href="#触发任意写位置" class="headerlink" title="触发任意写位置"></a><strong>触发任意写位置</strong></h2><p>现在我们可以到达易受攻击的代码，我们可以用任意要写入的地址填充结构中的适当字段。我们写入该地址的值来自一个整数，该整数的指针被传递到对 <code>IoRemoveIoCompletion</code> 的调用中。 <code>IoRemoveIoCompletion</code> 将此整数的值设置为调用 <code>KeRemoveQueueEx</code> 的返回值。</p><p><img src="/2023/07/04/CVE-2023-21768/p16.png"></p><center>Figure 17 — nt!KeRemoveQueueEx return value</center><p><img src="/2023/07/04/CVE-2023-21768/p17.png"></p><center>Figure 18 — nt!KeRemoveQueueEx return use</center><p>在我们的概念验证中，该写入值始终等于 0x1。我们推测 <code>KeRemoveQueueEx</code> 的返回值是从队列中删除的项目数，但没有进一步调查。此时，我们已经有了所需的原语，并继续完成漏洞利用链。我们后来证实了这个猜测是正确的，并且可以通过对 <code>IoCompletionObject</code> 上的 <code>NtSetIoCompletion</code> 进行额外调用来任意增加写入值。</p><h2 id="LPE-with-IORING"><a href="#LPE-with-IORING" class="headerlink" title="LPE with IORING"></a><strong>LPE with IORING</strong></h2><p>由于能够在任意内核地址写入固定值 (0x1)，我们继续将其转换为完整的任意内核读&#x2F;写。由于此漏洞影响最新版本的 Windows 11(<a href="https://learn.microsoft.com/en-us/windows/release-health/windows11-release-information">22H2</a>)，因此我们选择利用 <a href="https://learn.microsoft.com/en-us/windows/win32/api/ioringapi/">Windows I&#x2F;O</a> 环对象损坏来创建我们的原语。<a href="https://twitter.com/yarden_shafir">Yarden Shafir</a> 撰写了许多关于 Windows I&#x2F;O 环的优秀文章，并且还开发并披露了我们在漏洞利用链中利用的<a href="https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/">原语</a>。据我们所知，这是该原语首次被用于公共漏洞利用。<span class="highlight"> 当用户初始化 I&#x2F;O 环时，会创建两个独立的结构，一个在用户空间，一个在内核空间。</span> 这些结构如下所示。</p><p>内核对象映射到 <code>nt!_IORING_OBJECT</code>，如下所示。</p><p><img src="/2023/07/04/CVE-2023-21768/p18.png"></p><center>Figure 19 — nt!_IORING_OBJECT initialization</center><p>请注意，内核对象有两个字段：<code>RegBuffersCount</code> 和 <code>RegBuffers</code>，它们在初始化时被清零。该计数指示有多少 I&#x2F;O 操作可以在 I&#x2F;O 环中排队。另一个参数是指向当前排队操作列表的指针。</p><p>在用户空间端，调用 <a href="https://learn.microsoft.com/en-us/windows/win32/api/ioringapi/nf-ioringapi-createioring">kernelbase!CreateIoRing</a>时，如果成功，您将返回一个 I&#x2F;O 环句柄。该句柄是指向未记录结构 (<code>HIORING</code>) 的指针。我们对这种结构的定义是从 Yarden Shafir 所做的研究中获得的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">HIORING</span> &#123;</span><br>    HANDLE handle;<br>    NT_IORING_INFO Info;<br>    ULONG IoRingKernelAcceptedVersion;<br>    PVOID RegBufferArray;<br>    ULONG BufferArraySize;<br>    PVOID Unknown;<br>    ULONG FileHandlesCount;<br>    ULONG SubQueueHead;<br>    ULONG SubQueueTail;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果某个漏洞（例如本博文中提到的漏洞）允许您更新 <code>RegBuffersCount</code> 和 <code>RegBuffers</code> 字段，则可以使用标准 I&#x2F;O Ring API 来读取和写入内核内存。</p><p>正如我们在上面看到的，我们可以利用该漏洞在我们喜欢的任何内核地址写入 <code>0x1</code>。要设置 I&#x2F;O 环原语，我们只需触发该漏洞两次即可。</p><p><img src="/2023/07/04/CVE-2023-21768/p19.png"></p><center>Figure 20 — nt!_IORING_OBJECT first time triggering the bug</center><p>在第二个触发器中，我们将 <code>RegBuffers</code> 设置为可以在用户空间中分配的地址（例如 <code>0x0000000100000000</code>）。</p><p><img src="/2023/07/04/CVE-2023-21768/p20.png"></p><center>Figure 21 — nt!_IORING_OBJECT second time triggering the bug</center><p><span class="highlight">备注：</span> 需要验证两次的原因就是 <code>RegBuffersCount</code> 和 <code>RegBuffers</code> 分别验证是否能通过带有缺陷的驱动写入。</p><p>剩下的就是通过在用户空间地址 (<code>0x100000000</code>) 写入伪造的 <code>nt!_IOP_MC_BUFFER_ENTRY</code> 结构的指针来对 I&#x2F;O 操作进行排队。条目数应等于 <code>RegBuffersCount</code> 。下图中突出显示了此过程。</p><p><img src="/2023/07/04/CVE-2023-21768/p21.png"></p><center>Figure 22 — Setting up user space for I/O Ring kernel R/W primitive</center><p>下面的屏幕截图显示了这样一个 <code>nt!_IOP_MC_BUFFER_ENTRY</code> 。请注意，操作的目标是内核地址 (<code>0xfffff8052831da20</code>)，并且在本例中操作的大小为 <code>0x8</code> 字节。从结构中无法判断这是读操作还是写操作。操作的方向取决于使用哪个 API 对 I&#x2F;O 请求进行排队。利用 <a href="https://learn.microsoft.com/en-us/windows/win32/api/ioringapi/nf-ioringapi-buildioringreadfile">kernelbase!BuildIoRingReadFile</a> 导致任意内核写入，<code>kernelbase!BuildIoRingWriteFile</code> 导致任意内核读取。</p><p><img src="/2023/07/04/CVE-2023-21768/p22.png"></p><center>Figure 23 — Example faked I/O Ring operation</center><p>为了执行任意写入，I&#x2F;O 操作的任务是从文件句柄读取数据并将该数据写入内核地址。</p><p><img src="/2023/07/04/CVE-2023-21768/p23.png"></p><center>Figure 24 — I/O Ring arbitrary write</center><p>相反，为了执行任意读取，I&#x2F;O 操作的任务是读取内核地址处的数据并将该数据写入文件句柄。</p><p><img src="/2023/07/04/CVE-2023-21768/p24.png"></p><center>Figure 25 – I/O Ring arbitrary read</center><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><strong>Demo</strong></h2><p>设置原语后，剩下的就是使用一些标准内核后利用技术来泄漏系统（PID 4）等提升进程的令牌并覆盖不同进程的令牌。</p><p><a href="https://youtu.be/M3IPsKAsxvQ">Exploiting Windows 11 with Ancillary Function Driver vulnerability CVE-2023-21768</a></p><p><img src="/2023/07/04/CVE-2023-21768/p25.png"></p><h2 id="在野利用"><a href="#在野利用" class="headerlink" title="在野利用"></a><strong>在野利用</strong></h2><p>在我们的漏洞<a href="https://github.com/xforcered/Windows_LPE_AFD_CVE-2023-21768">代码</a>公开后，来自360 Icesword Lab的Xiaoliang Liu（<a href="https://twitter.com/flame36987044">@flame36987044</a>）首次公开披露，他们在今年早些时候发现了利用该漏洞的样本（ITW）。 ITW 样本使用的技术与我们的不同。攻击者使用相应的 Winsock API 函数 <code>ProcessSocketNotifications</code> 触发漏洞，而不是像我们的漏洞利用那样直接调用 afd.sys 驱动程序。</p><p>360冰剑实验室官方声明如下：</p><p>“360冰剑实验室专注于APT检测与防御。基于我们的0day漏洞雷达系统，今年1月份我们在野外发现了CVE-2023-21768的利用样本，该样本与 <a href="https://twitter.com/chompie1337">@chompie1337</a> 和 <a href="https://twitter.com/FuzzySec">@FuzzySec</a> 公布的利用样本不同，它是通过系统机制和漏洞特征进行利用的。该漏洞与 <code>NtSetIoCompletion</code> 和 <code>ProcessSocketNotifications</code> 有关， <code>ProcessSocketNotifications</code> 获取调用 <code>NtSetIoCompletion</code> 的次数，因此我们使用它来更改权限计数。”</p><h2 id="结论和最终反思"><a href="#结论和最终反思" class="headerlink" title="结论和最终反思"></a>结论和最终反思</h2><p>您可能会注意到，在逆向工程的某些部分，我们的分析是肤浅的。有时，仅观察一些相关的状态变化并将程序的某些部分视为黑匣子是有帮助的，以避免陷入不相关的兔子洞。这使我们能够快速扭转漏洞，尽管最大化完成速度不是我们的目标。此外，我们对 afd.sys 中所有报告的漏洞进行了补丁差异审查，这些漏洞被标记为“利用可能性更大”。我们的审查显示，除了两个漏洞之外，所有漏洞都是由于对从用户模式传入的指针验证不当造成的。这表明，了解过去的漏洞（尤其是特定目标内的漏洞）的历史知识，对于发现新漏洞可能会卓有成效。当代码库扩展时，同样的错误很可能会重复。请记住，新的 C 代码 &#x3D;&#x3D; 新的 bug 😀。正如发现上述漏洞在野外被利用所证明的那样，可以肯定地说，攻击者也在密切监视新的代码库添加。</p><p>Windows 内核中缺乏对管理员模式访问保护 (SMAP) 的支持，这给我们提供了丰富的选项来构建新的纯数据利用原语。这些原语在支持 SMAP 的其他操作系统中不可行。例如，考虑 CVE-2021-41073，这是 Linux 的 I&#x2F;O 环预注册缓冲区实现中的一个漏洞（我们在 Windows 中滥用相同的功能用于 R&#x2F;W 原语）。此漏洞可以允许覆盖已注册缓冲区的内核指针，但不能用于构造任意 R&#x2F;W 原语，因为如果该指针被替换为用户指针，并且内核尝试在那里读取或写入，系统将崩溃。</p><p>尽管微软尽了最大努力来消除人们喜爱的<a href="https://twitter.com/33y0re/status/1597640404748599296">漏洞利用原语</a>，但肯定会发现新的原语来取代它们。我们能够利用最新版本的 Windows 11 22H2，而不会遇到 <a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/bringup/device-guard-and-credential-guard">HVCI(内存完整性和基于虚拟化的安全性)</a> 等基于虚拟化的安全功能的任何缓解或限制。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2023-21768">MSRC (CVE-2023-21768)</a></li><li><a href="https://windows-internals.com/i-o-rings-when-one-i-o-operation-is-not-enough/">I&#x2F;O Rings – When One I&#x2F;O Operation is Not Enough  (@yarden_shafir)</a></li><li><a href="https://windows-internals.com/ioring-vs-io_uring-a-comparison-of-windows-and-linux-implementations/">IoRing vs. io_uring: a comparison of Windows and Linux implementations  (@yarden_shafir)</a></li><li><a href="https://windows-internals.com/one-year-to-i-o-ring-what-changed/">One Year to I&#x2F;O Ring: What Changed? (@yarden_shafir)</a></li><li><a href="https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/">One I&#x2F;O Ring to Rule Them All: A Full Read&#x2F;Write Exploit Primitive on Windows 11 (@yarden_shafir)</a></li><li><a href="https://knifecoat.com/Posts/Arbitrary+Kernel+RW+using+IORING's">Arbitrary Kernel RW using IORING’s (@FuzzySec)</a></li><li><a href="https://www.x86matthew.com/view_post?id=ntsockets">NTSockets – Downloading a file via HTTP using the NtCreateFile and NtDeviceIoControlFile syscalls (@x86matthew)</a></li><li><a href="https://recon.cx/2015/slides/recon2015-20-steven-vittitoe-Reverse-Engineering-Windows-AFD-sys.pdf">Reverse Engineering AFD.sys (@bool101)</a></li><li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/243235">Microsoft Windows Ancillary Function Driver for WinSock privilege escalation CVE-2023-21768 Vulnerability Report</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
